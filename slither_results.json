{"success": true, "error": null, "results": {"printers": [{"elements": [], "description": "{\n    \"payable\": {\n        \"IMulticall3\": [\n            \"aggregate((address,bytes)[])\",\n            \"aggregate3((address,bool,bytes)[])\",\n            \"aggregate3Value((address,bool,uint256,bytes)[])\",\n            \"blockAndAggregate((address,bytes)[])\",\n            \"tryAggregate(bool,(address,bytes)[])\",\n            \"tryBlockAndAggregate(bool,(address,bytes)[])\"\n        ],\n        \"CollateralTracker\": [\n            \"deposit(uint256,address)\",\n            \"mint(uint256,address)\",\n            \"settleLiquidation(address,address,int256)\"\n        ],\n        \"PanopticPool\": [\n            \"liquidate(uint256[],address,uint256[])\"\n        ],\n        \"IPoolManager\": [\n            \"settle()\",\n            \"settleFor(address)\"\n        ],\n        \"CryticTester\": [\n            \"constructor()\"\n        ]\n    },\n    \"timestamp\": {\n        \"PanopticPool\": [\n            \"initialize()\",\n            \"validateCollateralWithdrawable(address,uint256[],bool)\",\n            \"pokeMedian()\",\n            \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n            \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n            \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n            \"getOracleTicks()\"\n        ],\n        \"PanopticMath\": [\n            \"getOracleTicks(address,uint256)\",\n            \"computeInternalMedian(uint256,uint256,uint256,uint256,address)\"\n        ],\n        \"ERC20\": [\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n        ],\n        \"MockERC20\": [\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n        ],\n        \"MockV3CompatibleOracle\": [\n            \"observations(uint256)\"\n        ]\n    },\n    \"block_number\": {},\n    \"msg_sender\": {\n        \"CollateralTracker\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\",\n            \"unlockCallback(bytes)\",\n            \"deposit(uint256,address)\",\n            \"mint(uint256,address)\",\n            \"withdraw(uint256,address,address)\",\n            \"withdraw(uint256,address,address,uint256[],bool)\",\n            \"redeem(uint256,address,address)\",\n            \"delegate(address)\",\n            \"revoke(address)\",\n            \"settleLiquidation(address,address,int256)\",\n            \"refund(address,address,int256)\",\n            \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n            \"exercise(address,int128,int128,int128,int128)\"\n        ],\n        \"PanopticPool\": [\n            \"assertMinCollateralValues(uint256,uint256)\",\n            \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n            \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n            \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n            \"forceExercise(address,uint256,uint256[],uint256[],uint256)\"\n        ],\n        \"SemiFungiblePositionManager\": [\n            \"setApprovalForAll(address,bool)\",\n            \"unlockCallback(bytes)\",\n            \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n            \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\"\n        ],\n        \"ERC1155\": [\n            \"setApprovalForAll(address,bool)\",\n            \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n            \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"\n        ],\n        \"ERC20Minimal\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"Ownable\": [\n            \"renounceOwnership()\",\n            \"transferOwnership(address)\"\n        ],\n        \"ERC20S\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"ERC20\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"MockERC20\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"HypoVault\": [\n            \"renounceOwnership()\",\n            \"transferOwnership(address)\",\n            \"approve(address,uint256)\",\n            \"setManager(address)\",\n            \"setAccountant(address)\",\n            \"setFeeWallet(address)\",\n            \"requestDeposit(uint128)\",\n            \"requestWithdrawal(uint128)\",\n            \"cancelDeposit(address)\",\n            \"cancelWithdrawal(address)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\",\n            \"manage(address,bytes,uint256)\",\n            \"manage(address[],bytes[],uint256[])\",\n            \"fulfillDeposits(uint256,bytes)\",\n            \"fulfillWithdrawals(uint256,uint256,bytes)\"\n        ],\n        \"Token\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"PanopticVaultAccountant\": [\n            \"renounceOwnership()\",\n            \"transferOwnership(address)\",\n            \"updatePoolsHash(address,bytes32)\",\n            \"lockVault(address)\"\n        ],\n        \"CryticTester\": [\n            \"hypoVault_fulfillDeposits(uint256,bytes)\"\n        ],\n        \"CryticToFoundry\": [\n            \"hypoVault_fulfillDeposits(uint256,bytes)\"\n        ],\n        \"TargetFunctions\": [\n            \"hypoVault_fulfillDeposits(uint256,bytes)\"\n        ],\n        \"HypoVaultTargets\": [\n            \"hypoVault_fulfillDeposits(uint256,bytes)\"\n        ]\n    },\n    \"msg_gas\": {},\n    \"assert\": {\n        \"CryticTester\": [\n            \"hypoVault_fulfillDeposits(uint256,bytes)\"\n        ]\n    },\n    \"constant_functions\": {\n        \"FoundryAsserts\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\"\n        ],\n        \"StdAssertions\": [\n            \"failed()\"\n        ],\n        \"stdError\": [\n            \"assertionError()\",\n            \"arithmeticError()\",\n            \"divisionError()\",\n            \"enumConversionError()\",\n            \"encodeStorageError()\",\n            \"popError()\",\n            \"indexOOBError()\",\n            \"memOverflowError()\",\n            \"zeroVarError()\"\n        ],\n        \"StdInvariant\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\"\n        ],\n        \"Test\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\"\n        ],\n        \"VmSafe\": [\n            \"deriveKey(string,uint32)\",\n            \"deriveKey(string,string,uint32)\",\n            \"deriveKey(string,uint32,string)\",\n            \"deriveKey(string,string,uint32,string)\",\n            \"publicKeyP256(uint256)\",\n            \"signCompact(uint256,bytes32)\",\n            \"signCompact(bytes32)\",\n            \"signCompact(address,bytes32)\",\n            \"signP256(uint256,bytes32)\",\n            \"sign(uint256,bytes32)\",\n            \"sign(bytes32)\",\n            \"sign(address,bytes32)\",\n            \"envAddress(string)\",\n            \"envAddress(string,string)\",\n            \"envBool(string)\",\n            \"envBool(string,string)\",\n            \"envBytes32(string)\",\n            \"envBytes32(string,string)\",\n            \"envBytes(string)\",\n            \"envBytes(string,string)\",\n            \"envExists(string)\",\n            \"envInt(string)\",\n            \"envInt(string,string)\",\n            \"envOr(string,bool)\",\n            \"envOr(string,uint256)\",\n            \"envOr(string,string,address[])\",\n            \"envOr(string,string,bytes32[])\",\n            \"envOr(string,string,string[])\",\n            \"envOr(string,string,bytes[])\",\n            \"envOr(string,int256)\",\n            \"envOr(string,address)\",\n            \"envOr(string,bytes32)\",\n            \"envOr(string,string)\",\n            \"envOr(string,bytes)\",\n            \"envOr(string,string,bool[])\",\n            \"envOr(string,string,uint256[])\",\n            \"envOr(string,string,int256[])\",\n            \"envString(string)\",\n            \"envString(string,string)\",\n            \"envUint(string)\",\n            \"envUint(string,string)\",\n            \"isContext(uint8)\",\n            \"addr(uint256)\",\n            \"getBlobBaseFee()\",\n            \"getBlockNumber()\",\n            \"getBlockTimestamp()\",\n            \"getNonce(address)\",\n            \"getStateDiff()\",\n            \"getStateDiffJson()\",\n            \"lastCallGas()\",\n            \"load(address,bytes32)\",\n            \"exists(string)\",\n            \"fsMetadata(string)\",\n            \"getArtifactPathByCode(bytes)\",\n            \"getArtifactPathByDeployedCode(bytes)\",\n            \"getBroadcast(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64)\",\n            \"getCode(string)\",\n            \"getDeployedCode(string)\",\n            \"getDeployment(string)\",\n            \"getDeployment(string,uint64)\",\n            \"getDeployments(string,uint64)\",\n            \"isDir(string)\",\n            \"isFile(string)\",\n            \"projectRoot()\",\n            \"readDir(string)\",\n            \"readDir(string,uint64)\",\n            \"readDir(string,uint64,bool)\",\n            \"readFile(string)\",\n            \"readFileBinary(string)\",\n            \"readLine(string)\",\n            \"readLink(string)\",\n            \"unixTime()\",\n            \"keyExistsJson(string,string)\",\n            \"parseJsonAddress(string,string)\",\n            \"parseJsonAddressArray(string,string)\",\n            \"parseJsonBool(string,string)\",\n            \"parseJsonBoolArray(string,string)\",\n            \"parseJsonBytes(string,string)\",\n            \"parseJsonBytes32(string,string)\",\n            \"parseJsonBytes32Array(string,string)\",\n            \"parseJsonBytesArray(string,string)\",\n            \"parseJsonInt(string,string)\",\n            \"parseJsonIntArray(string,string)\",\n            \"parseJsonKeys(string,string)\",\n            \"parseJsonString(string,string)\",\n            \"parseJsonStringArray(string,string)\",\n            \"parseJsonTypeArray(string,string,string)\",\n            \"parseJsonType(string,string)\",\n            \"parseJsonType(string,string,string)\",\n            \"parseJsonUint(string,string)\",\n            \"parseJsonUintArray(string,string)\",\n            \"parseJson(string)\",\n            \"parseJson(string,string)\",\n            \"serializeJsonType(string,bytes)\",\n            \"keyExists(string,string)\",\n            \"indexOf(string,string)\",\n            \"parseAddress(string)\",\n            \"parseBool(string)\",\n            \"parseBytes(string)\",\n            \"parseBytes32(string)\",\n            \"parseInt(string)\",\n            \"parseUint(string)\",\n            \"replace(string,string,string)\",\n            \"split(string,string)\",\n            \"toLowercase(string)\",\n            \"toString(address)\",\n            \"toString(bytes)\",\n            \"toString(bytes32)\",\n            \"toString(bool)\",\n            \"toString(uint256)\",\n            \"toString(int256)\",\n            \"toUppercase(string)\",\n            \"trim(string)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(int256,int256,uint256)\",\n            \"assertApproxEqAbs(int256,int256,uint256,string)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqRel(uint256,uint256,uint256)\",\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\",\n            \"assertApproxEqRel(int256,int256,uint256)\",\n            \"assertApproxEqRel(int256,int256,uint256,string)\",\n            \"assertEqDecimal(uint256,uint256,uint256)\",\n            \"assertEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertEqDecimal(int256,int256,uint256)\",\n            \"assertEqDecimal(int256,int256,uint256,string)\",\n            \"assertEq(bool,bool)\",\n            \"assertEq(bool,bool,string)\",\n            \"assertEq(string,string)\",\n            \"assertEq(string,string,string)\",\n            \"assertEq(bytes,bytes)\",\n            \"assertEq(bytes,bytes,string)\",\n            \"assertEq(bool[],bool[])\",\n            \"assertEq(bool[],bool[],string)\",\n            \"assertEq(uint256[],uint256[])\",\n            \"assertEq(uint256[],uint256[],string)\",\n            \"assertEq(int256[],int256[])\",\n            \"assertEq(int256[],int256[],string)\",\n            \"assertEq(uint256,uint256)\",\n            \"assertEq(address[],address[])\",\n            \"assertEq(address[],address[],string)\",\n            \"assertEq(bytes32[],bytes32[])\",\n            \"assertEq(bytes32[],bytes32[],string)\",\n            \"assertEq(string[],string[])\",\n            \"assertEq(string[],string[],string)\",\n            \"assertEq(bytes[],bytes[])\",\n            \"assertEq(bytes[],bytes[],string)\",\n            \"assertEq(uint256,uint256,string)\",\n            \"assertEq(int256,int256)\",\n            \"assertEq(int256,int256,string)\",\n            \"assertEq(address,address)\",\n            \"assertEq(address,address,string)\",\n            \"assertEq(bytes32,bytes32)\",\n            \"assertEq(bytes32,bytes32,string)\",\n            \"assertFalse(bool)\",\n            \"assertFalse(bool,string)\",\n            \"assertGeDecimal(uint256,uint256,uint256)\",\n            \"assertGeDecimal(uint256,uint256,uint256,string)\",\n            \"assertGeDecimal(int256,int256,uint256)\",\n            \"assertGeDecimal(int256,int256,uint256,string)\",\n            \"assertGe(uint256,uint256)\",\n            \"assertGe(uint256,uint256,string)\",\n            \"assertGe(int256,int256)\",\n            \"assertGe(int256,int256,string)\",\n            \"assertGtDecimal(uint256,uint256,uint256)\",\n            \"assertGtDecimal(uint256,uint256,uint256,string)\",\n            \"assertGtDecimal(int256,int256,uint256)\",\n            \"assertGtDecimal(int256,int256,uint256,string)\",\n            \"assertGt(uint256,uint256)\",\n            \"assertGt(uint256,uint256,string)\",\n            \"assertGt(int256,int256)\",\n            \"assertGt(int256,int256,string)\",\n            \"assertLeDecimal(uint256,uint256,uint256)\",\n            \"assertLeDecimal(uint256,uint256,uint256,string)\",\n            \"assertLeDecimal(int256,int256,uint256)\",\n            \"assertLeDecimal(int256,int256,uint256,string)\",\n            \"assertLe(uint256,uint256)\",\n            \"assertLe(uint256,uint256,string)\",\n            \"assertLe(int256,int256)\",\n            \"assertLe(int256,int256,string)\",\n            \"assertLtDecimal(uint256,uint256,uint256)\",\n            \"assertLtDecimal(uint256,uint256,uint256,string)\",\n            \"assertLtDecimal(int256,int256,uint256)\",\n            \"assertLtDecimal(int256,int256,uint256,string)\",\n            \"assertLt(uint256,uint256)\",\n            \"assertLt(uint256,uint256,string)\",\n            \"assertLt(int256,int256)\",\n            \"assertLt(int256,int256,string)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertNotEqDecimal(int256,int256,uint256)\",\n            \"assertNotEqDecimal(int256,int256,uint256,string)\",\n            \"assertNotEq(bool,bool)\",\n            \"assertNotEq(bool,bool,string)\",\n            \"assertNotEq(string,string)\",\n            \"assertNotEq(string,string,string)\",\n            \"assertNotEq(bytes,bytes)\",\n            \"assertNotEq(bytes,bytes,string)\",\n            \"assertNotEq(bool[],bool[])\",\n            \"assertNotEq(bool[],bool[],string)\",\n            \"assertNotEq(uint256[],uint256[])\",\n            \"assertNotEq(uint256[],uint256[],string)\",\n            \"assertNotEq(int256[],int256[])\",\n            \"assertNotEq(int256[],int256[],string)\",\n            \"assertNotEq(uint256,uint256)\",\n            \"assertNotEq(address[],address[])\",\n            \"assertNotEq(address[],address[],string)\",\n            \"assertNotEq(bytes32[],bytes32[])\",\n            \"assertNotEq(bytes32[],bytes32[],string)\",\n            \"assertNotEq(string[],string[])\",\n            \"assertNotEq(string[],string[],string)\",\n            \"assertNotEq(bytes[],bytes[])\",\n            \"assertNotEq(bytes[],bytes[],string)\",\n            \"assertNotEq(uint256,uint256,string)\",\n            \"assertNotEq(int256,int256)\",\n            \"assertNotEq(int256,int256,string)\",\n            \"assertNotEq(address,address)\",\n            \"assertNotEq(address,address,string)\",\n            \"assertNotEq(bytes32,bytes32)\",\n            \"assertNotEq(bytes32,bytes32,string)\",\n            \"assertTrue(bool)\",\n            \"assertTrue(bool,string)\",\n            \"assume(bool)\",\n            \"assumeNoRevert()\",\n            \"assumeNoRevert((address,bool,bytes))\",\n            \"assumeNoRevert((address,bool,bytes)[])\",\n            \"breakpoint(string)\",\n            \"breakpoint(string,bool)\",\n            \"foundryVersionAtLeast(string)\",\n            \"foundryVersionCmp(string)\",\n            \"getChain(string)\",\n            \"getChain(uint256)\",\n            \"getFoundryVersion()\",\n            \"rpcUrl(string)\",\n            \"rpcUrlStructs()\",\n            \"rpcUrls()\",\n            \"keyExistsToml(string,string)\",\n            \"parseTomlAddress(string,string)\",\n            \"parseTomlAddressArray(string,string)\",\n            \"parseTomlBool(string,string)\",\n            \"parseTomlBoolArray(string,string)\",\n            \"parseTomlBytes(string,string)\",\n            \"parseTomlBytes32(string,string)\",\n            \"parseTomlBytes32Array(string,string)\",\n            \"parseTomlBytesArray(string,string)\",\n            \"parseTomlInt(string,string)\",\n            \"parseTomlIntArray(string,string)\",\n            \"parseTomlKeys(string,string)\",\n            \"parseTomlString(string,string)\",\n            \"parseTomlStringArray(string,string)\",\n            \"parseTomlTypeArray(string,string,string)\",\n            \"parseTomlType(string,string)\",\n            \"parseTomlType(string,string,string)\",\n            \"parseTomlUint(string,string)\",\n            \"parseTomlUintArray(string,string)\",\n            \"parseToml(string)\",\n            \"parseToml(string,string)\",\n            \"computeCreate2Address(bytes32,bytes32,address)\",\n            \"computeCreate2Address(bytes32,bytes32)\",\n            \"computeCreateAddress(address,uint256)\",\n            \"ensNamehash(string)\",\n            \"getLabel(address)\",\n            \"pauseTracing()\",\n            \"randomBool()\",\n            \"randomBytes(uint256)\",\n            \"randomBytes4()\",\n            \"randomBytes8()\",\n            \"randomInt()\",\n            \"randomInt(uint256)\",\n            \"randomUint(uint256)\",\n            \"resumeTracing()\",\n            \"toBase64URL(bytes)\",\n            \"toBase64URL(string)\",\n            \"toBase64(bytes)\",\n            \"toBase64(string)\"\n        ],\n        \"Vm\": [\n            \"deriveKey(string,uint32)\",\n            \"deriveKey(string,string,uint32)\",\n            \"deriveKey(string,uint32,string)\",\n            \"deriveKey(string,string,uint32,string)\",\n            \"publicKeyP256(uint256)\",\n            \"signCompact(uint256,bytes32)\",\n            \"signCompact(bytes32)\",\n            \"signCompact(address,bytes32)\",\n            \"signP256(uint256,bytes32)\",\n            \"sign(uint256,bytes32)\",\n            \"sign(bytes32)\",\n            \"sign(address,bytes32)\",\n            \"envAddress(string)\",\n            \"envAddress(string,string)\",\n            \"envBool(string)\",\n            \"envBool(string,string)\",\n            \"envBytes32(string)\",\n            \"envBytes32(string,string)\",\n            \"envBytes(string)\",\n            \"envBytes(string,string)\",\n            \"envExists(string)\",\n            \"envInt(string)\",\n            \"envInt(string,string)\",\n            \"envOr(string,bool)\",\n            \"envOr(string,uint256)\",\n            \"envOr(string,string,address[])\",\n            \"envOr(string,string,bytes32[])\",\n            \"envOr(string,string,string[])\",\n            \"envOr(string,string,bytes[])\",\n            \"envOr(string,int256)\",\n            \"envOr(string,address)\",\n            \"envOr(string,bytes32)\",\n            \"envOr(string,string)\",\n            \"envOr(string,bytes)\",\n            \"envOr(string,string,bool[])\",\n            \"envOr(string,string,uint256[])\",\n            \"envOr(string,string,int256[])\",\n            \"envString(string)\",\n            \"envString(string,string)\",\n            \"envUint(string)\",\n            \"envUint(string,string)\",\n            \"isContext(uint8)\",\n            \"addr(uint256)\",\n            \"getBlobBaseFee()\",\n            \"getBlockNumber()\",\n            \"getBlockTimestamp()\",\n            \"getNonce(address)\",\n            \"getStateDiff()\",\n            \"getStateDiffJson()\",\n            \"lastCallGas()\",\n            \"load(address,bytes32)\",\n            \"exists(string)\",\n            \"fsMetadata(string)\",\n            \"getArtifactPathByCode(bytes)\",\n            \"getArtifactPathByDeployedCode(bytes)\",\n            \"getBroadcast(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64)\",\n            \"getCode(string)\",\n            \"getDeployedCode(string)\",\n            \"getDeployment(string)\",\n            \"getDeployment(string,uint64)\",\n            \"getDeployments(string,uint64)\",\n            \"isDir(string)\",\n            \"isFile(string)\",\n            \"projectRoot()\",\n            \"readDir(string)\",\n            \"readDir(string,uint64)\",\n            \"readDir(string,uint64,bool)\",\n            \"readFile(string)\",\n            \"readFileBinary(string)\",\n            \"readLine(string)\",\n            \"readLink(string)\",\n            \"unixTime()\",\n            \"keyExistsJson(string,string)\",\n            \"parseJsonAddress(string,string)\",\n            \"parseJsonAddressArray(string,string)\",\n            \"parseJsonBool(string,string)\",\n            \"parseJsonBoolArray(string,string)\",\n            \"parseJsonBytes(string,string)\",\n            \"parseJsonBytes32(string,string)\",\n            \"parseJsonBytes32Array(string,string)\",\n            \"parseJsonBytesArray(string,string)\",\n            \"parseJsonInt(string,string)\",\n            \"parseJsonIntArray(string,string)\",\n            \"parseJsonKeys(string,string)\",\n            \"parseJsonString(string,string)\",\n            \"parseJsonStringArray(string,string)\",\n            \"parseJsonTypeArray(string,string,string)\",\n            \"parseJsonType(string,string)\",\n            \"parseJsonType(string,string,string)\",\n            \"parseJsonUint(string,string)\",\n            \"parseJsonUintArray(string,string)\",\n            \"parseJson(string)\",\n            \"parseJson(string,string)\",\n            \"serializeJsonType(string,bytes)\",\n            \"keyExists(string,string)\",\n            \"indexOf(string,string)\",\n            \"parseAddress(string)\",\n            \"parseBool(string)\",\n            \"parseBytes(string)\",\n            \"parseBytes32(string)\",\n            \"parseInt(string)\",\n            \"parseUint(string)\",\n            \"replace(string,string,string)\",\n            \"split(string,string)\",\n            \"toLowercase(string)\",\n            \"toString(address)\",\n            \"toString(bytes)\",\n            \"toString(bytes32)\",\n            \"toString(bool)\",\n            \"toString(uint256)\",\n            \"toString(int256)\",\n            \"toUppercase(string)\",\n            \"trim(string)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(int256,int256,uint256)\",\n            \"assertApproxEqAbs(int256,int256,uint256,string)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqRel(uint256,uint256,uint256)\",\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\",\n            \"assertApproxEqRel(int256,int256,uint256)\",\n            \"assertApproxEqRel(int256,int256,uint256,string)\",\n            \"assertEqDecimal(uint256,uint256,uint256)\",\n            \"assertEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertEqDecimal(int256,int256,uint256)\",\n            \"assertEqDecimal(int256,int256,uint256,string)\",\n            \"assertEq(bool,bool)\",\n            \"assertEq(bool,bool,string)\",\n            \"assertEq(string,string)\",\n            \"assertEq(string,string,string)\",\n            \"assertEq(bytes,bytes)\",\n            \"assertEq(bytes,bytes,string)\",\n            \"assertEq(bool[],bool[])\",\n            \"assertEq(bool[],bool[],string)\",\n            \"assertEq(uint256[],uint256[])\",\n            \"assertEq(uint256[],uint256[],string)\",\n            \"assertEq(int256[],int256[])\",\n            \"assertEq(int256[],int256[],string)\",\n            \"assertEq(uint256,uint256)\",\n            \"assertEq(address[],address[])\",\n            \"assertEq(address[],address[],string)\",\n            \"assertEq(bytes32[],bytes32[])\",\n            \"assertEq(bytes32[],bytes32[],string)\",\n            \"assertEq(string[],string[])\",\n            \"assertEq(string[],string[],string)\",\n            \"assertEq(bytes[],bytes[])\",\n            \"assertEq(bytes[],bytes[],string)\",\n            \"assertEq(uint256,uint256,string)\",\n            \"assertEq(int256,int256)\",\n            \"assertEq(int256,int256,string)\",\n            \"assertEq(address,address)\",\n            \"assertEq(address,address,string)\",\n            \"assertEq(bytes32,bytes32)\",\n            \"assertEq(bytes32,bytes32,string)\",\n            \"assertFalse(bool)\",\n            \"assertFalse(bool,string)\",\n            \"assertGeDecimal(uint256,uint256,uint256)\",\n            \"assertGeDecimal(uint256,uint256,uint256,string)\",\n            \"assertGeDecimal(int256,int256,uint256)\",\n            \"assertGeDecimal(int256,int256,uint256,string)\",\n            \"assertGe(uint256,uint256)\",\n            \"assertGe(uint256,uint256,string)\",\n            \"assertGe(int256,int256)\",\n            \"assertGe(int256,int256,string)\",\n            \"assertGtDecimal(uint256,uint256,uint256)\",\n            \"assertGtDecimal(uint256,uint256,uint256,string)\",\n            \"assertGtDecimal(int256,int256,uint256)\",\n            \"assertGtDecimal(int256,int256,uint256,string)\",\n            \"assertGt(uint256,uint256)\",\n            \"assertGt(uint256,uint256,string)\",\n            \"assertGt(int256,int256)\",\n            \"assertGt(int256,int256,string)\",\n            \"assertLeDecimal(uint256,uint256,uint256)\",\n            \"assertLeDecimal(uint256,uint256,uint256,string)\",\n            \"assertLeDecimal(int256,int256,uint256)\",\n            \"assertLeDecimal(int256,int256,uint256,string)\",\n            \"assertLe(uint256,uint256)\",\n            \"assertLe(uint256,uint256,string)\",\n            \"assertLe(int256,int256)\",\n            \"assertLe(int256,int256,string)\",\n            \"assertLtDecimal(uint256,uint256,uint256)\",\n            \"assertLtDecimal(uint256,uint256,uint256,string)\",\n            \"assertLtDecimal(int256,int256,uint256)\",\n            \"assertLtDecimal(int256,int256,uint256,string)\",\n            \"assertLt(uint256,uint256)\",\n            \"assertLt(uint256,uint256,string)\",\n            \"assertLt(int256,int256)\",\n            \"assertLt(int256,int256,string)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertNotEqDecimal(int256,int256,uint256)\",\n            \"assertNotEqDecimal(int256,int256,uint256,string)\",\n            \"assertNotEq(bool,bool)\",\n            \"assertNotEq(bool,bool,string)\",\n            \"assertNotEq(string,string)\",\n            \"assertNotEq(string,string,string)\",\n            \"assertNotEq(bytes,bytes)\",\n            \"assertNotEq(bytes,bytes,string)\",\n            \"assertNotEq(bool[],bool[])\",\n            \"assertNotEq(bool[],bool[],string)\",\n            \"assertNotEq(uint256[],uint256[])\",\n            \"assertNotEq(uint256[],uint256[],string)\",\n            \"assertNotEq(int256[],int256[])\",\n            \"assertNotEq(int256[],int256[],string)\",\n            \"assertNotEq(uint256,uint256)\",\n            \"assertNotEq(address[],address[])\",\n            \"assertNotEq(address[],address[],string)\",\n            \"assertNotEq(bytes32[],bytes32[])\",\n            \"assertNotEq(bytes32[],bytes32[],string)\",\n            \"assertNotEq(string[],string[])\",\n            \"assertNotEq(string[],string[],string)\",\n            \"assertNotEq(bytes[],bytes[])\",\n            \"assertNotEq(bytes[],bytes[],string)\",\n            \"assertNotEq(uint256,uint256,string)\",\n            \"assertNotEq(int256,int256)\",\n            \"assertNotEq(int256,int256,string)\",\n            \"assertNotEq(address,address)\",\n            \"assertNotEq(address,address,string)\",\n            \"assertNotEq(bytes32,bytes32)\",\n            \"assertNotEq(bytes32,bytes32,string)\",\n            \"assertTrue(bool)\",\n            \"assertTrue(bool,string)\",\n            \"assume(bool)\",\n            \"assumeNoRevert()\",\n            \"assumeNoRevert((address,bool,bytes))\",\n            \"assumeNoRevert((address,bool,bytes)[])\",\n            \"breakpoint(string)\",\n            \"breakpoint(string,bool)\",\n            \"foundryVersionAtLeast(string)\",\n            \"foundryVersionCmp(string)\",\n            \"getChain(string)\",\n            \"getChain(uint256)\",\n            \"getFoundryVersion()\",\n            \"rpcUrl(string)\",\n            \"rpcUrlStructs()\",\n            \"rpcUrls()\",\n            \"keyExistsToml(string,string)\",\n            \"parseTomlAddress(string,string)\",\n            \"parseTomlAddressArray(string,string)\",\n            \"parseTomlBool(string,string)\",\n            \"parseTomlBoolArray(string,string)\",\n            \"parseTomlBytes(string,string)\",\n            \"parseTomlBytes32(string,string)\",\n            \"parseTomlBytes32Array(string,string)\",\n            \"parseTomlBytesArray(string,string)\",\n            \"parseTomlInt(string,string)\",\n            \"parseTomlIntArray(string,string)\",\n            \"parseTomlKeys(string,string)\",\n            \"parseTomlString(string,string)\",\n            \"parseTomlStringArray(string,string)\",\n            \"parseTomlTypeArray(string,string,string)\",\n            \"parseTomlType(string,string)\",\n            \"parseTomlType(string,string,string)\",\n            \"parseTomlUint(string,string)\",\n            \"parseTomlUintArray(string,string)\",\n            \"parseToml(string)\",\n            \"parseToml(string,string)\",\n            \"computeCreate2Address(bytes32,bytes32,address)\",\n            \"computeCreate2Address(bytes32,bytes32)\",\n            \"computeCreateAddress(address,uint256)\",\n            \"ensNamehash(string)\",\n            \"getLabel(address)\",\n            \"pauseTracing()\",\n            \"randomBool()\",\n            \"randomBytes(uint256)\",\n            \"randomBytes4()\",\n            \"randomBytes8()\",\n            \"randomInt()\",\n            \"randomInt(uint256)\",\n            \"randomUint(uint256)\",\n            \"resumeTracing()\",\n            \"toBase64URL(bytes)\",\n            \"toBase64URL(string)\",\n            \"toBase64(bytes)\",\n            \"toBase64(string)\",\n            \"activeFork()\",\n            \"getBlobhashes()\",\n            \"isPersistent(address)\"\n        ],\n        \"IMulticall3\": [\n            \"getBasefee()\",\n            \"getBlockHash(uint256)\",\n            \"getBlockNumber()\",\n            \"getChainId()\",\n            \"getCurrentBlockCoinbase()\",\n            \"getCurrentBlockDifficulty()\",\n            \"getCurrentBlockGasLimit()\",\n            \"getCurrentBlockTimestamp()\",\n            \"getEthBalance(address)\",\n            \"getLastBlockHash()\"\n        ],\n        \"CollateralTracker\": [\n            \"getPoolData()\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"asset()\",\n            \"totalAssets()\",\n            \"convertToShares(uint256)\",\n            \"convertToAssets(uint256)\",\n            \"maxDeposit(address)\",\n            \"previewDeposit(uint256)\",\n            \"maxMint(address)\",\n            \"previewMint(uint256)\",\n            \"maxWithdraw(address)\",\n            \"previewWithdraw(uint256)\",\n            \"maxRedeem(address)\",\n            \"previewRedeem(uint256)\",\n            \"exerciseCost(int24,int24,uint256,uint128,int256)\",\n            \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n            \"exercise(address,int128,int128,int128,int128)\",\n            \"getAccountMarginDetails(address,int24,uint256[][],uint128,uint128)\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"PanopticPool\": [\n            \"collateralToken0()\",\n            \"collateralToken1()\",\n            \"oracleContract()\",\n            \"poolKey()\",\n            \"onERC1155Received(address,address,uint256,uint256,bytes)\",\n            \"assertMinCollateralValues(uint256,uint256)\",\n            \"validateCollateralWithdrawable(address,uint256[],bool)\",\n            \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n            \"forceExercise(address,uint256,uint256[],uint256[],uint256)\",\n            \"isSafeMode()\",\n            \"getOracleTicks()\",\n            \"numberOfLegs(address)\",\n            \"positionData(address,uint256)\"\n        ],\n        \"SemiFungiblePositionManager\": [\n            \"balanceOfBatch(address[],uint256[])\",\n            \"supportsInterface(bytes4)\",\n            \"expandEnforcedTickRange((address,Currency,uint24,int24,address))\",\n            \"unlockCallback(bytes)\",\n            \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n            \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\",\n            \"getAccountLiquidity(bytes32,address,uint256,int24,int24)\",\n            \"getAccountPremium(bytes32,address,uint256,int24,int24,int24,uint256)\",\n            \"getUniswapV4PoolKeyFromId(uint64)\",\n            \"getEnforcedTickLimits(bytes32)\",\n            \"getPoolId(bytes32)\",\n            \"getPoolId((address,Currency,uint24,int24,address))\",\n            \"balanceOf(address,uint256)\",\n            \"isApprovedForAll(address,address)\"\n        ],\n        \"IV3CompatibleOracle\": [\n            \"slot0()\",\n            \"observations(uint256)\",\n            \"observe(uint32[])\"\n        ],\n        \"InteractionHelper\": [\n            \"computeName(address,address,bool,uint24,string)\",\n            \"computeSymbol(address,string)\",\n            \"computeDecimals(address)\"\n        ],\n        \"PanopticMath\": [\n            \"numberOfLeadingHexZeros(address)\",\n            \"safeERC20Symbol(address)\",\n            \"getOracleTicks(address,uint256)\",\n            \"computeInternalMedian(uint256,uint256,uint256,uint256,address)\",\n            \"twapFilter(address,uint32)\",\n            \"getLiquidationBonus(uint256,uint256,uint160,int256,uint256)\",\n            \"haircutPremia(address,uint256[],int256[][],int256,address,address,uint160,mapping(bytes32 => LeftRightUnsigned))\",\n            \"getRefundAmounts(address,int256,int24,address,address)\"\n        ],\n        \"ERC1155\": [\n            \"balanceOfBatch(address[],uint256[])\",\n            \"supportsInterface(bytes4)\",\n            \"balanceOf(address,uint256)\",\n            \"isApprovedForAll(address,address)\"\n        ],\n        \"ERC20Minimal\": [\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"IERC20Partial\": [\n            \"balanceOf(address)\",\n            \"totalSupply()\"\n        ],\n        \"PositionBalanceLibrary\": [\n            \"unpackAll(uint256)\"\n        ],\n        \"Ownable\": [\n            \"owner()\"\n        ],\n        \"IERC20\": [\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"IERC1155Receiver\": [\n            \"supportsInterface(bytes4)\"\n        ],\n        \"ERC1155Holder\": [\n            \"supportsInterface(bytes4)\",\n            \"onERC1155Received(address,address,uint256,uint256,bytes)\",\n            \"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"\n        ],\n        \"IERC20Metadata\": [\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\"\n        ],\n        \"ERC165\": [\n            \"supportsInterface(bytes4)\"\n        ],\n        \"IERC165\": [\n            \"supportsInterface(bytes4)\"\n        ],\n        \"IExtsload\": [\n            \"extsload(bytes32)\",\n            \"extsload(bytes32,uint256)\",\n            \"extsload(bytes32[])\"\n        ],\n        \"IExttload\": [\n            \"exttload(bytes32)\",\n            \"exttload(bytes32[])\"\n        ],\n        \"IPoolManager\": [\n            \"exttload(bytes32)\",\n            \"exttload(bytes32[])\",\n            \"extsload(bytes32)\",\n            \"extsload(bytes32,uint256)\",\n            \"extsload(bytes32[])\",\n            \"balanceOf(address,uint256)\",\n            \"allowance(address,address,uint256)\",\n            \"isOperator(address,address)\",\n            \"protocolFeesAccrued(address)\",\n            \"protocolFeeController()\"\n        ],\n        \"IProtocolFees\": [\n            \"protocolFeesAccrued(address)\",\n            \"protocolFeeController()\"\n        ],\n        \"IERC20Minimal\": [\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"IERC6909Claims\": [\n            \"balanceOf(address,uint256)\",\n            \"allowance(address,address,uint256)\",\n            \"isOperator(address,address)\"\n        ],\n        \"StateLibrary\": [\n            \"POOLS_SLOT()\",\n            \"FEE_GROWTH_GLOBAL0_OFFSET()\",\n            \"LIQUIDITY_OFFSET()\",\n            \"TICKS_OFFSET()\",\n            \"TICK_BITMAP_OFFSET()\",\n            \"POSITIONS_OFFSET()\"\n        ],\n        \"BalanceDeltaLibrary\": [\n            \"ZERO_DELTA()\"\n        ],\n        \"BeforeSwapDeltaLibrary\": [\n            \"ZERO_DELTA()\"\n        ],\n        \"CurrencyLibrary\": [\n            \"ADDRESS_ZERO()\"\n        ],\n        \"ERC20S\": [\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"ERC20\": [\n            \"DOMAIN_SEPARATOR()\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"nonces(address)\"\n        ],\n        \"MockERC20\": [\n            \"DOMAIN_SEPARATOR()\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"nonces(address)\"\n        ],\n        \"HypoVault\": [\n            \"owner()\",\n            \"getDepositEpochState(uint256)\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"underlyingToken()\",\n            \"performanceFeeBps()\",\n            \"feeWallet()\",\n            \"manager()\",\n            \"accountant()\",\n            \"withdrawalEpoch()\",\n            \"depositEpoch()\",\n            \"reservedWithdrawalAssets()\",\n            \"depositEpochState(uint256)\",\n            \"withdrawalEpochState(uint256)\",\n            \"queuedDeposit(address,uint256)\",\n            \"queuedWithdrawal(address,uint256)\",\n            \"userBasis(address)\"\n        ],\n        \"Token\": [\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"PanopticVaultAccountant\": [\n            \"owner()\",\n            \"computeNAV(address,address,bytes)\",\n            \"vaultPools(address)\",\n            \"vaultLocked(address)\"\n        ],\n        \"IVaultAccountant\": [\n            \"computeNAV(address,address,bytes)\"\n        ],\n        \"VaultAccountantMock\": [\n            \"computeNAV(address,address,bytes)\",\n            \"nav()\",\n            \"expectedVault()\",\n            \"expectedManagerInput()\"\n        ],\n        \"HypoVaultTest\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"test_vaultParameters()\",\n            \"IS_TEST()\",\n            \"accountant()\",\n            \"vault()\",\n            \"token()\"\n        ],\n        \"MockERC20Partial\": [\n            \"balanceOf(address)\",\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"totalSupply()\",\n            \"balances(address)\",\n            \"name()\",\n            \"symbol()\",\n            \"_totalSupply()\"\n        ],\n        \"MockV3CompatibleOracle\": [\n            \"observe(uint32[])\",\n            \"slot0()\",\n            \"observations(uint256)\",\n            \"increaseObservationCardinalityNext(uint16)\",\n            \"tickCumulatives(uint256)\",\n            \"sqrtPriceX96s(uint256)\",\n            \"windowSize()\",\n            \"currentTick()\",\n            \"currentSqrtPriceX96()\",\n            \"currentObservationCardinality()\"\n        ],\n        \"MockCollateralToken\": [\n            \"balanceOf(address)\",\n            \"previewRedeem(uint256)\",\n            \"balances(address)\",\n            \"previewRedeemReturn()\"\n        ],\n        \"MockPanopticPool\": [\n            \"numberOfLegs(address)\",\n            \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n            \"hasPosition(address,uint256)\",\n            \"collateralToken0()\",\n            \"collateralToken1()\",\n            \"numberOfLegsMapping(address)\",\n            \"mockShortPremium()\",\n            \"mockLongPremium()\",\n            \"mockPositionBalanceArray(uint256,uint256)\",\n            \"positionExists(address,uint256)\",\n            \"totalPositions(address)\"\n        ],\n        \"PanopticVaultAccountantTest\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\",\n            \"accountant()\",\n            \"token0()\",\n            \"token1()\",\n            \"underlyingToken()\",\n            \"poolOracle()\",\n            \"oracle0()\",\n            \"oracle1()\",\n            \"mockPool()\",\n            \"vault()\",\n            \"owner()\",\n            \"nonOwner()\"\n        ],\n        \"PoC\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"test_submissionValidity()\",\n            \"IS_TEST()\",\n            \"mockAccountant()\",\n            \"vault()\",\n            \"token()\",\n            \"accountant()\",\n            \"token0()\",\n            \"token1()\",\n            \"underlyingToken()\",\n            \"poolOracle()\",\n            \"oracle0()\",\n            \"oracle1()\",\n            \"mockPool()\"\n        ],\n        \"CryticToFoundry\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"test_crytic()\",\n            \"IS_TEST()\"\n        ]\n    },\n    \"constants_used\": {\n        \"FoundryAsserts\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"StdAssertions\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"Test\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"CollateralTracker\": {\n            \"multicall(bytes[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"initialize()\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getPoolData()\": [\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"name()\": [\n                [\n                    {\n                        \"value\": \"100000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"81\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"DYNAMIC\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"bps\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"???\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0123456789abcdef\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"41\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000000000000000000000000000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \".\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8388608\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"/\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"POPT-V1.1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"248\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \" LP on \",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \" \",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"232\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"ETH\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"symbol()\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"ETH\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"21\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"???\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"po\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"decimals()\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"21\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"unlockCallback(bytes)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"31\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"68\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"21\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16156842317565293874272834530371880720966471053262404558597773956279093428224\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"asset()\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"21\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"convertToShares(uint256)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"convertToAssets(uint256)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"maxDeposit(address)\": [\n                [\n                    {\n                        \"value\": \"20282409603651670423947251286015\",\n                        \"type\": \"uint104\"\n                    }\n                ]\n            ],\n            \"previewDeposit(uint256)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"deposit(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20282409603651670423947251286015\",\n                        \"type\": \"uint104\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"maxMint(address)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20282409603651670423947251286015\",\n                        \"type\": \"uint104\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"mint(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20282409603651670423947251286015\",\n                        \"type\": \"uint104\"\n                    }\n                ]\n            ],\n            \"maxWithdraw(address)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"withdraw(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ]\n            ],\n            \"withdraw(uint256,address,address,uint256[],bool)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ]\n            ],\n            \"maxRedeem(address)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"previewRedeem(uint256)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"redeem(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ]\n            ],\n            \"exerciseCost(int24,int24,uint256,uint128,int256)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"delegate(address)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"452312848583266388373324160190187140051835877600158453279131187530910662655\",\n                        \"type\": \"uint248\"\n                    }\n                ]\n            ],\n            \"revoke(address)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"452312848583266388373324160190187140051835877600158453279131187530910662655\",\n                        \"type\": \"uint248\"\n                    }\n                ]\n            ],\n            \"settleLiquidation(address,address,int256)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"452312848583266388373324160190187140051835877600158453279131187530910662655\",\n                        \"type\": \"uint248\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ]\n            ],\n            \"refund(address,address,int256)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ]\n            ],\n            \"takeCommissionAddData(address,int128,int128,int128,bool)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"exercise(address,int128,int128,int128,int128)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getAccountMarginDetails(address,int24,uint256[][],uint128,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"PanopticPool\": {\n            \"multicall(bytes[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"collateralToken0()\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"collateralToken1()\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"oracleContract()\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"poolKey()\": [\n                [\n                    {\n                        \"value\": \"92\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"initialize()\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"101019601158318752825795111857292890362884813682995519223326834688\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"assertMinCollateralValues(uint256,uint256)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"validateCollateralWithdrawable(address,uint256[],bool)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211455\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"65536\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"192\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"953\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"908209\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"204\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"184\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"208\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"13333\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"72\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"248\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"7\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551616\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint8\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"232\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"104489539389896954898256425143051824204419088306739054719350603776\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907852929702298719625575994209400481361428480\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\": [\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211455\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"65536\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"208\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551616\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"232\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"104489539389896954898256425143051824204419088306739054719350603776\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907852929702298719625575994209400481361428480\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"pokeMedian()\": [\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"192\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"204\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"7\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint8\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211455\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"65536\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"192\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"953\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"908209\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"92\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4294967296\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"204\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"655360000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"184\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"208\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"655370000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"13333\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"72\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"248\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"7\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551616\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint8\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"232\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"104489539389896954898256425143051824204419088306739054719350603776\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8388607\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"38654705664\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907852929702298719625575994209400481361428480\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"burnOptions(uint256,uint256[],int24,int24,bool)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211455\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"65536\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"192\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"953\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"908209\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"92\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4294967296\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"204\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"184\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"208\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"72\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"248\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"7\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551616\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint8\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"232\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"104489539389896954898256425143051824204419088306739054719350603776\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8388607\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"38654705664\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907852929702298719625575994209400481361428480\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"burnOptions(uint256[],uint256[],int24,int24,bool)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211455\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"65536\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"192\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"953\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"908209\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"92\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4294967296\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"204\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"184\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"208\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"72\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"248\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"7\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551616\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint8\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"232\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"104489539389896954898256425143051824204419088306739054719350603776\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8388607\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"38654705664\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907852929702298719625575994209400481361428480\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"liquidate(uint256[],address,uint256[])\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"forceExercise(address,uint256,uint256[],uint256[],uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getOracleTicks()\": [\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"192\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"204\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"7\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint8\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"numberOfLegs(address)\": [\n                [\n                    {\n                        \"value\": \"248\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"positionData(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"232\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"65536\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"184\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"208\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"144\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"settleLongPremium(uint256[],address,uint256,bool)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551616\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int128\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"SemiFungiblePositionManager\": {\n            \"multicall(bytes[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"balanceOfBatch(address[],uint256[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"3652614694\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"initializeAMMPool((address,Currency,uint24,int24,address))\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"expandEnforcedTickRange((address,Currency,uint24,int24,address))\": [\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"unlockCallback(bytes)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\": [\n                [\n                    {\n                        \"value\": \"584308305087695797999\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"105312291668557560842337184396146720457997191364272433102967537664\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"104489539389896954898256425143051824204419088306739054719350603776\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"REENTRANCY\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039439137263839420088320\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\": [\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089235842234716350509459867227651350478027355392411868089889589683027968\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4063915617\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"584308305087695797999\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"104489539389896954898256425143051824204419088306739054719350603776\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"REENTRANCY\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getAccountPremium(bytes32,address,uint256,int24,int24,int24,uint256)\": [\n                [\n                    {\n                        \"value\": \"8388607\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getPoolId((address,Currency,uint24,int24,address))\": [\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"Multicall\": {\n            \"multicall(bytes[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"InteractionHelper\": {\n            \"computeName(address,address,bool,uint24,string)\": [\n                [\n                    {\n                        \"value\": \"100000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"DYNAMIC\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"bps\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"???\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0123456789abcdef\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000000000000000000000000000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \".\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8388608\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"/\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \" LP on \",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \" \",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"ETH\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"computeSymbol(address,string)\": [\n                [\n                    {\n                        \"value\": \"ETH\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"???\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"computeDecimals(address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"PanopticMath\": {\n            \"numberOfLeadingHexZeros(address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"safeERC20Symbol(address)\": [\n                [\n                    {\n                        \"value\": \"ETH\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"???\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"getOracleTicks(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"192\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"7\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"204\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint8\"\n                    }\n                ]\n            ],\n            \"computeInternalMedian(uint256,uint256,uint256,uint256,address)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"204\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"192\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"7\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint8\"\n                    }\n                ]\n            ],\n            \"twapFilter(address,uint32)\": [\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"19\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getLiquidationBonus(uint256,uint256,uint160,int256,uint256)\": [\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211456\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"haircutPremia(address,uint256[],int256[][],int256,address,address,uint160,mapping(bytes32 => LeftRightUnsigned))\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"ERC1155\": {\n            \"safeTransferFrom(address,address,uint256,uint256,bytes)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4063915617\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\": [\n                [\n                    {\n                        \"value\": \"3155786881\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"balanceOfBatch(address[],uint256[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"3652614694\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"ERC20Minimal\": {\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"PositionBalanceLibrary\": {\n            \"unpackAll(uint256)\": [\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"232\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"65536\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"184\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"208\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"144\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"Ownable\": {\n            \"renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: new owner is the zero address\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"ERC1155Holder\": {\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"1339874119\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"bytes4\"\n                    }\n                ]\n            ]\n        },\n        \"ERC165\": {\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"bytes4\"\n                    }\n                ]\n            ]\n        },\n        \"ERC20S\": {\n            \"mint(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"ERC20\": {\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": [\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_SIGNER\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"PERMIT_DEADLINE_EXPIRED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\\u0019\\u0001\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"DOMAIN_SEPARATOR()\": [\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"MockERC20\": {\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": [\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_SIGNER\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"PERMIT_DEADLINE_EXPIRED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\\u0019\\u0001\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"DOMAIN_SEPARATOR()\": [\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"constructor(string,string,uint8)\": [\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"mint(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"burn(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"HypoVault\": {\n            \"renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: new owner is the zero address\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"multicall(bytes[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"constructor(address,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"1000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setManager(address)\": [\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"setAccountant(address)\": [\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"setFeeWallet(address)\": [\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"requestDeposit(uint128)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"31\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"68\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16156842317565293874272834530371880720966471053262404558597773956279093428224\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"requestWithdrawal(uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"cancelDeposit(address)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"31\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"76450787359836037641860180984291677749980919077056822294353438043884394381312\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"68\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"cancelWithdrawal(address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"executeDeposit(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"executeWithdrawal(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"31\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"76450787359836037641860180984291677749980919077056822294353438043884394381312\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"68\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"manage(address,bytes,uint256)\": [\n                [\n                    {\n                        \"value\": \"Address: insufficient balance for call\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Address: low-level call with value failed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Address: call to non-contract\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"manage(address[],bytes[],uint256[])\": [\n                [\n                    {\n                        \"value\": \"Address: insufficient balance for call\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Address: low-level call with value failed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Address: call to non-contract\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"fulfillDeposits(uint256,bytes)\": [\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"fulfillWithdrawals(uint256,uint256,bytes)\": [\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"Token\": {\n            \"mint(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"PanopticVaultAccountant\": {\n            \"renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: new owner is the zero address\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"updatePoolsHash(address,bytes32)\": [\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"lockVault(address)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"computeNAV(address,address,bytes)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"VaultAccountantMock\": {\n            \"computeNAV(address,address,bytes)\": [\n                [\n                    {\n                        \"value\": \"Invalid vault\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid manager input\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"HypoVaultTest\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TEST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20015998341411\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1250999896338\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_vaultParameters()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_deposit_full_single_user_epoch0()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_deposit_full_single_user_later_epoch()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_deposit_full_multiple_users_same_epoch()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_deposit_partial_single_user()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_deposit_partial_multiple_users()\": [\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_deposit_multiple_partial_fulfillments()\": [\n                [\n                    {\n                        \"value\": \"250000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000001\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000001\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400000000000000000001\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000001\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_withdrawal_with_multiple_users()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_withdrawal_with_profit_performance_fee()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"74750000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"249999999999999999\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_withdrawal_with_loss_no_performance_fee()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_withdrawal_partial()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"700000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"54000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"80000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_cancel_unfulfilled_deposit()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_cancel_unfulfilled_withdrawal()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_cancel_withdrawal_restores_basis()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Bob's basis should be reduced proportionally\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Alice's basis should be reduced proportionally\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_onlyManager_functions()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3237776010\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_onlyOwner_functions()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_epoch_transitions_deposits()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_epoch_transitions_withdrawals()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_execute_from_wrong_epoch()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1971154448\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_zero_amount_deposit()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_withdrawal_not_fulfillable()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2607605371\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_total_supply_updates()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000001\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_complex_multi_epoch_scenario()\": [\n                [\n                    {\n                        \"value\": \"733332\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"799999\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"450000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1466665\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_mixed_partial_fulfillments_across_epochs()\": [\n                [\n                    {\n                        \"value\": \"250000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"450000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"800000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_sequential_deposit_withdrawal_cycles()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000000000001\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000001\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_reserved_withdrawal_assets_tracking()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_manager_input_validation()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"test_manager_data\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid manager input\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"wrong_data\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_multiple_cancellations()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_large_numbers_precision()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_basis_calculation_precision()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_partial_deposit_exact_numbers()\": [\n                [\n                    {\n                        \"value\": \"599400\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_partial_withdrawal_exact_numbers()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Alice should receive exactly the correct proportional amount for her fulfilled shares\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"298500000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_multiple_users_partial_deposit_exact_numbers()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1500\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"399201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"598801\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_partial_deposit_share_calculation()\": [\n                [\n                    {\n                        \"value\": \"599400\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_withdrawal_scenario_verification()\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Alice should receive assets for exactly 75e18 shares\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25e18 shares should remain unfulfilled\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_exact_withdrawal_calculation()\": [\n                [\n                    {\n                        \"value\": \"7500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Exactly 25 shares should remain unfulfilled\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Alice should receive exactly 75% of her withdrawal value\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Assets should be exactly proportional to fulfilled shares\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"MockV3CompatibleOracle\": {\n            \"constructor()\": [\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"observe(uint32[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"slot0()\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"observations(uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setTickCumulatives(int56[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setObservation(uint256,int56,uint160)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int56\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"MockPanopticPool\": {\n            \"setMockPositionBalanceArray(uint256[][])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"addPosition(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"removePosition(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ]\n        },\n        \"PanopticVaultAccountantTest\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30\",\n                        \"type\": \"uint32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Token1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"T1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"UND\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Token0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"T0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Underlying\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_updatePoolsHash_success()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"test hash\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_updatePoolsHash_onlyOwner()\": [\n                [\n                    {\n                        \"value\": \"test hash\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_updatePoolsHash_vaultLocked()\": [\n                [\n                    {\n                        \"value\": \"3849403694\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"original\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"new\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_lockVault_success()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_lockVault_onlyOwner()\": [\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_lockVault_permanent()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_invalidPools()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2502171363\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"wrong hash\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_staleOraclePrice_pool()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2827481816\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"151\",\n                        \"type\": \"int24\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_incorrectPositionList_zeroBalance()\": [\n                [\n                    {\n                        \"value\": \"281474976710656\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1156377690\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551616\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_incorrectPositionList_wrongLegsCount()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1156377690\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_basicScenario()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should match expected basic scenario calculation\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_exactCalculation_sameTokenAsUnderlying()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1250000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1325000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should be approximately 1325 ether when token0 equals underlying but token1 needs conversion\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_exactCalculation_onlyUnderlyingToken()\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2050000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should be exactly 2125 ether when both tokens equal underlying (token balances still count as exposure)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2125000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_exactCalculation_withExactPremiums()\": [\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include underlying plus converted premiums\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_exactCalculation_negativeExposureToZero()\": [\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"900000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should be exactly 900 ether when negative premiums are offset by token exposure\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_withPositions()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2722258935367507707706996859454145691648000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should match expected value with positions\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_multiplePoolsScenario()\": [\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1725000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should match expected multi-pool calculation\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"650000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"725000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_ethHandling()\": [\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include ETH balance correctly\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"326000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"251000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1326000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_tokenConversion()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should handle token conversion correctly\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_flippedTokens()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should handle flipped tokens correctly\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_negativePnL()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211456000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_emptyPools()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_zeroBalances()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_maxPriceDeviationBoundary()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_outOfRangeCall_short()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should be approximately the base balance for OTM short positions\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2722258935367507707706996859454145691648000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_outOfRangePut_short()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should be approximately the base balance for OTM short positions\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2722258935367507707706996859454145691648000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_inRangeCall_long()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2722258935367507707706996859454145691648000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should not be unreasonably high\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include intrinsic value from ITM long call\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_inRangePut_long()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2722258935367507707706996859454145691648000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should not be unreasonably high\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include intrinsic value from ITM long put\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_multiLegPosition()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include multi-leg position value correctly\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2722258935367507707706996859454145691648000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_staleOraclePrice_token0()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2827481816\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"151\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_staleOraclePrice_token1()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2827481816\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"151\",\n                        \"type\": \"int24\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_exactCalculation_noPositions()\": [\n                [\n                    {\n                        \"value\": \"NAV calculation should match expected value within tolerance\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_exactCalculation_withPremiums()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include premium calculations within tolerance\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"15000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_exactCalculation_singleLegPosition()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2722258935367507707706996859454145691648000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include position value correctly\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV calculation should be deterministic\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_priceConversion_exactRatio()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Different\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should be within expected conversion range\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"DIFF\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_negativeExposure_handledCorrectly()\": [\n                [\n                    {\n                        \"value\": \"680564733841876926926749214863536422912000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should handle negative exposure with Math.max(0, exposure)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"680564733841876926926749214863536422914000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_multiPool_exactAggregation()\": [\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1725000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"650000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"725000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Multi-pool NAV should aggregate correctly within tolerance\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_revert_invalidPoolsHash()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"wrong_hash\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2502171363\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_revert_stalePoolPrice()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2827481816\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"151\",\n                        \"type\": \"int24\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_revert_zeroPositionBalance()\": [\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1156377690\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_revert_incorrectLegsCount()\": [\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2722258935367507707706996859454145691648000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1156377690\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_maxPriceDeviationBoundary_exact()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Should succeed at exact price deviation boundary with correct value\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_zeroAmounts_edgeCase()\": [\n                [\n                    {\n                        \"value\": \"NAV should be exactly zero when all balances are zero\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"testFuzz_updatePoolsHash(address,bytes32)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"testFuzz_computeNAV_underlyingBalance(uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211455\",\n                        \"type\": \"uint128\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"testFuzz_computeNAV_priceDeviationBoundary(int24)\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"-50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should be positive within price deviation bounds and match expected value\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"testFuzz_computeNAV_tokenBalances(uint128,uint128,uint128)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551615\",\n                        \"type\": \"uint64\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include all token balances after conversion\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include at least the underlying balance\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"80\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_straddlePosition_exactCalculation()\": [\n                [\n                    {\n                        \"value\": \"1207000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6805647338418769269267492148635364229120000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1701411834604692317316873037158841057288000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"35000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Straddle NAV calculation should match expected value within tolerance\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6805647338418769269267492148635364229135000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1701411834604692317316873037158841057280000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"15000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_ironCondor_fourLegPosition()\": [\n                [\n                    {\n                        \"value\": \"250000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"280000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Iron condor NAV should match expected calculation\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"23000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"320000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"820000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"843000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8507059173023461586584365185794205286400000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8507059173023461586584365185794205286420000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114572000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1500\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_multiplePositions_aggregation()\": [\n                [\n                    {\n                        \"value\": \"75\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"80000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"13611294676837538538534984297270728458240000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"640000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5104235503814076951950619111476523171860000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"35000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1440000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"800000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"13611294676837538538534984297270728458270000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5104235503814076951950619111476523171840000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Multi-position NAV should match expected calculation\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1475000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"15000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_largeNumbers_noOverflow()\": [\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211455\",\n                        \"type\": \"uint128\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"403\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Should handle large numbers with correct calculation\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Should not overflow uint128 max\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_precisionTest_smallAmounts()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Should handle small amounts with correct precision\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_twapCalculation_verification()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV calculation should succeed with custom TWAP and match expected value\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30\",\n                        \"type\": \"uint32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_priceDeviation_exactBoundary()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0123456789abcdef\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000000000000000000000000000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \" should succeed with correct value\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"-50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Boundary test \",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"15000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_flippedOracles_conversion()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Flipped oracle conversion should work with expected range\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"FLIP\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Flipped\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_fullIntegration_realScenario()\": [\n                [\n                    {\n                        \"value\": \"100000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"80000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"17014118346046923173168730371588410572800000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1100500000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6805647338418769269267492148635364229120000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1680600000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6805647338418769269267492148635364229270000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1100600000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1600600000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"17014118346046923173168730371588410573000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV calculation should be deterministic\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should match expected realistic scenario calculation\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000500000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"PoC\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"T1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Token1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"UND\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Token0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1250999896338\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20015998341411\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30\",\n                        \"type\": \"uint32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"T0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TEST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Underlying\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"CryticTester\": {\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551615\",\n                        \"type\": \"uint64\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hypoVault_fulfillDeposits\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"constructor()\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TEST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"CryticToFoundry\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551615\",\n                        \"type\": \"uint64\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hypoVault_fulfillDeposits\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TEST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"TargetFunctions\": {\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551615\",\n                        \"type\": \"uint64\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hypoVault_fulfillDeposits\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"HypoVaultTargets\": {\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551615\",\n                        \"type\": \"uint64\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hypoVault_fulfillDeposits\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"ManagersTargets\": {\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        }\n    },\n    \"constants_used_in_binary\": {\n        \"CollateralTracker\": {\n            \"multicall(bytes[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"initialize()\": {\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"6\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"name()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"232\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"81\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"8388608\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"symbol()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"decimals()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"transfer(address,uint256)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"unlockCallback(bytes)\": {\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"31\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"68\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"asset()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"convertToShares(uint256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"convertToAssets(uint256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"previewDeposit(uint256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"deposit(uint256,address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"maxMint(address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"maxWithdraw(address)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"withdraw(uint256,address,address)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"withdraw(uint256,address,address,uint256[],bool)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"maxRedeem(address)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"previewRedeem(uint256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"redeem(uint256,address,address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"exerciseCost(int24,int24,uint256,uint128,int256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"delegate(address)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"revoke(address)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"settleLiquidation(address,address,int256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"refund(address,address,int256)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"takeCommissionAddData(address,int128,int128,int128,bool)\": {\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"exercise(address,int128,int128,int128,int128)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getAccountMarginDetails(address,int24,uint256[][],uint128,uint128)\": {\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"PanopticPool\": {\n            \"multicall(bytes[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"collateralToken0()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"collateralToken1()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"oracleContract()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"poolKey()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"92\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"initialize()\": {\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"assertMinCollateralValues(uint256,uint256)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"validateCollateralWithdrawable(address,uint256[],bool)\": {\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"232\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"208\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"184\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint8\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"72\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"7\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"232\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"208\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"pokeMedian()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"7\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint8\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\": {\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"232\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"208\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"184\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint8\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"92\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"72\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"7\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"burnOptions(uint256,uint256[],int24,int24,bool)\": {\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint8\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"92\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"232\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"208\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"184\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"7\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"72\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"burnOptions(uint256[],uint256[],int24,int24,bool)\": {\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint8\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"92\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"232\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"208\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"184\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"7\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"72\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getOracleTicks()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint8\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"7\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"numberOfLegs(address)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"positionData(address,uint256)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"232\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"184\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"208\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"144\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"settleLongPremium(uint256[],address,uint256,bool)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int128\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"SemiFungiblePositionManager\": {\n            \"multicall(bytes[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"balanceOfBatch(address[],uint256[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"supportsInterface(bytes4)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"3652614694\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"33540519\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"initializeAMMPool((address,Currency,uint24,int24,address))\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"expandEnforcedTickRange((address,Currency,uint24,int24,address))\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"unlockCallback(bytes)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getAccountPremium(bytes32,address,uint256,int24,int24,int24,uint256)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"Multicall\": {\n            \"multicall(bytes[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"InteractionHelper\": {\n            \"computeName(address,address,bool,uint24,string)\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"8388608\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"PanopticMath\": {\n            \"getOracleTicks(address,uint256)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint8\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"7\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"computeInternalMedian(uint256,uint256,uint256,uint256,address)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"7\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint8\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"twapFilter(address,uint32)\": {\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"19\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getLiquidationBonus(uint256,uint256,uint160,int256,uint256)\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"haircutPremia(address,uint256[],int256[][],int256,address,address,uint160,mapping(bytes32 => LeftRightUnsigned))\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"ERC1155\": {\n            \"safeTransferFrom(address,address,uint256,uint256,bytes)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"balanceOfBatch(address[],uint256[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"supportsInterface(bytes4)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"3652614694\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"33540519\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"PositionBalanceLibrary\": {\n            \"unpackAll(uint256)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"232\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"184\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"208\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"144\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"ERC20\": {\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"MockERC20\": {\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"HypoVault\": {\n            \"multicall(bytes[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"requestDeposit(uint128)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"68\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"31\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"cancelDeposit(address)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"31\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"executeDeposit(address,uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"executeWithdrawal(address,uint256)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"31\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"10000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"transfer(address,uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"manage(address,bytes,uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"manage(address[],bytes[],uint256[])\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"fulfillDeposits(uint256,bytes)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"fulfillWithdrawals(uint256,uint256,bytes)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"PanopticVaultAccountant\": {\n            \"computeNAV(address,address,bytes)\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"VaultAccountantMock\": {\n            \"computeNAV(address,address,bytes)\": {\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"HypoVaultTest\": {\n            \"setUp()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_deposit_full_single_user_epoch0()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_deposit_full_single_user_later_epoch()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_deposit_full_multiple_users_same_epoch()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_deposit_partial_single_user()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_deposit_partial_multiple_users()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_deposit_multiple_partial_fulfillments()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"400000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"350000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"300000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_withdrawal_with_multiple_users()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_withdrawal_with_profit_performance_fee()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_withdrawal_with_loss_no_performance_fee()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_withdrawal_partial()\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"30\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"60\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_cancel_unfulfilled_withdrawal()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_cancel_withdrawal_restores_basis()\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_withdrawal_not_fulfillable()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_total_supply_updates()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_sequential_deposit_withdrawal_cycles()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"250000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_reserved_withdrawal_assets_tracking()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_multiple_cancellations()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"150000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_large_numbers_precision()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_basis_calculation_precision()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_partial_withdrawal_exact_numbers()\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"50\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"30\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_withdrawal_scenario_verification()\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_exact_withdrawal_calculation()\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"75\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"MockV3CompatibleOracle\": {\n            \"constructor()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"observe(uint32[])\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setTickCumulatives(int56[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setObservation(uint256,int56,uint160)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"MockPanopticPool\": {\n            \"setMockPositionBalanceArray(uint256[][])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"addPosition(address,uint256)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"removePosition(address,uint256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"PanopticVaultAccountantTest\": {\n            \"setUp()\": {\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_invalidPools()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_staleOraclePrice_pool()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_incorrectPositionList_zeroBalance()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_incorrectPositionList_wrongLegsCount()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_basicScenario()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_exactCalculation_sameTokenAsUnderlying()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_exactCalculation_onlyUnderlyingToken()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_exactCalculation_withExactPremiums()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_exactCalculation_negativeExposureToZero()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_withPositions()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_multiplePoolsScenario()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"400000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_ethHandling()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_tokenConversion()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_flippedTokens()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_negativePnL()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_zeroBalances()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_outOfRangeCall_short()\": {\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_outOfRangePut_short()\": {\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_inRangeCall_long()\": {\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_inRangePut_long()\": {\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_multiLegPosition()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_staleOraclePrice_token0()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_staleOraclePrice_token1()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_exactCalculation_noPositions()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_exactCalculation_withPremiums()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_exactCalculation_singleLegPosition()\": {\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_priceConversion_exactRatio()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_negativeExposure_handledCorrectly()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"2000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.OR\": [\n                    [\n                        {\n                            \"value\": \"2000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_multiPool_exactAggregation()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"400000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_revert_invalidPoolsHash()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_revert_stalePoolPrice()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_revert_zeroPositionBalance()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_revert_incorrectLegsCount()\": {\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_maxPriceDeviationBoundary_exact()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_zeroAmounts_edgeCase()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"testFuzz_computeNAV_priceDeviationBoundary(int24)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"testFuzz_computeNAV_tokenBalances(uint128,uint128,uint128)\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"80\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_straddlePosition_exactCalculation()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"5000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"20000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.OR\": [\n                    [\n                        {\n                            \"value\": \"15000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_ironCondor_fourLegPosition()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"150000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"40000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"30000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"23000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1500\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1500\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"25000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.OR\": [\n                    [\n                        {\n                            \"value\": \"12000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"20000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_multiplePositions_aggregation()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"800000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"80000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"60000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"300000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"35000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"15000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"40000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.OR\": [\n                    [\n                        {\n                            \"value\": \"30000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"20000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_largeNumbers_noOverflow()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"403\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_precisionTest_smallAmounts()\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_twapCalculation_verification()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_priceDeviation_exactBoundary()\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_flippedOracles_conversion()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_fullIntegration_realScenario()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"100000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"80000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"20000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.OR\": [\n                    [\n                        {\n                            \"value\": \"150000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"PoC\": {\n            \"setUp()\": {\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CryticTester\": {\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"constructor()\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"300\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CryticToFoundry\": {\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setUp()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"300\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"TargetFunctions\": {\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"HypoVaultTargets\": {\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"ManagersTargets\": {\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        }\n    },\n    \"functions_relations\": {\n        \"Asserts\": {},\n        \"BaseProperties\": {},\n        \"BaseSetup\": {},\n        \"BaseTargetFunctions\": {},\n        \"CryticAsserts\": {},\n        \"FoundryAsserts\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IHevm\": {\n            \"warp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"roll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"store(address,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopPrank()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"selectFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"activeFork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"etch(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"CommonBase\": {},\n        \"TestBase\": {},\n        \"ScriptBase\": {},\n        \"StdAssertions\": {\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"StdChains\": {},\n        \"StdCheatsSafe\": {},\n        \"StdCheats\": {},\n        \"StdConstants\": {},\n        \"stdError\": {},\n        \"StdInvariant\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"stdJson\": {},\n        \"stdMath\": {},\n        \"stdStorageSafe\": {},\n        \"stdStorage\": {},\n        \"StdStyle\": {},\n        \"stdToml\": {},\n        \"StdUtils\": {},\n        \"Test\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"VmSafe\": {\n            \"createWallet(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"publicKeyP256(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKey(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signP256(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envExists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isContext(uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setEnv(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accesses(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"eth_getLogs(uint256,uint256,address,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobBaseFee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingKeyAndParentOf(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingLength(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingSlotAt(address,bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce((address,uint256,uint256,uint256))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRecordedLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiffJson()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"lastCallGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"record()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"recordLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startStateDiffRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"closeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes,uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fsMetadata(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByDeployedCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcast(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployedCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployments(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"projectRoot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prompt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecret(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecretUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFileBinary(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLine(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLink(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryFfi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unixTime()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFileBinary(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeLine(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUintToHex(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExists(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"attachBlob(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"attachDelegation((uint8,bytes32,bytes32,uint64,address))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcastRawTransaction(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getWallets()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signAndAttachDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signAndAttachDelegation(address,uint256,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signDelegation(address,uint256,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"contains(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"indexOf(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"replace(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"split(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toLowercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toUppercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"trim(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"foundryVersionAtLeast(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"foundryVersionCmp(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getChain(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getChain(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getFoundryVersion()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrl(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrlStructs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sleep(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreateAddress(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyStorage(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ensNamehash(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLabel(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomAddress()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBool()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes4()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes8()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setArbitraryStorage(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setArbitraryStorage(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"shuffle(uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sort(uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Vm\": {\n            \"createWallet(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"publicKeyP256(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKey(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signP256(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envExists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isContext(uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setEnv(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accesses(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"eth_getLogs(uint256,uint256,address,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobBaseFee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingKeyAndParentOf(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingLength(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingSlotAt(address,bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce((address,uint256,uint256,uint256))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRecordedLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiffJson()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"lastCallGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"record()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"recordLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startStateDiffRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"closeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes,uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fsMetadata(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByDeployedCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcast(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployedCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployments(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"projectRoot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prompt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecret(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecretUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFileBinary(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLine(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLink(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryFfi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unixTime()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFileBinary(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeLine(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUintToHex(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExists(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"attachBlob(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"attachDelegation((uint8,bytes32,bytes32,uint64,address))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcastRawTransaction(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getWallets()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signAndAttachDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signAndAttachDelegation(address,uint256,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signDelegation(address,uint256,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"contains(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"indexOf(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"replace(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"split(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toLowercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toUppercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"trim(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"foundryVersionAtLeast(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"foundryVersionCmp(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getChain(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getChain(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getFoundryVersion()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrl(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrlStructs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sleep(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreateAddress(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyStorage(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ensNamehash(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLabel(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomAddress()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBool()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes4()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes8()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setArbitraryStorage(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setArbitraryStorage(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"shuffle(uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sort(uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accessList((address,bytes32[])[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"activeFork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowCheatcodes(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blobBaseFee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blobhashes(bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"chainId(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"clearMockedCalls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cloneAccount(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"coinbase(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cool(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"coolSlot(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteStateSnapshot(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteStateSnapshots()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"difficulty(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"dumpState(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"etch(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobhashes()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isPersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"loadAllocs(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,uint256,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,uint256,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,uint256,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,uint256,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCalls(address,bytes,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCalls(address,uint256,bytes,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockFunction(address,address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"noAccessList()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prevrandao(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prevrandao(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readCallers()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToState(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToStateAndDelete(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokePersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokePersistent(address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"roll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"selectFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setBlockhash(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setNonce(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setNonceUnsafe(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotGasLastCall(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotGasLastCall(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotState()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotValue(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotValue(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startSnapshotGas(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startSnapshotGas(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopPrank()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"store(address,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"txGasPrice(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"warmSlot(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"warp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteSnapshot(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteSnapshots()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToAndDelete(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertTo(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCallMinGas(address,uint256,uint64,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCallMinGas(address,uint256,uint64,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,uint64,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,uint64,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCreate(bytes,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCreate2(bytes,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(bool,bool,bool,bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(bool,bool,bool,bool,bool,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectPartialRevert(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectPartialRevert(bytes4,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectSafeMemory(uint64,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectSafeMemoryCall(uint64,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"skip(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"skip(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopExpectSafeMemory()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"interceptInitcode()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"console\": {},\n        \"IMulticall3\": {\n            \"aggregate((address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"aggregate3((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"aggregate3Value((address,bool,uint256,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blockAndAggregate((address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBasefee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockHash(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getChainId()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockCoinbase()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockDifficulty()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockGasLimit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getEthBalance(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLastBlockHash()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryAggregate(bool,(address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryBlockAndAggregate(bool,(address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"safeconsole\": {},\n        \"CollateralTracker\": {\n            \"multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\": {\n                \"impacts\": [\n                    \"unlockCallback(bytes)\",\n                    \"previewDeposit(uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"maxMint(address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"initialize()\": {\n                \"impacts\": [\n                    \"initialize()\",\n                    \"getPoolData()\",\n                    \"totalAssets()\",\n                    \"convertToShares(uint256)\",\n                    \"convertToAssets(uint256)\",\n                    \"previewDeposit(uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"maxMint(address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"previewWithdraw(uint256)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"previewRedeem(uint256)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\",\n                    \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n                    \"exercise(address,int128,int128,int128,int128)\"\n                ],\n                \"is_impacted_by\": [\n                    \"initialize()\"\n                ]\n            },\n            \"getPoolData()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"name()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"symbol()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"decimals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"unlockCallback(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\"\n                ]\n            },\n            \"asset()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"totalAssets()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"convertToShares(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"convertToAssets(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"maxDeposit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"previewDeposit(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\",\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"deposit(uint256,address)\": {\n                \"impacts\": [\n                    \"getPoolData()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"totalAssets()\",\n                    \"convertToShares(uint256)\",\n                    \"convertToAssets(uint256)\",\n                    \"previewDeposit(uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"maxMint(address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"previewWithdraw(uint256)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"previewRedeem(uint256)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\",\n                    \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n                    \"exercise(address,int128,int128,int128,int128)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\",\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"maxMint(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\",\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"previewMint(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mint(uint256,address)\": {\n                \"impacts\": [\n                    \"getPoolData()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"totalAssets()\",\n                    \"convertToShares(uint256)\",\n                    \"convertToAssets(uint256)\",\n                    \"previewDeposit(uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"maxMint(address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"previewWithdraw(uint256)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"previewRedeem(uint256)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\",\n                    \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n                    \"exercise(address,int128,int128,int128,int128)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\",\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"maxWithdraw(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"previewWithdraw(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"withdraw(uint256,address,address)\": {\n                \"impacts\": [\n                    \"getPoolData()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"totalAssets()\",\n                    \"convertToShares(uint256)\",\n                    \"convertToAssets(uint256)\",\n                    \"previewDeposit(uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"maxMint(address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"previewWithdraw(uint256)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"previewRedeem(uint256)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\",\n                    \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n                    \"exercise(address,int128,int128,int128,int128)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\",\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"withdraw(uint256,address,address,uint256[],bool)\": {\n                \"impacts\": [\n                    \"getPoolData()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"totalAssets()\",\n                    \"convertToShares(uint256)\",\n                    \"convertToAssets(uint256)\",\n                    \"previewDeposit(uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"maxMint(address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"previewWithdraw(uint256)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"previewRedeem(uint256)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\",\n                    \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n                    \"exercise(address,int128,int128,int128,int128)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\",\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"maxRedeem(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"previewRedeem(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"redeem(uint256,address,address)\": {\n                \"impacts\": [\n                    \"getPoolData()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"totalAssets()\",\n                    \"convertToShares(uint256)\",\n                    \"convertToAssets(uint256)\",\n                    \"previewDeposit(uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"maxMint(address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"previewWithdraw(uint256)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"previewRedeem(uint256)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\",\n                    \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n                    \"exercise(address,int128,int128,int128,int128)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\",\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"exerciseCost(int24,int24,uint256,uint128,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"delegate(address)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"revoke(address)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"settleLiquidation(address,address,int256)\": {\n                \"impacts\": [\n                    \"getPoolData()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"totalAssets()\",\n                    \"convertToShares(uint256)\",\n                    \"convertToAssets(uint256)\",\n                    \"previewDeposit(uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"maxMint(address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"previewWithdraw(uint256)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"previewRedeem(uint256)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\",\n                    \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n                    \"exercise(address,int128,int128,int128,int128)\"\n                ],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"refund(address,address,int256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"takeCommissionAddData(address,int128,int128,int128,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"exercise(address,int128,int128,int128,int128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"getAccountMarginDetails(address,int24,uint256[][],uint128,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"PanopticPool\": {\n            \"multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"collateralToken0()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"collateralToken1()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"oracleContract()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"poolKey()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"constructor(address,address)\": {\n                \"impacts\": [\n                    \"initialize()\",\n                    \"validateCollateralWithdrawable(address,uint256[],bool)\",\n                    \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"liquidate(uint256[],address,uint256[])\",\n                    \"getOracleTicks()\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"initialize()\": {\n                \"impacts\": [\n                    \"initialize()\",\n                    \"validateCollateralWithdrawable(address,uint256[],bool)\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"liquidate(uint256[],address,uint256[])\",\n                    \"forceExercise(address,uint256,uint256[],uint256[],uint256)\",\n                    \"isSafeMode()\",\n                    \"getOracleTicks()\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\"\n                ]\n            },\n            \"onERC1155Received(address,address,uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertMinCollateralValues(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"validateCollateralWithdrawable(address,uint256[],bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ]\n            },\n            \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ]\n            },\n            \"pokeMedian()\": {\n                \"impacts\": [\n                    \"initialize()\",\n                    \"validateCollateralWithdrawable(address,uint256[],bool)\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"liquidate(uint256[],address,uint256[])\",\n                    \"forceExercise(address,uint256,uint256[],uint256[],uint256)\",\n                    \"isSafeMode()\",\n                    \"getOracleTicks()\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\"\n                ]\n            },\n            \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\": {\n                \"impacts\": [\n                    \"initialize()\",\n                    \"validateCollateralWithdrawable(address,uint256[],bool)\",\n                    \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"liquidate(uint256[],address,uint256[])\",\n                    \"forceExercise(address,uint256,uint256[],uint256[],uint256)\",\n                    \"isSafeMode()\",\n                    \"getOracleTicks()\",\n                    \"numberOfLegs(address)\",\n                    \"positionData(address,uint256)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ]\n            },\n            \"burnOptions(uint256,uint256[],int24,int24,bool)\": {\n                \"impacts\": [\n                    \"initialize()\",\n                    \"validateCollateralWithdrawable(address,uint256[],bool)\",\n                    \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"liquidate(uint256[],address,uint256[])\",\n                    \"forceExercise(address,uint256,uint256[],uint256[],uint256)\",\n                    \"isSafeMode()\",\n                    \"getOracleTicks()\",\n                    \"numberOfLegs(address)\",\n                    \"positionData(address,uint256)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ]\n            },\n            \"burnOptions(uint256[],uint256[],int24,int24,bool)\": {\n                \"impacts\": [\n                    \"initialize()\",\n                    \"validateCollateralWithdrawable(address,uint256[],bool)\",\n                    \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"liquidate(uint256[],address,uint256[])\",\n                    \"forceExercise(address,uint256,uint256[],uint256[],uint256)\",\n                    \"isSafeMode()\",\n                    \"getOracleTicks()\",\n                    \"numberOfLegs(address)\",\n                    \"positionData(address,uint256)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ]\n            },\n            \"liquidate(uint256[],address,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\"\n                ]\n            },\n            \"forceExercise(address,uint256,uint256[],uint256[],uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\"\n                ]\n            },\n            \"isSafeMode()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\"\n                ]\n            },\n            \"getOracleTicks()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\"\n                ]\n            },\n            \"numberOfLegs(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\"\n                ]\n            },\n            \"positionData(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\"\n                ]\n            },\n            \"settleLongPremium(uint256[],address,uint256,bool)\": {\n                \"impacts\": [\n                    \"validateCollateralWithdrawable(address,uint256[],bool)\",\n                    \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ]\n            }\n        },\n        \"SemiFungiblePositionManager\": {\n            \"multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setApprovalForAll(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOfBatch(address[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n                    \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\"\n                ]\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"constructor(address,uint256,uint256,uint256)\": {\n                \"impacts\": [\n                    \"initializeAMMPool((address,Currency,uint24,int24,address))\",\n                    \"unlockCallback(bytes)\",\n                    \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n                    \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n                    \"getAccountPremium(bytes32,address,uint256,int24,int24,int24,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"initializeAMMPool((address,Currency,uint24,int24,address))\": {\n                \"impacts\": [\n                    \"initializeAMMPool((address,Currency,uint24,int24,address))\",\n                    \"getUniswapV4PoolKeyFromId(uint64)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,uint256,uint256,uint256)\",\n                    \"initializeAMMPool((address,Currency,uint24,int24,address))\"\n                ]\n            },\n            \"expandEnforcedTickRange((address,Currency,uint24,int24,address))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unlockCallback(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,uint256,uint256,uint256)\"\n                ]\n            },\n            \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\": {\n                \"impacts\": [\n                    \"balanceOfBatch(address[],uint256[])\",\n                    \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n                    \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,uint256,uint256,uint256)\",\n                    \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n                    \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\"\n                ]\n            },\n            \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\": {\n                \"impacts\": [\n                    \"balanceOfBatch(address[],uint256[])\",\n                    \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n                    \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,uint256,uint256,uint256)\",\n                    \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n                    \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\"\n                ]\n            },\n            \"safeTransferFrom(address,address,uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getAccountLiquidity(bytes32,address,uint256,int24,int24)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getAccountPremium(bytes32,address,uint256,int24,int24,int24,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,uint256,uint256,uint256)\"\n                ]\n            },\n            \"getUniswapV4PoolKeyFromId(uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initializeAMMPool((address,Currency,uint24,int24,address))\"\n                ]\n            },\n            \"getEnforcedTickLimits(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getPoolId(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getPoolId((address,Currency,uint24,int24,address))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Multicall\": {\n            \"multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IV3CompatibleOracle\": {\n            \"slot0()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"observations(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"observe(uint32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"increaseObservationCardinalityNext(uint16)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Constants\": {},\n        \"Errors\": {},\n        \"InteractionHelper\": {\n            \"computeName(address,address,bool,uint24,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeSymbol(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeDecimals(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Math\": {},\n        \"PanopticMath\": {\n            \"numberOfLeadingHexZeros(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"safeERC20Symbol(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getOracleTicks(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeInternalMedian(uint256,uint256,uint256,uint256,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"twapFilter(address,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLiquidationBonus(uint256,uint256,uint160,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"haircutPremia(address,uint256[],int256[][],int256,address,address,uint160,mapping(bytes32 => LeftRightUnsigned))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRefundAmounts(address,int256,int24,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"SafeTransferLib\": {},\n        \"V4StateReader\": {},\n        \"ERC1155\": {\n            \"setApprovalForAll(address,bool)\": {\n                \"impacts\": [\n                    \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n                    \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"safeTransferFrom(address,address,uint256,uint256,bytes)\": {\n                \"impacts\": [\n                    \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n                    \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\",\n                    \"balanceOfBatch(address[],uint256[])\"\n                ],\n                \"is_impacted_by\": [\n                    \"setApprovalForAll(address,bool)\",\n                    \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n                    \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"\n                ]\n            },\n            \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\": {\n                \"impacts\": [\n                    \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n                    \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\",\n                    \"balanceOfBatch(address[],uint256[])\"\n                ],\n                \"is_impacted_by\": [\n                    \"setApprovalForAll(address,bool)\",\n                    \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n                    \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"\n                ]\n            },\n            \"balanceOfBatch(address[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n                    \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"\n                ]\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"ERC20Minimal\": {\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            }\n        },\n        \"IERC20Partial\": {\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"LeftRightLibrary\": {},\n        \"LiquidityChunkLibrary\": {},\n        \"PositionBalanceLibrary\": {\n            \"unpackAll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"TokenIdLibrary\": {},\n        \"Clone\": {},\n        \"Ownable\": {\n            \"owner()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"renounceOwnership()\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"transferOwnership(address)\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            }\n        },\n        \"IERC20\": {\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Address\": {},\n        \"Context\": {},\n        \"Strings\": {},\n        \"FixedPointMathLib\": {},\n        \"TransientReentrancyGuard\": {},\n        \"IERC1155Receiver\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"onERC1155Received(address,address,uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"ERC1155Holder\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"onERC1155Received(address,address,uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC20Metadata\": {\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"name()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"symbol()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"decimals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"ERC165\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC165\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"SignedMath\": {},\n        \"IExtsload\": {\n            \"extsload(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"extsload(bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"extsload(bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IExttload\": {\n            \"exttload(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exttload(bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IHooks\": {\n            \"beforeInitialize(address,(address,Currency,uint24,int24,address),uint160)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"afterInitialize(address,(address,Currency,uint24,int24,address),uint160,int24)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"beforeAddLiquidity(address,(address,Currency,uint24,int24,address),(int24,int24,int256,bytes32),bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"afterAddLiquidity(address,(address,Currency,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"beforeRemoveLiquidity(address,(address,Currency,uint24,int24,address),(int24,int24,int256,bytes32),bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"afterRemoveLiquidity(address,(address,Currency,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"beforeSwap(address,(address,Currency,uint24,int24,address),(bool,int256,uint160),bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"afterSwap(address,(address,Currency,uint24,int24,address),(bool,int256,uint160),int256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"beforeDonate(address,(address,Currency,uint24,int24,address),uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"afterDonate(address,(address,Currency,uint24,int24,address),uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IPoolManager\": {\n            \"exttload(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exttload(bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"extsload(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"extsload(bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"extsload(bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isOperator(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setOperator(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"protocolFeesAccrued(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setProtocolFee((address,Currency,uint24,int24,address),uint24)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setProtocolFeeController(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"collectProtocolFees(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"protocolFeeController()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unlock(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"initialize((address,Currency,uint24,int24,address),uint160)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"modifyLiquidity((address,Currency,uint24,int24,address),(int24,int24,int256,bytes32),bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"swap((address,Currency,uint24,int24,address),(bool,int256,uint160),bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"donate((address,Currency,uint24,int24,address),uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sync(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"take(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"settle()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"settleFor(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"clear(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mint(address,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"burn(address,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"updateDynamicLPFee((address,Currency,uint24,int24,address),uint24)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IProtocolFees\": {\n            \"protocolFeesAccrued(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setProtocolFee((address,Currency,uint24,int24,address),uint24)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setProtocolFeeController(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"collectProtocolFees(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"protocolFeeController()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC20Minimal\": {\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC6909Claims\": {\n            \"balanceOf(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isOperator(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setOperator(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"CustomRevert\": {},\n        \"FixedPoint128\": {},\n        \"FullMath\": {},\n        \"LiquidityMath\": {},\n        \"Position\": {},\n        \"SafeCast\": {},\n        \"StateLibrary\": {},\n        \"BalanceDeltaLibrary\": {},\n        \"BeforeSwapDeltaLibrary\": {},\n        \"CurrencyLibrary\": {},\n        \"PoolIdLibrary\": {},\n        \"ERC20S\": {\n            \"constructor(string,string,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"editSupply(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mint(address,uint256)\": {\n                \"impacts\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\",\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            }\n        },\n        \"ActorManager\": {},\n        \"AssetManager\": {},\n        \"EnumerableSet\": {},\n        \"ERC20\": {\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ]\n            },\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ],\n                \"is_impacted_by\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ]\n            },\n            \"DOMAIN_SEPARATOR()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"MockERC20\": {\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ],\n                \"is_impacted_by\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"DOMAIN_SEPARATOR()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"constructor(string,string,uint8)\": {\n                \"impacts\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"DOMAIN_SEPARATOR()\",\n                    \"constructor(string,string,uint8)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"mint(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"burn(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            }\n        },\n        \"Panic\": {},\n        \"Utils\": {},\n        \"HypoVault\": {\n            \"owner()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"renounceOwnership()\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"setManager(address)\",\n                    \"setAccountant(address)\",\n                    \"setFeeWallet(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"transferOwnership(address)\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"setManager(address)\",\n                    \"setAccountant(address)\",\n                    \"setFeeWallet(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"constructor(address,address,address,uint256)\": {\n                \"impacts\": [\n                    \"requestDeposit(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"manage(address,bytes,uint256)\",\n                    \"manage(address[],bytes[],uint256[])\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"setManager(address)\": {\n                \"impacts\": [\n                    \"cancelDeposit(address)\",\n                    \"cancelWithdrawal(address)\",\n                    \"manage(address,bytes,uint256)\",\n                    \"manage(address[],bytes[],uint256[])\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"setAccountant(address)\": {\n                \"impacts\": [\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"setFeeWallet(address)\": {\n                \"impacts\": [\n                    \"executeWithdrawal(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"requestDeposit(uint128)\": {\n                \"impacts\": [\n                    \"requestDeposit(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\",\n                    \"getDepositEpochState(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256)\",\n                    \"requestDeposit(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\"\n                ]\n            },\n            \"requestWithdrawal(uint128)\": {\n                \"impacts\": [\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ]\n            },\n            \"cancelDeposit(address)\": {\n                \"impacts\": [\n                    \"requestDeposit(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\",\n                    \"getDepositEpochState(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256)\",\n                    \"setManager(address)\",\n                    \"requestDeposit(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\"\n                ]\n            },\n            \"cancelWithdrawal(address)\": {\n                \"impacts\": [\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256)\",\n                    \"setManager(address)\",\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ]\n            },\n            \"executeDeposit(address,uint256)\": {\n                \"impacts\": [\n                    \"requestDeposit(uint128)\",\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"requestDeposit(uint128)\",\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\"\n                ]\n            },\n            \"executeWithdrawal(address,uint256)\": {\n                \"impacts\": [\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256)\",\n                    \"setFeeWallet(address)\",\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ]\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"manage(address,bytes,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256)\",\n                    \"setManager(address)\"\n                ]\n            },\n            \"manage(address[],bytes[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256)\",\n                    \"setManager(address)\"\n                ]\n            },\n            \"fulfillDeposits(uint256,bytes)\": {\n                \"impacts\": [\n                    \"requestDeposit(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\",\n                    \"getDepositEpochState(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256)\",\n                    \"setManager(address)\",\n                    \"setAccountant(address)\",\n                    \"requestDeposit(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ]\n            },\n            \"fulfillWithdrawals(uint256,uint256,bytes)\": {\n                \"impacts\": [\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256)\",\n                    \"setManager(address)\",\n                    \"setAccountant(address)\",\n                    \"requestDeposit(uint128)\",\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ]\n            },\n            \"getDepositEpochState(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"requestDeposit(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"fulfillDeposits(uint256,bytes)\"\n                ]\n            }\n        },\n        \"Token\": {\n            \"editSupply(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mint(address,uint256)\": {\n                \"impacts\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\",\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"constructor(string,string,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"PanopticVaultAccountant\": {\n            \"owner()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"renounceOwnership()\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"updatePoolsHash(address,bytes32)\",\n                    \"lockVault(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"transferOwnership(address)\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"updatePoolsHash(address,bytes32)\",\n                    \"lockVault(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"updatePoolsHash(address,bytes32)\": {\n                \"impacts\": [\n                    \"computeNAV(address,address,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"lockVault(address)\"\n                ]\n            },\n            \"lockVault(address)\": {\n                \"impacts\": [\n                    \"updatePoolsHash(address,bytes32)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"computeNAV(address,address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"updatePoolsHash(address,bytes32)\"\n                ]\n            }\n        },\n        \"IVaultAccountant\": {\n            \"computeNAV(address,address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"AccountingMath\": {},\n        \"VaultAccountantMock\": {\n            \"setNav(uint256)\": {\n                \"impacts\": [\n                    \"computeNAV(address,address,bytes)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"setExpectedVault(address)\": {\n                \"impacts\": [\n                    \"computeNAV(address,address,bytes)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"setExpectedManagerInput(bytes)\": {\n                \"impacts\": [\n                    \"computeNAV(address,address,bytes)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"computeNAV(address,address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setNav(uint256)\",\n                    \"setExpectedVault(address)\",\n                    \"setExpectedManagerInput(bytes)\"\n                ]\n            }\n        },\n        \"HypoVaultTest\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"setUp()\",\n                    \"test_vaultParameters()\",\n                    \"test_deposit_full_single_user_epoch0()\",\n                    \"test_deposit_full_single_user_later_epoch()\",\n                    \"test_deposit_full_multiple_users_same_epoch()\",\n                    \"test_deposit_partial_single_user()\",\n                    \"test_deposit_partial_multiple_users()\",\n                    \"test_deposit_multiple_partial_fulfillments()\",\n                    \"test_withdrawal_with_multiple_users()\",\n                    \"test_withdrawal_with_profit_performance_fee()\",\n                    \"test_withdrawal_with_loss_no_performance_fee()\",\n                    \"test_withdrawal_partial()\",\n                    \"test_cancel_unfulfilled_deposit()\",\n                    \"test_cancel_unfulfilled_withdrawal()\",\n                    \"test_cancel_withdrawal_restores_basis()\",\n                    \"test_onlyManager_functions()\",\n                    \"test_onlyOwner_functions()\",\n                    \"test_epoch_transitions_deposits()\",\n                    \"test_epoch_transitions_withdrawals()\",\n                    \"test_execute_from_wrong_epoch()\",\n                    \"test_zero_amount_deposit()\",\n                    \"test_withdrawal_not_fulfillable()\",\n                    \"test_total_supply_updates()\",\n                    \"test_complex_multi_epoch_scenario()\",\n                    \"test_mixed_partial_fulfillments_across_epochs()\",\n                    \"test_sequential_deposit_withdrawal_cycles()\",\n                    \"test_reserved_withdrawal_assets_tracking()\",\n                    \"test_manager_input_validation()\",\n                    \"test_multiple_cancellations()\",\n                    \"test_large_numbers_precision()\",\n                    \"test_basis_calculation_precision()\",\n                    \"test_partial_deposit_exact_numbers()\",\n                    \"test_partial_withdrawal_exact_numbers()\",\n                    \"test_multiple_users_partial_deposit_exact_numbers()\",\n                    \"test_partial_deposit_share_calculation()\",\n                    \"test_withdrawal_scenario_verification()\",\n                    \"test_exact_withdrawal_calculation()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_vaultParameters()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_deposit_full_single_user_epoch0()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_deposit_full_single_user_later_epoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_deposit_full_multiple_users_same_epoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_deposit_partial_single_user()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_deposit_partial_multiple_users()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_deposit_multiple_partial_fulfillments()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_withdrawal_with_multiple_users()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_withdrawal_with_profit_performance_fee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_withdrawal_with_loss_no_performance_fee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_withdrawal_partial()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_cancel_unfulfilled_deposit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_cancel_unfulfilled_withdrawal()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_cancel_withdrawal_restores_basis()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_onlyManager_functions()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_onlyOwner_functions()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_epoch_transitions_deposits()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_epoch_transitions_withdrawals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_execute_from_wrong_epoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_zero_amount_deposit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_withdrawal_not_fulfillable()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_total_supply_updates()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_complex_multi_epoch_scenario()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_mixed_partial_fulfillments_across_epochs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_sequential_deposit_withdrawal_cycles()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_reserved_withdrawal_assets_tracking()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_manager_input_validation()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_multiple_cancellations()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_large_numbers_precision()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_basis_calculation_precision()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_partial_deposit_exact_numbers()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_partial_withdrawal_exact_numbers()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_multiple_users_partial_deposit_exact_numbers()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_partial_deposit_share_calculation()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_withdrawal_scenario_verification()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_exact_withdrawal_calculation()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            }\n        },\n        \"MockERC20Partial\": {\n            \"constructor(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mint(address,uint256)\": {\n                \"impacts\": [\n                    \"mint(address,uint256)\",\n                    \"balanceOf(address)\",\n                    \"totalSupply()\"\n                ],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\",\n                    \"setBalance(address,uint256)\"\n                ]\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\",\n                    \"setBalance(address,uint256)\"\n                ]\n            },\n            \"setBalance(address,uint256)\": {\n                \"impacts\": [\n                    \"mint(address,uint256)\",\n                    \"balanceOf(address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\"\n                ]\n            }\n        },\n        \"MockV3CompatibleOracle\": {\n            \"constructor()\": {\n                \"impacts\": [\n                    \"constructor()\",\n                    \"observe(uint32[])\",\n                    \"slot0()\",\n                    \"setTickCumulatives(int56[])\",\n                    \"setObservation(uint256,int56,uint160)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"setTickCumulatives(int56[])\",\n                    \"setObservation(uint256,int56,uint160)\"\n                ]\n            },\n            \"observe(uint32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"setTickCumulatives(int56[])\",\n                    \"setObservation(uint256,int56,uint160)\"\n                ]\n            },\n            \"slot0()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"setCurrentState(int24,uint160,uint16)\"\n                ]\n            },\n            \"observations(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"increaseObservationCardinalityNext(uint16)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setTickCumulatives(int56[])\": {\n                \"impacts\": [\n                    \"constructor()\",\n                    \"observe(uint32[])\",\n                    \"setTickCumulatives(int56[])\",\n                    \"setObservation(uint256,int56,uint160)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"setTickCumulatives(int56[])\",\n                    \"setObservation(uint256,int56,uint160)\"\n                ]\n            },\n            \"setObservation(uint256,int56,uint160)\": {\n                \"impacts\": [\n                    \"constructor()\",\n                    \"observe(uint32[])\",\n                    \"setTickCumulatives(int56[])\",\n                    \"setObservation(uint256,int56,uint160)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"setTickCumulatives(int56[])\",\n                    \"setObservation(uint256,int56,uint160)\"\n                ]\n            },\n            \"setCurrentState(int24,uint160,uint16)\": {\n                \"impacts\": [\n                    \"slot0()\"\n                ],\n                \"is_impacted_by\": []\n            }\n        },\n        \"MockCollateralToken\": {\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setBalance(address,uint256)\"\n                ]\n            },\n            \"setBalance(address,uint256)\": {\n                \"impacts\": [\n                    \"balanceOf(address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"previewRedeem(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setPreviewRedeemReturn(uint256)\"\n                ]\n            },\n            \"setPreviewRedeemReturn(uint256)\": {\n                \"impacts\": [\n                    \"previewRedeem(uint256)\"\n                ],\n                \"is_impacted_by\": []\n            }\n        },\n        \"MockPanopticPool\": {\n            \"constructor()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"numberOfLegs(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setNumberOfLegs(address,uint256)\"\n                ]\n            },\n            \"setNumberOfLegs(address,uint256)\": {\n                \"impacts\": [\n                    \"numberOfLegs(address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setMockPremiums(uint256,uint256)\",\n                    \"setMockPositionBalanceArray(uint256[][])\"\n                ]\n            },\n            \"setMockPremiums(uint256,uint256)\": {\n                \"impacts\": [\n                    \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"setMockPositionBalanceArray(uint256[][])\": {\n                \"impacts\": [\n                    \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n                    \"setMockPositionBalanceArray(uint256[][])\"\n                ],\n                \"is_impacted_by\": [\n                    \"setMockPositionBalanceArray(uint256[][])\"\n                ]\n            },\n            \"addPosition(address,uint256)\": {\n                \"impacts\": [\n                    \"addPosition(address,uint256)\",\n                    \"removePosition(address,uint256)\",\n                    \"hasPosition(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"addPosition(address,uint256)\",\n                    \"removePosition(address,uint256)\"\n                ]\n            },\n            \"removePosition(address,uint256)\": {\n                \"impacts\": [\n                    \"addPosition(address,uint256)\",\n                    \"removePosition(address,uint256)\",\n                    \"hasPosition(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"addPosition(address,uint256)\",\n                    \"removePosition(address,uint256)\"\n                ]\n            },\n            \"hasPosition(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"addPosition(address,uint256)\",\n                    \"removePosition(address,uint256)\"\n                ]\n            }\n        },\n        \"PanopticVaultAccountantTest\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"setUp()\",\n                    \"test_updatePoolsHash_success()\",\n                    \"test_updatePoolsHash_onlyOwner()\",\n                    \"test_updatePoolsHash_vaultLocked()\",\n                    \"test_lockVault_success()\",\n                    \"test_lockVault_onlyOwner()\",\n                    \"test_lockVault_permanent()\",\n                    \"test_computeNAV_invalidPools()\",\n                    \"test_computeNAV_staleOraclePrice_pool()\",\n                    \"test_computeNAV_incorrectPositionList_zeroBalance()\",\n                    \"test_computeNAV_incorrectPositionList_wrongLegsCount()\",\n                    \"test_computeNAV_basicScenario()\",\n                    \"test_computeNAV_exactCalculation_sameTokenAsUnderlying()\",\n                    \"test_computeNAV_exactCalculation_onlyUnderlyingToken()\",\n                    \"test_computeNAV_exactCalculation_withExactPremiums()\",\n                    \"test_computeNAV_exactCalculation_negativeExposureToZero()\",\n                    \"test_computeNAV_withPositions()\",\n                    \"test_computeNAV_multiplePoolsScenario()\",\n                    \"test_computeNAV_ethHandling()\",\n                    \"test_computeNAV_tokenConversion()\",\n                    \"test_computeNAV_flippedTokens()\",\n                    \"test_computeNAV_negativePnL()\",\n                    \"test_computeNAV_emptyPools()\",\n                    \"test_computeNAV_zeroBalances()\",\n                    \"test_computeNAV_maxPriceDeviationBoundary()\",\n                    \"test_computeNAV_outOfRangeCall_short()\",\n                    \"test_computeNAV_outOfRangePut_short()\",\n                    \"test_computeNAV_inRangeCall_long()\",\n                    \"test_computeNAV_inRangePut_long()\",\n                    \"test_computeNAV_multiLegPosition()\",\n                    \"test_computeNAV_staleOraclePrice_token0()\",\n                    \"test_computeNAV_staleOraclePrice_token1()\",\n                    \"test_computeNAV_exactCalculation_noPositions()\",\n                    \"test_computeNAV_exactCalculation_withPremiums()\",\n                    \"test_computeNAV_exactCalculation_singleLegPosition()\",\n                    \"test_computeNAV_priceConversion_exactRatio()\",\n                    \"test_computeNAV_negativeExposure_handledCorrectly()\",\n                    \"test_computeNAV_multiPool_exactAggregation()\",\n                    \"test_computeNAV_revert_invalidPoolsHash()\",\n                    \"test_computeNAV_revert_stalePoolPrice()\",\n                    \"test_computeNAV_revert_zeroPositionBalance()\",\n                    \"test_computeNAV_revert_incorrectLegsCount()\",\n                    \"test_computeNAV_maxPriceDeviationBoundary_exact()\",\n                    \"test_computeNAV_zeroAmounts_edgeCase()\",\n                    \"testFuzz_updatePoolsHash(address,bytes32)\",\n                    \"testFuzz_computeNAV_underlyingBalance(uint256)\",\n                    \"testFuzz_computeNAV_priceDeviationBoundary(int24)\",\n                    \"testFuzz_computeNAV_tokenBalances(uint128,uint128,uint128)\",\n                    \"test_computeNAV_straddlePosition_exactCalculation()\",\n                    \"test_computeNAV_ironCondor_fourLegPosition()\",\n                    \"test_computeNAV_multiplePositions_aggregation()\",\n                    \"test_computeNAV_largeNumbers_noOverflow()\",\n                    \"test_computeNAV_precisionTest_smallAmounts()\",\n                    \"test_computeNAV_twapCalculation_verification()\",\n                    \"test_computeNAV_priceDeviation_exactBoundary()\",\n                    \"test_computeNAV_flippedOracles_conversion()\",\n                    \"test_computeNAV_fullIntegration_realScenario()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_updatePoolsHash_success()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_updatePoolsHash_onlyOwner()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_updatePoolsHash_vaultLocked()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_lockVault_success()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_lockVault_onlyOwner()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_lockVault_permanent()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_invalidPools()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_staleOraclePrice_pool()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_incorrectPositionList_zeroBalance()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_incorrectPositionList_wrongLegsCount()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_basicScenario()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_exactCalculation_sameTokenAsUnderlying()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_exactCalculation_onlyUnderlyingToken()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_exactCalculation_withExactPremiums()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_exactCalculation_negativeExposureToZero()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_withPositions()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_multiplePoolsScenario()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_ethHandling()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_tokenConversion()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_flippedTokens()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_negativePnL()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_emptyPools()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_zeroBalances()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_maxPriceDeviationBoundary()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_outOfRangeCall_short()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_outOfRangePut_short()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_inRangeCall_long()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_inRangePut_long()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_multiLegPosition()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_staleOraclePrice_token0()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_staleOraclePrice_token1()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_exactCalculation_noPositions()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_exactCalculation_withPremiums()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_exactCalculation_singleLegPosition()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_priceConversion_exactRatio()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_negativeExposure_handledCorrectly()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_multiPool_exactAggregation()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_revert_invalidPoolsHash()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_revert_stalePoolPrice()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_revert_zeroPositionBalance()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_revert_incorrectLegsCount()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_maxPriceDeviationBoundary_exact()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_zeroAmounts_edgeCase()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"testFuzz_updatePoolsHash(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"testFuzz_computeNAV_underlyingBalance(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"testFuzz_computeNAV_priceDeviationBoundary(int24)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"testFuzz_computeNAV_tokenBalances(uint128,uint128,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_straddlePosition_exactCalculation()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_ironCondor_fourLegPosition()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_multiplePositions_aggregation()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_largeNumbers_noOverflow()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_precisionTest_smallAmounts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_twapCalculation_verification()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_priceDeviation_exactBoundary()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_flippedOracles_conversion()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_fullIntegration_realScenario()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            }\n        },\n        \"PoC\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"setUp()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_submissionValidity()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"BeforeAfter\": {},\n        \"CryticTester\": {\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"hypoVault_approve(address,uint256)\",\n                    \"hypoVault_cancelDeposit(address)\",\n                    \"hypoVault_cancelWithdrawal(address)\",\n                    \"hypoVault_executeDeposit(address,uint256)\",\n                    \"hypoVault_executeWithdrawal(address,uint256)\",\n                    \"hypoVault_fulfillDeposits(uint256,bytes)\",\n                    \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n                    \"hypoVault_manage(address[],bytes[],uint256[])\",\n                    \"hypoVault_manage(address,bytes,uint256)\",\n                    \"hypoVault_multicall(bytes[])\",\n                    \"hypoVault_renounceOwnership()\",\n                    \"hypoVault_requestDeposit(uint128)\",\n                    \"hypoVault_requestWithdrawal(uint128)\",\n                    \"hypoVault_setAccountant(address)\",\n                    \"hypoVault_setFeeWallet(address)\",\n                    \"hypoVault_setManager(address)\",\n                    \"hypoVault_transfer(address,uint256)\",\n                    \"hypoVault_transferFrom(address,address,uint256)\",\n                    \"hypoVault_transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"hypoVault_approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_cancelDeposit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_cancelWithdrawal(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_executeDeposit(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_executeWithdrawal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_manage(address[],bytes[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_manage(address,bytes,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_renounceOwnership()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_requestDeposit(uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_requestWithdrawal(uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_setAccountant(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_setFeeWallet(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_setManager(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_transferOwnership(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"constructor()\": {\n                \"impacts\": [\n                    \"hypoVault_approve(address,uint256)\",\n                    \"hypoVault_cancelDeposit(address)\",\n                    \"hypoVault_cancelWithdrawal(address)\",\n                    \"hypoVault_executeDeposit(address,uint256)\",\n                    \"hypoVault_executeWithdrawal(address,uint256)\",\n                    \"hypoVault_fulfillDeposits(uint256,bytes)\",\n                    \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n                    \"hypoVault_manage(address[],bytes[],uint256[])\",\n                    \"hypoVault_manage(address,bytes,uint256)\",\n                    \"hypoVault_multicall(bytes[])\",\n                    \"hypoVault_renounceOwnership()\",\n                    \"hypoVault_requestDeposit(uint128)\",\n                    \"hypoVault_requestWithdrawal(uint128)\",\n                    \"hypoVault_setAccountant(address)\",\n                    \"hypoVault_setFeeWallet(address)\",\n                    \"hypoVault_setManager(address)\",\n                    \"hypoVault_transfer(address,uint256)\",\n                    \"hypoVault_transferFrom(address,address,uint256)\",\n                    \"hypoVault_transferOwnership(address)\",\n                    \"constructor()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\"\n                ]\n            }\n        },\n        \"CryticToFoundry\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"hypoVault_approve(address,uint256)\",\n                    \"hypoVault_cancelDeposit(address)\",\n                    \"hypoVault_cancelWithdrawal(address)\",\n                    \"hypoVault_executeDeposit(address,uint256)\",\n                    \"hypoVault_executeWithdrawal(address,uint256)\",\n                    \"hypoVault_fulfillDeposits(uint256,bytes)\",\n                    \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n                    \"hypoVault_manage(address[],bytes[],uint256[])\",\n                    \"hypoVault_manage(address,bytes,uint256)\",\n                    \"hypoVault_multicall(bytes[])\",\n                    \"hypoVault_renounceOwnership()\",\n                    \"hypoVault_requestDeposit(uint128)\",\n                    \"hypoVault_requestWithdrawal(uint128)\",\n                    \"hypoVault_setAccountant(address)\",\n                    \"hypoVault_setFeeWallet(address)\",\n                    \"hypoVault_setManager(address)\",\n                    \"hypoVault_transfer(address,uint256)\",\n                    \"hypoVault_transferFrom(address,address,uint256)\",\n                    \"hypoVault_transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"hypoVault_approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_cancelDeposit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_cancelWithdrawal(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_executeDeposit(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_executeWithdrawal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_manage(address[],bytes[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_manage(address,bytes,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_renounceOwnership()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_requestDeposit(uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_requestWithdrawal(uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_setAccountant(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_setFeeWallet(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_setManager(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_transferOwnership(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"hypoVault_approve(address,uint256)\",\n                    \"hypoVault_cancelDeposit(address)\",\n                    \"hypoVault_cancelWithdrawal(address)\",\n                    \"hypoVault_executeDeposit(address,uint256)\",\n                    \"hypoVault_executeWithdrawal(address,uint256)\",\n                    \"hypoVault_fulfillDeposits(uint256,bytes)\",\n                    \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n                    \"hypoVault_manage(address[],bytes[],uint256[])\",\n                    \"hypoVault_manage(address,bytes,uint256)\",\n                    \"hypoVault_multicall(bytes[])\",\n                    \"hypoVault_renounceOwnership()\",\n                    \"hypoVault_requestDeposit(uint128)\",\n                    \"hypoVault_requestWithdrawal(uint128)\",\n                    \"hypoVault_setAccountant(address)\",\n                    \"hypoVault_setFeeWallet(address)\",\n                    \"hypoVault_setManager(address)\",\n                    \"hypoVault_transfer(address,uint256)\",\n                    \"hypoVault_transferFrom(address,address,uint256)\",\n                    \"hypoVault_transferOwnership(address)\",\n                    \"setUp()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_crytic()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Properties\": {},\n        \"Setup\": {},\n        \"TargetFunctions\": {\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"hypoVault_approve(address,uint256)\",\n                    \"hypoVault_cancelDeposit(address)\",\n                    \"hypoVault_cancelWithdrawal(address)\",\n                    \"hypoVault_executeDeposit(address,uint256)\",\n                    \"hypoVault_executeWithdrawal(address,uint256)\",\n                    \"hypoVault_fulfillDeposits(uint256,bytes)\",\n                    \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n                    \"hypoVault_manage(address[],bytes[],uint256[])\",\n                    \"hypoVault_manage(address,bytes,uint256)\",\n                    \"hypoVault_multicall(bytes[])\",\n                    \"hypoVault_renounceOwnership()\",\n                    \"hypoVault_requestDeposit(uint128)\",\n                    \"hypoVault_requestWithdrawal(uint128)\",\n                    \"hypoVault_setAccountant(address)\",\n                    \"hypoVault_setFeeWallet(address)\",\n                    \"hypoVault_setManager(address)\",\n                    \"hypoVault_transfer(address,uint256)\",\n                    \"hypoVault_transferFrom(address,address,uint256)\",\n                    \"hypoVault_transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"hypoVault_approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_cancelDeposit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_cancelWithdrawal(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_executeDeposit(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_executeWithdrawal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_manage(address[],bytes[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_manage(address,bytes,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_renounceOwnership()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_requestDeposit(uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_requestWithdrawal(uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_setAccountant(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_setFeeWallet(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_setManager(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_transferOwnership(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            }\n        },\n        \"AdminTargets\": {},\n        \"DoomsdayTargets\": {},\n        \"HypoVaultTargets\": {\n            \"hypoVault_approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_cancelDeposit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_cancelWithdrawal(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_executeDeposit(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_executeWithdrawal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_manage(address[],bytes[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_manage(address,bytes,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_renounceOwnership()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_requestDeposit(uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_requestWithdrawal(uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_setAccountant(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_setFeeWallet(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_setManager(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_transferOwnership(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"ManagersTargets\": {\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            }\n        },\n        \"TokenTargets\": {\n            \"token_approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"token_editSupply(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"token_mint(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"token_transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"token_transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"VaultAccountantMockTargets\": {\n            \"vaultAccountantMock_setExpectedManagerInput(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"vaultAccountantMock_setExpectedVault(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"vaultAccountantMock_setNav(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        }\n    },\n    \"constructors\": {\n        \"CollateralTracker\": \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,IPoolManager)\",\n        \"PanopticPool\": \"constructor(SemiFungiblePositionManager,IPoolManager)\",\n        \"SemiFungiblePositionManager\": \"constructor(IPoolManager,uint256,uint256,uint256)\",\n        \"Ownable\": \"constructor()\",\n        \"ERC20S\": \"constructor(string,string,uint8)\",\n        \"ActorManager\": \"constructor()\",\n        \"ERC20\": \"constructor(string,string,uint8)\",\n        \"MockERC20\": \"constructor(string,string,uint8)\",\n        \"HypoVault\": \"constructor(address,address,IVaultAccountant,uint256)\",\n        \"Token\": \"constructor(string,string,uint8)\",\n        \"PanopticVaultAccountant\": \"constructor()\",\n        \"MockERC20Partial\": \"constructor(string,string)\",\n        \"MockV3CompatibleOracle\": \"constructor()\",\n        \"MockPanopticPool\": \"constructor()\",\n        \"BeforeAfter\": \"constructor()\",\n        \"CryticTester\": \"constructor()\",\n        \"CryticToFoundry\": \"constructor()\",\n        \"Properties\": \"constructor()\",\n        \"Setup\": \"constructor()\",\n        \"TargetFunctions\": \"constructor()\",\n        \"AdminTargets\": \"constructor()\",\n        \"DoomsdayTargets\": \"constructor()\",\n        \"HypoVaultTargets\": \"constructor()\",\n        \"ManagersTargets\": \"constructor()\",\n        \"TokenTargets\": \"constructor()\",\n        \"VaultAccountantMockTargets\": \"constructor()\"\n    },\n    \"have_external_calls\": {\n        \"FoundryAsserts\": [\n            \"failed()\"\n        ],\n        \"StdAssertions\": [\n            \"failed()\"\n        ],\n        \"Test\": [\n            \"failed()\"\n        ],\n        \"CollateralTracker\": [\n            \"transferFrom(address,address,uint256)\",\n            \"withdraw(uint256,address,address,uint256[],bool)\",\n            \"name()\",\n            \"unlockCallback(bytes)\",\n            \"maxWithdraw(address)\",\n            \"refund(address,address,int256)\",\n            \"withdraw(uint256,address,address)\",\n            \"multicall(bytes[])\",\n            \"transfer(address,uint256)\",\n            \"convertToAssets(uint256)\",\n            \"maxRedeem(address)\",\n            \"decimals()\",\n            \"previewDeposit(uint256)\",\n            \"symbol()\",\n            \"maxMint(address)\",\n            \"previewRedeem(uint256)\",\n            \"mint(uint256,address)\",\n            \"convertToShares(uint256)\",\n            \"redeem(uint256,address,address)\",\n            \"deposit(uint256,address)\"\n        ],\n        \"PanopticPool\": [\n            \"assertMinCollateralValues(uint256,uint256)\",\n            \"validateCollateralWithdrawable(address,uint256[],bool)\",\n            \"initialize()\",\n            \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n            \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n            \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n            \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n            \"getOracleTicks()\",\n            \"multicall(bytes[])\",\n            \"positionData(address,uint256)\",\n            \"pokeMedian()\"\n        ],\n        \"SemiFungiblePositionManager\": [\n            \"multicall(bytes[])\",\n            \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n            \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n            \"getPoolId((address,Currency,uint24,int24,address))\"\n        ],\n        \"Multicall\": [\n            \"multicall(bytes[])\"\n        ],\n        \"InteractionHelper\": [\n            \"computeDecimals(address)\",\n            \"computeSymbol(address,string)\",\n            \"computeName(address,address,bool,uint24,string)\"\n        ],\n        \"PanopticMath\": [\n            \"computeInternalMedian(uint256,uint256,uint256,uint256,address)\",\n            \"safeERC20Symbol(address)\",\n            \"getOracleTicks(address,uint256)\"\n        ],\n        \"ERC1155\": [\n            \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n            \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"\n        ],\n        \"PositionBalanceLibrary\": [\n            \"unpackAll(uint256)\"\n        ],\n        \"HypoVault\": [\n            \"manage(address[],bytes[],uint256[])\",\n            \"manage(address,bytes,uint256)\",\n            \"executeWithdrawal(address,uint256)\",\n            \"fulfillDeposits(uint256,bytes)\",\n            \"requestDeposit(uint128)\",\n            \"cancelDeposit(address)\",\n            \"executeDeposit(address,uint256)\",\n            \"multicall(bytes[])\",\n            \"fulfillWithdrawals(uint256,uint256,bytes)\"\n        ],\n        \"HypoVaultTest\": [\n            \"test_partial_deposit_share_calculation()\",\n            \"test_onlyOwner_functions()\",\n            \"test_execute_from_wrong_epoch()\",\n            \"test_vaultParameters()\",\n            \"test_withdrawal_with_profit_performance_fee()\",\n            \"test_withdrawal_with_loss_no_performance_fee()\",\n            \"test_epoch_transitions_deposits()\",\n            \"test_sequential_deposit_withdrawal_cycles()\",\n            \"test_partial_withdrawal_exact_numbers()\",\n            \"test_reserved_withdrawal_assets_tracking()\",\n            \"test_cancel_unfulfilled_deposit()\",\n            \"test_deposit_multiple_partial_fulfillments()\",\n            \"test_complex_multi_epoch_scenario()\",\n            \"test_withdrawal_partial()\",\n            \"test_manager_input_validation()\",\n            \"test_cancel_unfulfilled_withdrawal()\",\n            \"test_deposit_full_multiple_users_same_epoch()\",\n            \"test_deposit_full_single_user_epoch0()\",\n            \"setUp()\",\n            \"test_withdrawal_with_multiple_users()\",\n            \"test_large_numbers_precision()\",\n            \"test_exact_withdrawal_calculation()\",\n            \"test_basis_calculation_precision()\",\n            \"test_deposit_full_single_user_later_epoch()\",\n            \"test_epoch_transitions_withdrawals()\",\n            \"test_deposit_partial_multiple_users()\",\n            \"test_withdrawal_scenario_verification()\",\n            \"test_onlyManager_functions()\",\n            \"test_deposit_partial_single_user()\",\n            \"test_multiple_users_partial_deposit_exact_numbers()\",\n            \"test_multiple_cancellations()\",\n            \"test_total_supply_updates()\",\n            \"test_withdrawal_not_fulfillable()\",\n            \"test_mixed_partial_fulfillments_across_epochs()\",\n            \"test_zero_amount_deposit()\",\n            \"test_partial_deposit_exact_numbers()\",\n            \"failed()\",\n            \"test_cancel_withdrawal_restores_basis()\"\n        ],\n        \"PanopticVaultAccountantTest\": [\n            \"test_computeNAV_revert_incorrectLegsCount()\",\n            \"test_computeNAV_revert_zeroPositionBalance()\",\n            \"test_computeNAV_twapCalculation_verification()\",\n            \"test_computeNAV_revert_stalePoolPrice()\",\n            \"test_lockVault_permanent()\",\n            \"test_computeNAV_incorrectPositionList_wrongLegsCount()\",\n            \"test_computeNAV_exactCalculation_sameTokenAsUnderlying()\",\n            \"test_computeNAV_exactCalculation_onlyUnderlyingToken()\",\n            \"test_computeNAV_fullIntegration_realScenario()\",\n            \"test_computeNAV_staleOraclePrice_token1()\",\n            \"test_lockVault_success()\",\n            \"test_computeNAV_priceConversion_exactRatio()\",\n            \"testFuzz_computeNAV_tokenBalances(uint128,uint128,uint128)\",\n            \"test_computeNAV_multiPool_exactAggregation()\",\n            \"setUp()\",\n            \"test_computeNAV_maxPriceDeviationBoundary_exact()\",\n            \"test_computeNAV_basicScenario()\",\n            \"test_computeNAV_staleOraclePrice_token0()\",\n            \"test_computeNAV_tokenConversion()\",\n            \"test_computeNAV_outOfRangeCall_short()\",\n            \"test_computeNAV_outOfRangePut_short()\",\n            \"test_computeNAV_negativeExposure_handledCorrectly()\",\n            \"test_computeNAV_exactCalculation_noPositions()\",\n            \"test_computeNAV_exactCalculation_withPremiums()\",\n            \"test_computeNAV_invalidPools()\",\n            \"test_updatePoolsHash_success()\",\n            \"test_computeNAV_inRangeCall_long()\",\n            \"test_computeNAV_emptyPools()\",\n            \"test_computeNAV_largeNumbers_noOverflow()\",\n            \"test_lockVault_onlyOwner()\",\n            \"test_computeNAV_flippedOracles_conversion()\",\n            \"test_updatePoolsHash_vaultLocked()\",\n            \"test_computeNAV_zeroBalances()\",\n            \"test_updatePoolsHash_onlyOwner()\",\n            \"test_computeNAV_negativePnL()\",\n            \"test_computeNAV_exactCalculation_negativeExposureToZero()\",\n            \"testFuzz_updatePoolsHash(address,bytes32)\",\n            \"test_computeNAV_exactCalculation_withExactPremiums()\",\n            \"test_computeNAV_ironCondor_fourLegPosition()\",\n            \"test_computeNAV_exactCalculation_singleLegPosition()\",\n            \"testFuzz_computeNAV_priceDeviationBoundary(int24)\",\n            \"test_computeNAV_ethHandling()\",\n            \"test_computeNAV_precisionTest_smallAmounts()\",\n            \"test_computeNAV_zeroAmounts_edgeCase()\",\n            \"test_computeNAV_multiLegPosition()\",\n            \"test_computeNAV_incorrectPositionList_zeroBalance()\",\n            \"test_computeNAV_revert_invalidPoolsHash()\",\n            \"testFuzz_computeNAV_underlyingBalance(uint256)\",\n            \"test_computeNAV_straddlePosition_exactCalculation()\",\n            \"test_computeNAV_withPositions()\",\n            \"test_computeNAV_inRangePut_long()\",\n            \"test_computeNAV_multiplePositions_aggregation()\",\n            \"test_computeNAV_staleOraclePrice_pool()\",\n            \"test_computeNAV_flippedTokens()\",\n            \"test_computeNAV_multiplePoolsScenario()\",\n            \"test_computeNAV_priceDeviation_exactBoundary()\",\n            \"failed()\",\n            \"test_computeNAV_maxPriceDeviationBoundary()\"\n        ],\n        \"PoC\": [\n            \"failed()\",\n            \"setUp()\"\n        ],\n        \"CryticTester\": [\n            \"hypoVault_transferFrom(address,address,uint256)\",\n            \"hypoVault_multicall(bytes[])\",\n            \"switch_asset(uint256)\",\n            \"hypoVault_manage(address,bytes,uint256)\",\n            \"hypoVault_setAccountant(address)\",\n            \"switchActor(uint256)\",\n            \"hypoVault_manage(address[],bytes[],uint256[])\",\n            \"hypoVault_requestWithdrawal(uint128)\",\n            \"asset_mint(address,uint128)\",\n            \"asset_approve(address,uint128)\",\n            \"hypoVault_setFeeWallet(address)\",\n            \"add_new_asset(uint8)\",\n            \"hypoVault_requestDeposit(uint128)\",\n            \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n            \"constructor()\",\n            \"hypoVault_fulfillDeposits(uint256,bytes)\",\n            \"hypoVault_approve(address,uint256)\",\n            \"hypoVault_executeDeposit(address,uint256)\",\n            \"hypoVault_setManager(address)\",\n            \"hypoVault_cancelWithdrawal(address)\",\n            \"hypoVault_transferOwnership(address)\",\n            \"hypoVault_renounceOwnership()\",\n            \"hypoVault_transfer(address,uint256)\",\n            \"hypoVault_cancelDeposit(address)\",\n            \"hypoVault_executeWithdrawal(address,uint256)\"\n        ],\n        \"CryticToFoundry\": [\n            \"hypoVault_transferFrom(address,address,uint256)\",\n            \"hypoVault_multicall(bytes[])\",\n            \"switch_asset(uint256)\",\n            \"hypoVault_manage(address,bytes,uint256)\",\n            \"hypoVault_setAccountant(address)\",\n            \"switchActor(uint256)\",\n            \"hypoVault_manage(address[],bytes[],uint256[])\",\n            \"setUp()\",\n            \"hypoVault_requestWithdrawal(uint128)\",\n            \"asset_mint(address,uint128)\",\n            \"asset_approve(address,uint128)\",\n            \"hypoVault_setFeeWallet(address)\",\n            \"add_new_asset(uint8)\",\n            \"hypoVault_requestDeposit(uint128)\",\n            \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n            \"hypoVault_fulfillDeposits(uint256,bytes)\",\n            \"hypoVault_approve(address,uint256)\",\n            \"hypoVault_executeDeposit(address,uint256)\",\n            \"hypoVault_setManager(address)\",\n            \"failed()\",\n            \"hypoVault_cancelWithdrawal(address)\",\n            \"hypoVault_transferOwnership(address)\",\n            \"hypoVault_renounceOwnership()\",\n            \"hypoVault_transfer(address,uint256)\",\n            \"hypoVault_cancelDeposit(address)\",\n            \"hypoVault_executeWithdrawal(address,uint256)\"\n        ],\n        \"TargetFunctions\": [\n            \"hypoVault_transferFrom(address,address,uint256)\",\n            \"hypoVault_multicall(bytes[])\",\n            \"switch_asset(uint256)\",\n            \"hypoVault_manage(address,bytes,uint256)\",\n            \"hypoVault_setAccountant(address)\",\n            \"switchActor(uint256)\",\n            \"hypoVault_manage(address[],bytes[],uint256[])\",\n            \"hypoVault_requestWithdrawal(uint128)\",\n            \"asset_mint(address,uint128)\",\n            \"asset_approve(address,uint128)\",\n            \"hypoVault_setFeeWallet(address)\",\n            \"add_new_asset(uint8)\",\n            \"hypoVault_requestDeposit(uint128)\",\n            \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n            \"hypoVault_fulfillDeposits(uint256,bytes)\",\n            \"hypoVault_approve(address,uint256)\",\n            \"hypoVault_executeDeposit(address,uint256)\",\n            \"hypoVault_setManager(address)\",\n            \"hypoVault_cancelWithdrawal(address)\",\n            \"hypoVault_transferOwnership(address)\",\n            \"hypoVault_renounceOwnership()\",\n            \"hypoVault_transfer(address,uint256)\",\n            \"hypoVault_cancelDeposit(address)\",\n            \"hypoVault_executeWithdrawal(address,uint256)\"\n        ],\n        \"HypoVaultTargets\": [\n            \"hypoVault_transferFrom(address,address,uint256)\",\n            \"hypoVault_multicall(bytes[])\",\n            \"hypoVault_manage(address,bytes,uint256)\",\n            \"hypoVault_setAccountant(address)\",\n            \"hypoVault_manage(address[],bytes[],uint256[])\",\n            \"hypoVault_requestWithdrawal(uint128)\",\n            \"hypoVault_setFeeWallet(address)\",\n            \"hypoVault_requestDeposit(uint128)\",\n            \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n            \"hypoVault_fulfillDeposits(uint256,bytes)\",\n            \"hypoVault_approve(address,uint256)\",\n            \"hypoVault_executeDeposit(address,uint256)\",\n            \"hypoVault_setManager(address)\",\n            \"hypoVault_cancelWithdrawal(address)\",\n            \"hypoVault_transferOwnership(address)\",\n            \"hypoVault_renounceOwnership()\",\n            \"hypoVault_transfer(address,uint256)\",\n            \"hypoVault_cancelDeposit(address)\",\n            \"hypoVault_executeWithdrawal(address,uint256)\"\n        ],\n        \"ManagersTargets\": [\n            \"add_new_asset(uint8)\",\n            \"asset_mint(address,uint128)\",\n            \"switch_asset(uint256)\",\n            \"switchActor(uint256)\",\n            \"asset_approve(address,uint128)\"\n        ],\n        \"TokenTargets\": [\n            \"token_transferFrom(address,address,uint256)\",\n            \"token_mint(address,uint256)\",\n            \"token_editSupply(uint256)\",\n            \"token_transfer(address,uint256)\",\n            \"token_approve(address,uint256)\"\n        ],\n        \"VaultAccountantMockTargets\": [\n            \"vaultAccountantMock_setNav(uint256)\",\n            \"vaultAccountantMock_setExpectedManagerInput(bytes)\",\n            \"vaultAccountantMock_setExpectedVault(address)\"\n        ]\n    },\n    \"use_balance\": {\n        \"HypoVault\": [\n            \"manage(address[],bytes[],uint256[])\",\n            \"manage(address,bytes,uint256)\"\n        ]\n    },\n    \"solc_versions\": [\n        \"0.8.29\"\n    ],\n    \"with_fallback\": [],\n    \"with_receive\": []\n}", "markdown": "{\n    \"payable\": {\n        \"IMulticall3\": [\n            \"aggregate((address,bytes)[])\",\n            \"aggregate3((address,bool,bytes)[])\",\n            \"aggregate3Value((address,bool,uint256,bytes)[])\",\n            \"blockAndAggregate((address,bytes)[])\",\n            \"tryAggregate(bool,(address,bytes)[])\",\n            \"tryBlockAndAggregate(bool,(address,bytes)[])\"\n        ],\n        \"CollateralTracker\": [\n            \"deposit(uint256,address)\",\n            \"mint(uint256,address)\",\n            \"settleLiquidation(address,address,int256)\"\n        ],\n        \"PanopticPool\": [\n            \"liquidate(uint256[],address,uint256[])\"\n        ],\n        \"IPoolManager\": [\n            \"settle()\",\n            \"settleFor(address)\"\n        ],\n        \"CryticTester\": [\n            \"constructor()\"\n        ]\n    },\n    \"timestamp\": {\n        \"PanopticPool\": [\n            \"initialize()\",\n            \"validateCollateralWithdrawable(address,uint256[],bool)\",\n            \"pokeMedian()\",\n            \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n            \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n            \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n            \"getOracleTicks()\"\n        ],\n        \"PanopticMath\": [\n            \"getOracleTicks(address,uint256)\",\n            \"computeInternalMedian(uint256,uint256,uint256,uint256,address)\"\n        ],\n        \"ERC20\": [\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n        ],\n        \"MockERC20\": [\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n        ],\n        \"MockV3CompatibleOracle\": [\n            \"observations(uint256)\"\n        ]\n    },\n    \"block_number\": {},\n    \"msg_sender\": {\n        \"CollateralTracker\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\",\n            \"unlockCallback(bytes)\",\n            \"deposit(uint256,address)\",\n            \"mint(uint256,address)\",\n            \"withdraw(uint256,address,address)\",\n            \"withdraw(uint256,address,address,uint256[],bool)\",\n            \"redeem(uint256,address,address)\",\n            \"delegate(address)\",\n            \"revoke(address)\",\n            \"settleLiquidation(address,address,int256)\",\n            \"refund(address,address,int256)\",\n            \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n            \"exercise(address,int128,int128,int128,int128)\"\n        ],\n        \"PanopticPool\": [\n            \"assertMinCollateralValues(uint256,uint256)\",\n            \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n            \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n            \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n            \"forceExercise(address,uint256,uint256[],uint256[],uint256)\"\n        ],\n        \"SemiFungiblePositionManager\": [\n            \"setApprovalForAll(address,bool)\",\n            \"unlockCallback(bytes)\",\n            \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n            \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\"\n        ],\n        \"ERC1155\": [\n            \"setApprovalForAll(address,bool)\",\n            \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n            \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"\n        ],\n        \"ERC20Minimal\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"Ownable\": [\n            \"renounceOwnership()\",\n            \"transferOwnership(address)\"\n        ],\n        \"ERC20S\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"ERC20\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"MockERC20\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"HypoVault\": [\n            \"renounceOwnership()\",\n            \"transferOwnership(address)\",\n            \"approve(address,uint256)\",\n            \"setManager(address)\",\n            \"setAccountant(address)\",\n            \"setFeeWallet(address)\",\n            \"requestDeposit(uint128)\",\n            \"requestWithdrawal(uint128)\",\n            \"cancelDeposit(address)\",\n            \"cancelWithdrawal(address)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\",\n            \"manage(address,bytes,uint256)\",\n            \"manage(address[],bytes[],uint256[])\",\n            \"fulfillDeposits(uint256,bytes)\",\n            \"fulfillWithdrawals(uint256,uint256,bytes)\"\n        ],\n        \"Token\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"PanopticVaultAccountant\": [\n            \"renounceOwnership()\",\n            \"transferOwnership(address)\",\n            \"updatePoolsHash(address,bytes32)\",\n            \"lockVault(address)\"\n        ],\n        \"CryticTester\": [\n            \"hypoVault_fulfillDeposits(uint256,bytes)\"\n        ],\n        \"CryticToFoundry\": [\n            \"hypoVault_fulfillDeposits(uint256,bytes)\"\n        ],\n        \"TargetFunctions\": [\n            \"hypoVault_fulfillDeposits(uint256,bytes)\"\n        ],\n        \"HypoVaultTargets\": [\n            \"hypoVault_fulfillDeposits(uint256,bytes)\"\n        ]\n    },\n    \"msg_gas\": {},\n    \"assert\": {\n        \"CryticTester\": [\n            \"hypoVault_fulfillDeposits(uint256,bytes)\"\n        ]\n    },\n    \"constant_functions\": {\n        \"FoundryAsserts\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\"\n        ],\n        \"StdAssertions\": [\n            \"failed()\"\n        ],\n        \"stdError\": [\n            \"assertionError()\",\n            \"arithmeticError()\",\n            \"divisionError()\",\n            \"enumConversionError()\",\n            \"encodeStorageError()\",\n            \"popError()\",\n            \"indexOOBError()\",\n            \"memOverflowError()\",\n            \"zeroVarError()\"\n        ],\n        \"StdInvariant\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\"\n        ],\n        \"Test\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\"\n        ],\n        \"VmSafe\": [\n            \"deriveKey(string,uint32)\",\n            \"deriveKey(string,string,uint32)\",\n            \"deriveKey(string,uint32,string)\",\n            \"deriveKey(string,string,uint32,string)\",\n            \"publicKeyP256(uint256)\",\n            \"signCompact(uint256,bytes32)\",\n            \"signCompact(bytes32)\",\n            \"signCompact(address,bytes32)\",\n            \"signP256(uint256,bytes32)\",\n            \"sign(uint256,bytes32)\",\n            \"sign(bytes32)\",\n            \"sign(address,bytes32)\",\n            \"envAddress(string)\",\n            \"envAddress(string,string)\",\n            \"envBool(string)\",\n            \"envBool(string,string)\",\n            \"envBytes32(string)\",\n            \"envBytes32(string,string)\",\n            \"envBytes(string)\",\n            \"envBytes(string,string)\",\n            \"envExists(string)\",\n            \"envInt(string)\",\n            \"envInt(string,string)\",\n            \"envOr(string,bool)\",\n            \"envOr(string,uint256)\",\n            \"envOr(string,string,address[])\",\n            \"envOr(string,string,bytes32[])\",\n            \"envOr(string,string,string[])\",\n            \"envOr(string,string,bytes[])\",\n            \"envOr(string,int256)\",\n            \"envOr(string,address)\",\n            \"envOr(string,bytes32)\",\n            \"envOr(string,string)\",\n            \"envOr(string,bytes)\",\n            \"envOr(string,string,bool[])\",\n            \"envOr(string,string,uint256[])\",\n            \"envOr(string,string,int256[])\",\n            \"envString(string)\",\n            \"envString(string,string)\",\n            \"envUint(string)\",\n            \"envUint(string,string)\",\n            \"isContext(uint8)\",\n            \"addr(uint256)\",\n            \"getBlobBaseFee()\",\n            \"getBlockNumber()\",\n            \"getBlockTimestamp()\",\n            \"getNonce(address)\",\n            \"getStateDiff()\",\n            \"getStateDiffJson()\",\n            \"lastCallGas()\",\n            \"load(address,bytes32)\",\n            \"exists(string)\",\n            \"fsMetadata(string)\",\n            \"getArtifactPathByCode(bytes)\",\n            \"getArtifactPathByDeployedCode(bytes)\",\n            \"getBroadcast(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64)\",\n            \"getCode(string)\",\n            \"getDeployedCode(string)\",\n            \"getDeployment(string)\",\n            \"getDeployment(string,uint64)\",\n            \"getDeployments(string,uint64)\",\n            \"isDir(string)\",\n            \"isFile(string)\",\n            \"projectRoot()\",\n            \"readDir(string)\",\n            \"readDir(string,uint64)\",\n            \"readDir(string,uint64,bool)\",\n            \"readFile(string)\",\n            \"readFileBinary(string)\",\n            \"readLine(string)\",\n            \"readLink(string)\",\n            \"unixTime()\",\n            \"keyExistsJson(string,string)\",\n            \"parseJsonAddress(string,string)\",\n            \"parseJsonAddressArray(string,string)\",\n            \"parseJsonBool(string,string)\",\n            \"parseJsonBoolArray(string,string)\",\n            \"parseJsonBytes(string,string)\",\n            \"parseJsonBytes32(string,string)\",\n            \"parseJsonBytes32Array(string,string)\",\n            \"parseJsonBytesArray(string,string)\",\n            \"parseJsonInt(string,string)\",\n            \"parseJsonIntArray(string,string)\",\n            \"parseJsonKeys(string,string)\",\n            \"parseJsonString(string,string)\",\n            \"parseJsonStringArray(string,string)\",\n            \"parseJsonTypeArray(string,string,string)\",\n            \"parseJsonType(string,string)\",\n            \"parseJsonType(string,string,string)\",\n            \"parseJsonUint(string,string)\",\n            \"parseJsonUintArray(string,string)\",\n            \"parseJson(string)\",\n            \"parseJson(string,string)\",\n            \"serializeJsonType(string,bytes)\",\n            \"keyExists(string,string)\",\n            \"indexOf(string,string)\",\n            \"parseAddress(string)\",\n            \"parseBool(string)\",\n            \"parseBytes(string)\",\n            \"parseBytes32(string)\",\n            \"parseInt(string)\",\n            \"parseUint(string)\",\n            \"replace(string,string,string)\",\n            \"split(string,string)\",\n            \"toLowercase(string)\",\n            \"toString(address)\",\n            \"toString(bytes)\",\n            \"toString(bytes32)\",\n            \"toString(bool)\",\n            \"toString(uint256)\",\n            \"toString(int256)\",\n            \"toUppercase(string)\",\n            \"trim(string)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(int256,int256,uint256)\",\n            \"assertApproxEqAbs(int256,int256,uint256,string)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqRel(uint256,uint256,uint256)\",\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\",\n            \"assertApproxEqRel(int256,int256,uint256)\",\n            \"assertApproxEqRel(int256,int256,uint256,string)\",\n            \"assertEqDecimal(uint256,uint256,uint256)\",\n            \"assertEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertEqDecimal(int256,int256,uint256)\",\n            \"assertEqDecimal(int256,int256,uint256,string)\",\n            \"assertEq(bool,bool)\",\n            \"assertEq(bool,bool,string)\",\n            \"assertEq(string,string)\",\n            \"assertEq(string,string,string)\",\n            \"assertEq(bytes,bytes)\",\n            \"assertEq(bytes,bytes,string)\",\n            \"assertEq(bool[],bool[])\",\n            \"assertEq(bool[],bool[],string)\",\n            \"assertEq(uint256[],uint256[])\",\n            \"assertEq(uint256[],uint256[],string)\",\n            \"assertEq(int256[],int256[])\",\n            \"assertEq(int256[],int256[],string)\",\n            \"assertEq(uint256,uint256)\",\n            \"assertEq(address[],address[])\",\n            \"assertEq(address[],address[],string)\",\n            \"assertEq(bytes32[],bytes32[])\",\n            \"assertEq(bytes32[],bytes32[],string)\",\n            \"assertEq(string[],string[])\",\n            \"assertEq(string[],string[],string)\",\n            \"assertEq(bytes[],bytes[])\",\n            \"assertEq(bytes[],bytes[],string)\",\n            \"assertEq(uint256,uint256,string)\",\n            \"assertEq(int256,int256)\",\n            \"assertEq(int256,int256,string)\",\n            \"assertEq(address,address)\",\n            \"assertEq(address,address,string)\",\n            \"assertEq(bytes32,bytes32)\",\n            \"assertEq(bytes32,bytes32,string)\",\n            \"assertFalse(bool)\",\n            \"assertFalse(bool,string)\",\n            \"assertGeDecimal(uint256,uint256,uint256)\",\n            \"assertGeDecimal(uint256,uint256,uint256,string)\",\n            \"assertGeDecimal(int256,int256,uint256)\",\n            \"assertGeDecimal(int256,int256,uint256,string)\",\n            \"assertGe(uint256,uint256)\",\n            \"assertGe(uint256,uint256,string)\",\n            \"assertGe(int256,int256)\",\n            \"assertGe(int256,int256,string)\",\n            \"assertGtDecimal(uint256,uint256,uint256)\",\n            \"assertGtDecimal(uint256,uint256,uint256,string)\",\n            \"assertGtDecimal(int256,int256,uint256)\",\n            \"assertGtDecimal(int256,int256,uint256,string)\",\n            \"assertGt(uint256,uint256)\",\n            \"assertGt(uint256,uint256,string)\",\n            \"assertGt(int256,int256)\",\n            \"assertGt(int256,int256,string)\",\n            \"assertLeDecimal(uint256,uint256,uint256)\",\n            \"assertLeDecimal(uint256,uint256,uint256,string)\",\n            \"assertLeDecimal(int256,int256,uint256)\",\n            \"assertLeDecimal(int256,int256,uint256,string)\",\n            \"assertLe(uint256,uint256)\",\n            \"assertLe(uint256,uint256,string)\",\n            \"assertLe(int256,int256)\",\n            \"assertLe(int256,int256,string)\",\n            \"assertLtDecimal(uint256,uint256,uint256)\",\n            \"assertLtDecimal(uint256,uint256,uint256,string)\",\n            \"assertLtDecimal(int256,int256,uint256)\",\n            \"assertLtDecimal(int256,int256,uint256,string)\",\n            \"assertLt(uint256,uint256)\",\n            \"assertLt(uint256,uint256,string)\",\n            \"assertLt(int256,int256)\",\n            \"assertLt(int256,int256,string)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertNotEqDecimal(int256,int256,uint256)\",\n            \"assertNotEqDecimal(int256,int256,uint256,string)\",\n            \"assertNotEq(bool,bool)\",\n            \"assertNotEq(bool,bool,string)\",\n            \"assertNotEq(string,string)\",\n            \"assertNotEq(string,string,string)\",\n            \"assertNotEq(bytes,bytes)\",\n            \"assertNotEq(bytes,bytes,string)\",\n            \"assertNotEq(bool[],bool[])\",\n            \"assertNotEq(bool[],bool[],string)\",\n            \"assertNotEq(uint256[],uint256[])\",\n            \"assertNotEq(uint256[],uint256[],string)\",\n            \"assertNotEq(int256[],int256[])\",\n            \"assertNotEq(int256[],int256[],string)\",\n            \"assertNotEq(uint256,uint256)\",\n            \"assertNotEq(address[],address[])\",\n            \"assertNotEq(address[],address[],string)\",\n            \"assertNotEq(bytes32[],bytes32[])\",\n            \"assertNotEq(bytes32[],bytes32[],string)\",\n            \"assertNotEq(string[],string[])\",\n            \"assertNotEq(string[],string[],string)\",\n            \"assertNotEq(bytes[],bytes[])\",\n            \"assertNotEq(bytes[],bytes[],string)\",\n            \"assertNotEq(uint256,uint256,string)\",\n            \"assertNotEq(int256,int256)\",\n            \"assertNotEq(int256,int256,string)\",\n            \"assertNotEq(address,address)\",\n            \"assertNotEq(address,address,string)\",\n            \"assertNotEq(bytes32,bytes32)\",\n            \"assertNotEq(bytes32,bytes32,string)\",\n            \"assertTrue(bool)\",\n            \"assertTrue(bool,string)\",\n            \"assume(bool)\",\n            \"assumeNoRevert()\",\n            \"assumeNoRevert((address,bool,bytes))\",\n            \"assumeNoRevert((address,bool,bytes)[])\",\n            \"breakpoint(string)\",\n            \"breakpoint(string,bool)\",\n            \"foundryVersionAtLeast(string)\",\n            \"foundryVersionCmp(string)\",\n            \"getChain(string)\",\n            \"getChain(uint256)\",\n            \"getFoundryVersion()\",\n            \"rpcUrl(string)\",\n            \"rpcUrlStructs()\",\n            \"rpcUrls()\",\n            \"keyExistsToml(string,string)\",\n            \"parseTomlAddress(string,string)\",\n            \"parseTomlAddressArray(string,string)\",\n            \"parseTomlBool(string,string)\",\n            \"parseTomlBoolArray(string,string)\",\n            \"parseTomlBytes(string,string)\",\n            \"parseTomlBytes32(string,string)\",\n            \"parseTomlBytes32Array(string,string)\",\n            \"parseTomlBytesArray(string,string)\",\n            \"parseTomlInt(string,string)\",\n            \"parseTomlIntArray(string,string)\",\n            \"parseTomlKeys(string,string)\",\n            \"parseTomlString(string,string)\",\n            \"parseTomlStringArray(string,string)\",\n            \"parseTomlTypeArray(string,string,string)\",\n            \"parseTomlType(string,string)\",\n            \"parseTomlType(string,string,string)\",\n            \"parseTomlUint(string,string)\",\n            \"parseTomlUintArray(string,string)\",\n            \"parseToml(string)\",\n            \"parseToml(string,string)\",\n            \"computeCreate2Address(bytes32,bytes32,address)\",\n            \"computeCreate2Address(bytes32,bytes32)\",\n            \"computeCreateAddress(address,uint256)\",\n            \"ensNamehash(string)\",\n            \"getLabel(address)\",\n            \"pauseTracing()\",\n            \"randomBool()\",\n            \"randomBytes(uint256)\",\n            \"randomBytes4()\",\n            \"randomBytes8()\",\n            \"randomInt()\",\n            \"randomInt(uint256)\",\n            \"randomUint(uint256)\",\n            \"resumeTracing()\",\n            \"toBase64URL(bytes)\",\n            \"toBase64URL(string)\",\n            \"toBase64(bytes)\",\n            \"toBase64(string)\"\n        ],\n        \"Vm\": [\n            \"deriveKey(string,uint32)\",\n            \"deriveKey(string,string,uint32)\",\n            \"deriveKey(string,uint32,string)\",\n            \"deriveKey(string,string,uint32,string)\",\n            \"publicKeyP256(uint256)\",\n            \"signCompact(uint256,bytes32)\",\n            \"signCompact(bytes32)\",\n            \"signCompact(address,bytes32)\",\n            \"signP256(uint256,bytes32)\",\n            \"sign(uint256,bytes32)\",\n            \"sign(bytes32)\",\n            \"sign(address,bytes32)\",\n            \"envAddress(string)\",\n            \"envAddress(string,string)\",\n            \"envBool(string)\",\n            \"envBool(string,string)\",\n            \"envBytes32(string)\",\n            \"envBytes32(string,string)\",\n            \"envBytes(string)\",\n            \"envBytes(string,string)\",\n            \"envExists(string)\",\n            \"envInt(string)\",\n            \"envInt(string,string)\",\n            \"envOr(string,bool)\",\n            \"envOr(string,uint256)\",\n            \"envOr(string,string,address[])\",\n            \"envOr(string,string,bytes32[])\",\n            \"envOr(string,string,string[])\",\n            \"envOr(string,string,bytes[])\",\n            \"envOr(string,int256)\",\n            \"envOr(string,address)\",\n            \"envOr(string,bytes32)\",\n            \"envOr(string,string)\",\n            \"envOr(string,bytes)\",\n            \"envOr(string,string,bool[])\",\n            \"envOr(string,string,uint256[])\",\n            \"envOr(string,string,int256[])\",\n            \"envString(string)\",\n            \"envString(string,string)\",\n            \"envUint(string)\",\n            \"envUint(string,string)\",\n            \"isContext(uint8)\",\n            \"addr(uint256)\",\n            \"getBlobBaseFee()\",\n            \"getBlockNumber()\",\n            \"getBlockTimestamp()\",\n            \"getNonce(address)\",\n            \"getStateDiff()\",\n            \"getStateDiffJson()\",\n            \"lastCallGas()\",\n            \"load(address,bytes32)\",\n            \"exists(string)\",\n            \"fsMetadata(string)\",\n            \"getArtifactPathByCode(bytes)\",\n            \"getArtifactPathByDeployedCode(bytes)\",\n            \"getBroadcast(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64)\",\n            \"getCode(string)\",\n            \"getDeployedCode(string)\",\n            \"getDeployment(string)\",\n            \"getDeployment(string,uint64)\",\n            \"getDeployments(string,uint64)\",\n            \"isDir(string)\",\n            \"isFile(string)\",\n            \"projectRoot()\",\n            \"readDir(string)\",\n            \"readDir(string,uint64)\",\n            \"readDir(string,uint64,bool)\",\n            \"readFile(string)\",\n            \"readFileBinary(string)\",\n            \"readLine(string)\",\n            \"readLink(string)\",\n            \"unixTime()\",\n            \"keyExistsJson(string,string)\",\n            \"parseJsonAddress(string,string)\",\n            \"parseJsonAddressArray(string,string)\",\n            \"parseJsonBool(string,string)\",\n            \"parseJsonBoolArray(string,string)\",\n            \"parseJsonBytes(string,string)\",\n            \"parseJsonBytes32(string,string)\",\n            \"parseJsonBytes32Array(string,string)\",\n            \"parseJsonBytesArray(string,string)\",\n            \"parseJsonInt(string,string)\",\n            \"parseJsonIntArray(string,string)\",\n            \"parseJsonKeys(string,string)\",\n            \"parseJsonString(string,string)\",\n            \"parseJsonStringArray(string,string)\",\n            \"parseJsonTypeArray(string,string,string)\",\n            \"parseJsonType(string,string)\",\n            \"parseJsonType(string,string,string)\",\n            \"parseJsonUint(string,string)\",\n            \"parseJsonUintArray(string,string)\",\n            \"parseJson(string)\",\n            \"parseJson(string,string)\",\n            \"serializeJsonType(string,bytes)\",\n            \"keyExists(string,string)\",\n            \"indexOf(string,string)\",\n            \"parseAddress(string)\",\n            \"parseBool(string)\",\n            \"parseBytes(string)\",\n            \"parseBytes32(string)\",\n            \"parseInt(string)\",\n            \"parseUint(string)\",\n            \"replace(string,string,string)\",\n            \"split(string,string)\",\n            \"toLowercase(string)\",\n            \"toString(address)\",\n            \"toString(bytes)\",\n            \"toString(bytes32)\",\n            \"toString(bool)\",\n            \"toString(uint256)\",\n            \"toString(int256)\",\n            \"toUppercase(string)\",\n            \"trim(string)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(int256,int256,uint256)\",\n            \"assertApproxEqAbs(int256,int256,uint256,string)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqRel(uint256,uint256,uint256)\",\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\",\n            \"assertApproxEqRel(int256,int256,uint256)\",\n            \"assertApproxEqRel(int256,int256,uint256,string)\",\n            \"assertEqDecimal(uint256,uint256,uint256)\",\n            \"assertEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertEqDecimal(int256,int256,uint256)\",\n            \"assertEqDecimal(int256,int256,uint256,string)\",\n            \"assertEq(bool,bool)\",\n            \"assertEq(bool,bool,string)\",\n            \"assertEq(string,string)\",\n            \"assertEq(string,string,string)\",\n            \"assertEq(bytes,bytes)\",\n            \"assertEq(bytes,bytes,string)\",\n            \"assertEq(bool[],bool[])\",\n            \"assertEq(bool[],bool[],string)\",\n            \"assertEq(uint256[],uint256[])\",\n            \"assertEq(uint256[],uint256[],string)\",\n            \"assertEq(int256[],int256[])\",\n            \"assertEq(int256[],int256[],string)\",\n            \"assertEq(uint256,uint256)\",\n            \"assertEq(address[],address[])\",\n            \"assertEq(address[],address[],string)\",\n            \"assertEq(bytes32[],bytes32[])\",\n            \"assertEq(bytes32[],bytes32[],string)\",\n            \"assertEq(string[],string[])\",\n            \"assertEq(string[],string[],string)\",\n            \"assertEq(bytes[],bytes[])\",\n            \"assertEq(bytes[],bytes[],string)\",\n            \"assertEq(uint256,uint256,string)\",\n            \"assertEq(int256,int256)\",\n            \"assertEq(int256,int256,string)\",\n            \"assertEq(address,address)\",\n            \"assertEq(address,address,string)\",\n            \"assertEq(bytes32,bytes32)\",\n            \"assertEq(bytes32,bytes32,string)\",\n            \"assertFalse(bool)\",\n            \"assertFalse(bool,string)\",\n            \"assertGeDecimal(uint256,uint256,uint256)\",\n            \"assertGeDecimal(uint256,uint256,uint256,string)\",\n            \"assertGeDecimal(int256,int256,uint256)\",\n            \"assertGeDecimal(int256,int256,uint256,string)\",\n            \"assertGe(uint256,uint256)\",\n            \"assertGe(uint256,uint256,string)\",\n            \"assertGe(int256,int256)\",\n            \"assertGe(int256,int256,string)\",\n            \"assertGtDecimal(uint256,uint256,uint256)\",\n            \"assertGtDecimal(uint256,uint256,uint256,string)\",\n            \"assertGtDecimal(int256,int256,uint256)\",\n            \"assertGtDecimal(int256,int256,uint256,string)\",\n            \"assertGt(uint256,uint256)\",\n            \"assertGt(uint256,uint256,string)\",\n            \"assertGt(int256,int256)\",\n            \"assertGt(int256,int256,string)\",\n            \"assertLeDecimal(uint256,uint256,uint256)\",\n            \"assertLeDecimal(uint256,uint256,uint256,string)\",\n            \"assertLeDecimal(int256,int256,uint256)\",\n            \"assertLeDecimal(int256,int256,uint256,string)\",\n            \"assertLe(uint256,uint256)\",\n            \"assertLe(uint256,uint256,string)\",\n            \"assertLe(int256,int256)\",\n            \"assertLe(int256,int256,string)\",\n            \"assertLtDecimal(uint256,uint256,uint256)\",\n            \"assertLtDecimal(uint256,uint256,uint256,string)\",\n            \"assertLtDecimal(int256,int256,uint256)\",\n            \"assertLtDecimal(int256,int256,uint256,string)\",\n            \"assertLt(uint256,uint256)\",\n            \"assertLt(uint256,uint256,string)\",\n            \"assertLt(int256,int256)\",\n            \"assertLt(int256,int256,string)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertNotEqDecimal(int256,int256,uint256)\",\n            \"assertNotEqDecimal(int256,int256,uint256,string)\",\n            \"assertNotEq(bool,bool)\",\n            \"assertNotEq(bool,bool,string)\",\n            \"assertNotEq(string,string)\",\n            \"assertNotEq(string,string,string)\",\n            \"assertNotEq(bytes,bytes)\",\n            \"assertNotEq(bytes,bytes,string)\",\n            \"assertNotEq(bool[],bool[])\",\n            \"assertNotEq(bool[],bool[],string)\",\n            \"assertNotEq(uint256[],uint256[])\",\n            \"assertNotEq(uint256[],uint256[],string)\",\n            \"assertNotEq(int256[],int256[])\",\n            \"assertNotEq(int256[],int256[],string)\",\n            \"assertNotEq(uint256,uint256)\",\n            \"assertNotEq(address[],address[])\",\n            \"assertNotEq(address[],address[],string)\",\n            \"assertNotEq(bytes32[],bytes32[])\",\n            \"assertNotEq(bytes32[],bytes32[],string)\",\n            \"assertNotEq(string[],string[])\",\n            \"assertNotEq(string[],string[],string)\",\n            \"assertNotEq(bytes[],bytes[])\",\n            \"assertNotEq(bytes[],bytes[],string)\",\n            \"assertNotEq(uint256,uint256,string)\",\n            \"assertNotEq(int256,int256)\",\n            \"assertNotEq(int256,int256,string)\",\n            \"assertNotEq(address,address)\",\n            \"assertNotEq(address,address,string)\",\n            \"assertNotEq(bytes32,bytes32)\",\n            \"assertNotEq(bytes32,bytes32,string)\",\n            \"assertTrue(bool)\",\n            \"assertTrue(bool,string)\",\n            \"assume(bool)\",\n            \"assumeNoRevert()\",\n            \"assumeNoRevert((address,bool,bytes))\",\n            \"assumeNoRevert((address,bool,bytes)[])\",\n            \"breakpoint(string)\",\n            \"breakpoint(string,bool)\",\n            \"foundryVersionAtLeast(string)\",\n            \"foundryVersionCmp(string)\",\n            \"getChain(string)\",\n            \"getChain(uint256)\",\n            \"getFoundryVersion()\",\n            \"rpcUrl(string)\",\n            \"rpcUrlStructs()\",\n            \"rpcUrls()\",\n            \"keyExistsToml(string,string)\",\n            \"parseTomlAddress(string,string)\",\n            \"parseTomlAddressArray(string,string)\",\n            \"parseTomlBool(string,string)\",\n            \"parseTomlBoolArray(string,string)\",\n            \"parseTomlBytes(string,string)\",\n            \"parseTomlBytes32(string,string)\",\n            \"parseTomlBytes32Array(string,string)\",\n            \"parseTomlBytesArray(string,string)\",\n            \"parseTomlInt(string,string)\",\n            \"parseTomlIntArray(string,string)\",\n            \"parseTomlKeys(string,string)\",\n            \"parseTomlString(string,string)\",\n            \"parseTomlStringArray(string,string)\",\n            \"parseTomlTypeArray(string,string,string)\",\n            \"parseTomlType(string,string)\",\n            \"parseTomlType(string,string,string)\",\n            \"parseTomlUint(string,string)\",\n            \"parseTomlUintArray(string,string)\",\n            \"parseToml(string)\",\n            \"parseToml(string,string)\",\n            \"computeCreate2Address(bytes32,bytes32,address)\",\n            \"computeCreate2Address(bytes32,bytes32)\",\n            \"computeCreateAddress(address,uint256)\",\n            \"ensNamehash(string)\",\n            \"getLabel(address)\",\n            \"pauseTracing()\",\n            \"randomBool()\",\n            \"randomBytes(uint256)\",\n            \"randomBytes4()\",\n            \"randomBytes8()\",\n            \"randomInt()\",\n            \"randomInt(uint256)\",\n            \"randomUint(uint256)\",\n            \"resumeTracing()\",\n            \"toBase64URL(bytes)\",\n            \"toBase64URL(string)\",\n            \"toBase64(bytes)\",\n            \"toBase64(string)\",\n            \"activeFork()\",\n            \"getBlobhashes()\",\n            \"isPersistent(address)\"\n        ],\n        \"IMulticall3\": [\n            \"getBasefee()\",\n            \"getBlockHash(uint256)\",\n            \"getBlockNumber()\",\n            \"getChainId()\",\n            \"getCurrentBlockCoinbase()\",\n            \"getCurrentBlockDifficulty()\",\n            \"getCurrentBlockGasLimit()\",\n            \"getCurrentBlockTimestamp()\",\n            \"getEthBalance(address)\",\n            \"getLastBlockHash()\"\n        ],\n        \"CollateralTracker\": [\n            \"getPoolData()\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"asset()\",\n            \"totalAssets()\",\n            \"convertToShares(uint256)\",\n            \"convertToAssets(uint256)\",\n            \"maxDeposit(address)\",\n            \"previewDeposit(uint256)\",\n            \"maxMint(address)\",\n            \"previewMint(uint256)\",\n            \"maxWithdraw(address)\",\n            \"previewWithdraw(uint256)\",\n            \"maxRedeem(address)\",\n            \"previewRedeem(uint256)\",\n            \"exerciseCost(int24,int24,uint256,uint128,int256)\",\n            \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n            \"exercise(address,int128,int128,int128,int128)\",\n            \"getAccountMarginDetails(address,int24,uint256[][],uint128,uint128)\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"PanopticPool\": [\n            \"collateralToken0()\",\n            \"collateralToken1()\",\n            \"oracleContract()\",\n            \"poolKey()\",\n            \"onERC1155Received(address,address,uint256,uint256,bytes)\",\n            \"assertMinCollateralValues(uint256,uint256)\",\n            \"validateCollateralWithdrawable(address,uint256[],bool)\",\n            \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n            \"forceExercise(address,uint256,uint256[],uint256[],uint256)\",\n            \"isSafeMode()\",\n            \"getOracleTicks()\",\n            \"numberOfLegs(address)\",\n            \"positionData(address,uint256)\"\n        ],\n        \"SemiFungiblePositionManager\": [\n            \"balanceOfBatch(address[],uint256[])\",\n            \"supportsInterface(bytes4)\",\n            \"expandEnforcedTickRange((address,Currency,uint24,int24,address))\",\n            \"unlockCallback(bytes)\",\n            \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n            \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\",\n            \"getAccountLiquidity(bytes32,address,uint256,int24,int24)\",\n            \"getAccountPremium(bytes32,address,uint256,int24,int24,int24,uint256)\",\n            \"getUniswapV4PoolKeyFromId(uint64)\",\n            \"getEnforcedTickLimits(bytes32)\",\n            \"getPoolId(bytes32)\",\n            \"getPoolId((address,Currency,uint24,int24,address))\",\n            \"balanceOf(address,uint256)\",\n            \"isApprovedForAll(address,address)\"\n        ],\n        \"IV3CompatibleOracle\": [\n            \"slot0()\",\n            \"observations(uint256)\",\n            \"observe(uint32[])\"\n        ],\n        \"InteractionHelper\": [\n            \"computeName(address,address,bool,uint24,string)\",\n            \"computeSymbol(address,string)\",\n            \"computeDecimals(address)\"\n        ],\n        \"PanopticMath\": [\n            \"numberOfLeadingHexZeros(address)\",\n            \"safeERC20Symbol(address)\",\n            \"getOracleTicks(address,uint256)\",\n            \"computeInternalMedian(uint256,uint256,uint256,uint256,address)\",\n            \"twapFilter(address,uint32)\",\n            \"getLiquidationBonus(uint256,uint256,uint160,int256,uint256)\",\n            \"haircutPremia(address,uint256[],int256[][],int256,address,address,uint160,mapping(bytes32 => LeftRightUnsigned))\",\n            \"getRefundAmounts(address,int256,int24,address,address)\"\n        ],\n        \"ERC1155\": [\n            \"balanceOfBatch(address[],uint256[])\",\n            \"supportsInterface(bytes4)\",\n            \"balanceOf(address,uint256)\",\n            \"isApprovedForAll(address,address)\"\n        ],\n        \"ERC20Minimal\": [\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"IERC20Partial\": [\n            \"balanceOf(address)\",\n            \"totalSupply()\"\n        ],\n        \"PositionBalanceLibrary\": [\n            \"unpackAll(uint256)\"\n        ],\n        \"Ownable\": [\n            \"owner()\"\n        ],\n        \"IERC20\": [\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"IERC1155Receiver\": [\n            \"supportsInterface(bytes4)\"\n        ],\n        \"ERC1155Holder\": [\n            \"supportsInterface(bytes4)\",\n            \"onERC1155Received(address,address,uint256,uint256,bytes)\",\n            \"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"\n        ],\n        \"IERC20Metadata\": [\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\"\n        ],\n        \"ERC165\": [\n            \"supportsInterface(bytes4)\"\n        ],\n        \"IERC165\": [\n            \"supportsInterface(bytes4)\"\n        ],\n        \"IExtsload\": [\n            \"extsload(bytes32)\",\n            \"extsload(bytes32,uint256)\",\n            \"extsload(bytes32[])\"\n        ],\n        \"IExttload\": [\n            \"exttload(bytes32)\",\n            \"exttload(bytes32[])\"\n        ],\n        \"IPoolManager\": [\n            \"exttload(bytes32)\",\n            \"exttload(bytes32[])\",\n            \"extsload(bytes32)\",\n            \"extsload(bytes32,uint256)\",\n            \"extsload(bytes32[])\",\n            \"balanceOf(address,uint256)\",\n            \"allowance(address,address,uint256)\",\n            \"isOperator(address,address)\",\n            \"protocolFeesAccrued(address)\",\n            \"protocolFeeController()\"\n        ],\n        \"IProtocolFees\": [\n            \"protocolFeesAccrued(address)\",\n            \"protocolFeeController()\"\n        ],\n        \"IERC20Minimal\": [\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"IERC6909Claims\": [\n            \"balanceOf(address,uint256)\",\n            \"allowance(address,address,uint256)\",\n            \"isOperator(address,address)\"\n        ],\n        \"StateLibrary\": [\n            \"POOLS_SLOT()\",\n            \"FEE_GROWTH_GLOBAL0_OFFSET()\",\n            \"LIQUIDITY_OFFSET()\",\n            \"TICKS_OFFSET()\",\n            \"TICK_BITMAP_OFFSET()\",\n            \"POSITIONS_OFFSET()\"\n        ],\n        \"BalanceDeltaLibrary\": [\n            \"ZERO_DELTA()\"\n        ],\n        \"BeforeSwapDeltaLibrary\": [\n            \"ZERO_DELTA()\"\n        ],\n        \"CurrencyLibrary\": [\n            \"ADDRESS_ZERO()\"\n        ],\n        \"ERC20S\": [\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"ERC20\": [\n            \"DOMAIN_SEPARATOR()\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"nonces(address)\"\n        ],\n        \"MockERC20\": [\n            \"DOMAIN_SEPARATOR()\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"nonces(address)\"\n        ],\n        \"HypoVault\": [\n            \"owner()\",\n            \"getDepositEpochState(uint256)\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"underlyingToken()\",\n            \"performanceFeeBps()\",\n            \"feeWallet()\",\n            \"manager()\",\n            \"accountant()\",\n            \"withdrawalEpoch()\",\n            \"depositEpoch()\",\n            \"reservedWithdrawalAssets()\",\n            \"depositEpochState(uint256)\",\n            \"withdrawalEpochState(uint256)\",\n            \"queuedDeposit(address,uint256)\",\n            \"queuedWithdrawal(address,uint256)\",\n            \"userBasis(address)\"\n        ],\n        \"Token\": [\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\"\n        ],\n        \"PanopticVaultAccountant\": [\n            \"owner()\",\n            \"computeNAV(address,address,bytes)\",\n            \"vaultPools(address)\",\n            \"vaultLocked(address)\"\n        ],\n        \"IVaultAccountant\": [\n            \"computeNAV(address,address,bytes)\"\n        ],\n        \"VaultAccountantMock\": [\n            \"computeNAV(address,address,bytes)\",\n            \"nav()\",\n            \"expectedVault()\",\n            \"expectedManagerInput()\"\n        ],\n        \"HypoVaultTest\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"test_vaultParameters()\",\n            \"IS_TEST()\",\n            \"accountant()\",\n            \"vault()\",\n            \"token()\"\n        ],\n        \"MockERC20Partial\": [\n            \"balanceOf(address)\",\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"totalSupply()\",\n            \"balances(address)\",\n            \"name()\",\n            \"symbol()\",\n            \"_totalSupply()\"\n        ],\n        \"MockV3CompatibleOracle\": [\n            \"observe(uint32[])\",\n            \"slot0()\",\n            \"observations(uint256)\",\n            \"increaseObservationCardinalityNext(uint16)\",\n            \"tickCumulatives(uint256)\",\n            \"sqrtPriceX96s(uint256)\",\n            \"windowSize()\",\n            \"currentTick()\",\n            \"currentSqrtPriceX96()\",\n            \"currentObservationCardinality()\"\n        ],\n        \"MockCollateralToken\": [\n            \"balanceOf(address)\",\n            \"previewRedeem(uint256)\",\n            \"balances(address)\",\n            \"previewRedeemReturn()\"\n        ],\n        \"MockPanopticPool\": [\n            \"numberOfLegs(address)\",\n            \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n            \"hasPosition(address,uint256)\",\n            \"collateralToken0()\",\n            \"collateralToken1()\",\n            \"numberOfLegsMapping(address)\",\n            \"mockShortPremium()\",\n            \"mockLongPremium()\",\n            \"mockPositionBalanceArray(uint256,uint256)\",\n            \"positionExists(address,uint256)\",\n            \"totalPositions(address)\"\n        ],\n        \"PanopticVaultAccountantTest\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\",\n            \"accountant()\",\n            \"token0()\",\n            \"token1()\",\n            \"underlyingToken()\",\n            \"poolOracle()\",\n            \"oracle0()\",\n            \"oracle1()\",\n            \"mockPool()\",\n            \"vault()\",\n            \"owner()\",\n            \"nonOwner()\"\n        ],\n        \"PoC\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"test_submissionValidity()\",\n            \"IS_TEST()\",\n            \"mockAccountant()\",\n            \"vault()\",\n            \"token()\",\n            \"accountant()\",\n            \"token0()\",\n            \"token1()\",\n            \"underlyingToken()\",\n            \"poolOracle()\",\n            \"oracle0()\",\n            \"oracle1()\",\n            \"mockPool()\"\n        ],\n        \"CryticToFoundry\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"test_crytic()\",\n            \"IS_TEST()\"\n        ]\n    },\n    \"constants_used\": {\n        \"FoundryAsserts\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"StdAssertions\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"Test\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"CollateralTracker\": {\n            \"multicall(bytes[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"initialize()\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getPoolData()\": [\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"name()\": [\n                [\n                    {\n                        \"value\": \"100000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"81\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"DYNAMIC\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"bps\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"???\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0123456789abcdef\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"41\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000000000000000000000000000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \".\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8388608\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"/\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"POPT-V1.1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"248\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \" LP on \",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \" \",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"232\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"ETH\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"symbol()\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"ETH\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"21\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"???\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"po\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"decimals()\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"21\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"unlockCallback(bytes)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"31\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"68\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"21\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16156842317565293874272834530371880720966471053262404558597773956279093428224\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"asset()\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"21\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"convertToShares(uint256)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"convertToAssets(uint256)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"maxDeposit(address)\": [\n                [\n                    {\n                        \"value\": \"20282409603651670423947251286015\",\n                        \"type\": \"uint104\"\n                    }\n                ]\n            ],\n            \"previewDeposit(uint256)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"deposit(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20282409603651670423947251286015\",\n                        \"type\": \"uint104\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"maxMint(address)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20282409603651670423947251286015\",\n                        \"type\": \"uint104\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"mint(uint256,address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20282409603651670423947251286015\",\n                        \"type\": \"uint104\"\n                    }\n                ]\n            ],\n            \"maxWithdraw(address)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"withdraw(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ]\n            ],\n            \"withdraw(uint256,address,address,uint256[],bool)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ]\n            ],\n            \"maxRedeem(address)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"previewRedeem(uint256)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"redeem(uint256,address,address)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ]\n            ],\n            \"exerciseCost(int24,int24,uint256,uint128,int256)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"delegate(address)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"452312848583266388373324160190187140051835877600158453279131187530910662655\",\n                        \"type\": \"uint248\"\n                    }\n                ]\n            ],\n            \"revoke(address)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"452312848583266388373324160190187140051835877600158453279131187530910662655\",\n                        \"type\": \"uint248\"\n                    }\n                ]\n            ],\n            \"settleLiquidation(address,address,int256)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"452312848583266388373324160190187140051835877600158453279131187530910662655\",\n                        \"type\": \"uint248\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ]\n            ],\n            \"refund(address,address,int256)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ]\n            ],\n            \"takeCommissionAddData(address,int128,int128,int128,bool)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"exercise(address,int128,int128,int128,int128)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getAccountMarginDetails(address,int24,uint256[][],uint128,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"PanopticPool\": {\n            \"multicall(bytes[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"collateralToken0()\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"collateralToken1()\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"oracleContract()\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"poolKey()\": [\n                [\n                    {\n                        \"value\": \"92\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"initialize()\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"101019601158318752825795111857292890362884813682995519223326834688\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"assertMinCollateralValues(uint256,uint256)\": [\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"validateCollateralWithdrawable(address,uint256[],bool)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211455\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"65536\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"192\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"953\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"908209\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"204\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"184\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"208\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"13333\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"72\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"248\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"7\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551616\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint8\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"232\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"104489539389896954898256425143051824204419088306739054719350603776\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907852929702298719625575994209400481361428480\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\": [\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211455\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"65536\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"208\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551616\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"232\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"104489539389896954898256425143051824204419088306739054719350603776\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907852929702298719625575994209400481361428480\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"pokeMedian()\": [\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"192\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"204\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"7\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint8\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211455\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"65536\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"192\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"953\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"908209\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"92\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4294967296\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"204\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"655360000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"184\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"208\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"655370000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"13333\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"72\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"248\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"7\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551616\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint8\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"232\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"104489539389896954898256425143051824204419088306739054719350603776\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8388607\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"38654705664\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907852929702298719625575994209400481361428480\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"burnOptions(uint256,uint256[],int24,int24,bool)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211455\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"65536\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"192\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"953\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"908209\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"92\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4294967296\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"204\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"184\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"208\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"72\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"248\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"7\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551616\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint8\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"232\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"104489539389896954898256425143051824204419088306739054719350603776\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8388607\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"38654705664\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907852929702298719625575994209400481361428480\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"burnOptions(uint256[],uint256[],int24,int24,bool)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211455\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"65536\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"192\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"953\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"908209\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"92\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4294967296\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"204\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"184\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"208\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"72\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"248\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"7\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551616\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint8\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"232\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"104489539389896954898256425143051824204419088306739054719350603776\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8388607\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"38654705664\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907852929702298719625575994209400481361428480\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"liquidate(uint256[],address,uint256[])\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"forceExercise(address,uint256,uint256[],uint256[],uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getOracleTicks()\": [\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"192\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"204\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"96\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"7\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint8\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"numberOfLegs(address)\": [\n                [\n                    {\n                        \"value\": \"248\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"positionData(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"232\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"65536\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"184\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"208\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"144\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"settleLongPremium(uint256[],address,uint256,bool)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551616\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int128\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"SemiFungiblePositionManager\": {\n            \"multicall(bytes[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"balanceOfBatch(address[],uint256[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"3652614694\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"initializeAMMPool((address,Currency,uint24,int24,address))\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"expandEnforcedTickRange((address,Currency,uint24,int24,address))\": [\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"unlockCallback(bytes)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\": [\n                [\n                    {\n                        \"value\": \"584308305087695797999\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"105312291668557560842337184396146720457997191364272433102967537664\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"104489539389896954898256425143051824204419088306739054719350603776\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"REENTRANCY\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039439137263839420088320\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\": [\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089235842234716350509459867227651350478027355392411868089889589683027968\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4063915617\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"584308305087695797999\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"104489539389896954898256425143051824204419088306739054719350603776\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"REENTRANCY\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getAccountPremium(bytes32,address,uint256,int24,int24,int24,uint256)\": [\n                [\n                    {\n                        \"value\": \"8388607\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getPoolId((address,Currency,uint24,int24,address))\": [\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"Multicall\": {\n            \"multicall(bytes[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"InteractionHelper\": {\n            \"computeName(address,address,bool,uint24,string)\": [\n                [\n                    {\n                        \"value\": \"100000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"DYNAMIC\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"bps\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"???\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0123456789abcdef\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000000000000000000000000000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \".\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8388608\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"/\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \" LP on \",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \" \",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"ETH\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"computeSymbol(address,string)\": [\n                [\n                    {\n                        \"value\": \"ETH\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"???\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"computeDecimals(address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"PanopticMath\": {\n            \"numberOfLeadingHexZeros(address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"safeERC20Symbol(address)\": [\n                [\n                    {\n                        \"value\": \"ETH\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"???\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"getOracleTicks(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"192\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"7\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"204\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint8\"\n                    }\n                ]\n            ],\n            \"computeInternalMedian(uint256,uint256,uint256,uint256,address)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"204\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"192\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"7\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"216\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"24\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint8\"\n                    }\n                ]\n            ],\n            \"twapFilter(address,uint32)\": [\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"19\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"getLiquidationBonus(uint256,uint256,uint160,int256,uint256)\": [\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211456\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"haircutPremia(address,uint256[],int256[][],int256,address,address,uint160,mapping(bytes32 => LeftRightUnsigned))\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"ERC1155\": {\n            \"safeTransferFrom(address,address,uint256,uint256,bytes)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4063915617\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\": [\n                [\n                    {\n                        \"value\": \"3155786881\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"balanceOfBatch(address[],uint256[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"3652614694\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"ERC20Minimal\": {\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"PositionBalanceLibrary\": {\n            \"unpackAll(uint256)\": [\n                [\n                    {\n                        \"value\": \"160\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"232\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"65536\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"184\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"208\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"144\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"Ownable\": {\n            \"renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: new owner is the zero address\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"ERC1155Holder\": {\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"1339874119\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"bytes4\"\n                    }\n                ]\n            ]\n        },\n        \"ERC165\": {\n            \"supportsInterface(bytes4)\": [\n                [\n                    {\n                        \"value\": \"33540519\",\n                        \"type\": \"bytes4\"\n                    }\n                ]\n            ]\n        },\n        \"ERC20S\": {\n            \"mint(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"ERC20\": {\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": [\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_SIGNER\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"PERMIT_DEADLINE_EXPIRED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\\u0019\\u0001\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"DOMAIN_SEPARATOR()\": [\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"MockERC20\": {\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": [\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_SIGNER\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"PERMIT_DEADLINE_EXPIRED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\\u0019\\u0001\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"DOMAIN_SEPARATOR()\": [\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"constructor(string,string,uint8)\": [\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"mint(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"burn(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"HypoVault\": {\n            \"renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: new owner is the zero address\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"multicall(bytes[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"constructor(address,address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"1000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setManager(address)\": [\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"setAccountant(address)\": [\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"setFeeWallet(address)\": [\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"requestDeposit(uint128)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"31\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"68\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16156842317565293874272834530371880720966471053262404558597773956279093428224\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"requestWithdrawal(uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"cancelDeposit(address)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"31\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"76450787359836037641860180984291677749980919077056822294353438043884394381312\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"68\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"cancelWithdrawal(address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"executeDeposit(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"executeWithdrawal(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"31\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"76450787359836037641860180984291677749980919077056822294353438043884394381312\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"68\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"manage(address,bytes,uint256)\": [\n                [\n                    {\n                        \"value\": \"Address: insufficient balance for call\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Address: low-level call with value failed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Address: call to non-contract\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"manage(address[],bytes[],uint256[])\": [\n                [\n                    {\n                        \"value\": \"Address: insufficient balance for call\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Address: low-level call with value failed\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Address: call to non-contract\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"fulfillDeposits(uint256,bytes)\": [\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"fulfillWithdrawals(uint256,uint256,bytes)\": [\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"Token\": {\n            \"mint(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"PanopticVaultAccountant\": {\n            \"renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: new owner is the zero address\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"updatePoolsHash(address,bytes32)\": [\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"lockVault(address)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Ownable: caller is not the owner\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"computeNAV(address,address,bytes)\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"VaultAccountantMock\": {\n            \"computeNAV(address,address,bytes)\": [\n                [\n                    {\n                        \"value\": \"Invalid vault\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid manager input\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"HypoVaultTest\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TEST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20015998341411\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1250999896338\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_vaultParameters()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_deposit_full_single_user_epoch0()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_deposit_full_single_user_later_epoch()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_deposit_full_multiple_users_same_epoch()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_deposit_partial_single_user()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_deposit_partial_multiple_users()\": [\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_deposit_multiple_partial_fulfillments()\": [\n                [\n                    {\n                        \"value\": \"250000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000001\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000001\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400000000000000000001\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000001\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_withdrawal_with_multiple_users()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_withdrawal_with_profit_performance_fee()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"74750000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"249999999999999999\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_withdrawal_with_loss_no_performance_fee()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"240000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_withdrawal_partial()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"700000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"54000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"80000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_cancel_unfulfilled_deposit()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_cancel_unfulfilled_withdrawal()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_cancel_withdrawal_restores_basis()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Bob's basis should be reduced proportionally\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Alice's basis should be reduced proportionally\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_onlyManager_functions()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3237776010\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_onlyOwner_functions()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_epoch_transitions_deposits()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_epoch_transitions_withdrawals()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_execute_from_wrong_epoch()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1971154448\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_zero_amount_deposit()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_withdrawal_not_fulfillable()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2607605371\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_total_supply_updates()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000001\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_complex_multi_epoch_scenario()\": [\n                [\n                    {\n                        \"value\": \"733332\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"799999\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"450000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1466665\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_mixed_partial_fulfillments_across_epochs()\": [\n                [\n                    {\n                        \"value\": \"250000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"450000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"800000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_sequential_deposit_withdrawal_cycles()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000000000001\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000001\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_reserved_withdrawal_assets_tracking()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_manager_input_validation()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"test_manager_data\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Invalid manager input\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"wrong_data\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_multiple_cancellations()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_large_numbers_precision()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_basis_calculation_precision()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_partial_deposit_exact_numbers()\": [\n                [\n                    {\n                        \"value\": \"599400\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_partial_withdrawal_exact_numbers()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Alice should receive exactly the correct proportional amount for her fulfilled shares\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"298500000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_multiple_users_partial_deposit_exact_numbers()\": [\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1500\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"399201\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"598801\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_partial_deposit_share_calculation()\": [\n                [\n                    {\n                        \"value\": \"599400\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_withdrawal_scenario_verification()\": [\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Alice should receive assets for exactly 75e18 shares\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25e18 shares should remain unfulfilled\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_exact_withdrawal_calculation()\": [\n                [\n                    {\n                        \"value\": \"7500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Exactly 25 shares should remain unfulfilled\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Alice should receive exactly 75% of her withdrawal value\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Assets should be exactly proportional to fulfilled shares\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"MockV3CompatibleOracle\": {\n            \"constructor()\": [\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"observe(uint32[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"slot0()\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"observations(uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setTickCumulatives(int56[])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setObservation(uint256,int56,uint160)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int56\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"MockPanopticPool\": {\n            \"setMockPositionBalanceArray(uint256[][])\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"addPosition(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"removePosition(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ]\n        },\n        \"PanopticVaultAccountantTest\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30\",\n                        \"type\": \"uint32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Token1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"T1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"UND\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Token0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"T0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Underlying\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_updatePoolsHash_success()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"test hash\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_updatePoolsHash_onlyOwner()\": [\n                [\n                    {\n                        \"value\": \"test hash\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_updatePoolsHash_vaultLocked()\": [\n                [\n                    {\n                        \"value\": \"3849403694\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"original\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"new\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_lockVault_success()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_lockVault_onlyOwner()\": [\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_lockVault_permanent()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_invalidPools()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2502171363\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"wrong hash\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_staleOraclePrice_pool()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2827481816\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"151\",\n                        \"type\": \"int24\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_incorrectPositionList_zeroBalance()\": [\n                [\n                    {\n                        \"value\": \"281474976710656\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1156377690\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551616\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_incorrectPositionList_wrongLegsCount()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1156377690\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_basicScenario()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should match expected basic scenario calculation\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_exactCalculation_sameTokenAsUnderlying()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1250000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1325000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should be approximately 1325 ether when token0 equals underlying but token1 needs conversion\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_exactCalculation_onlyUnderlyingToken()\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2050000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should be exactly 2125 ether when both tokens equal underlying (token balances still count as exposure)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2125000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_exactCalculation_withExactPremiums()\": [\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include underlying plus converted premiums\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_exactCalculation_negativeExposureToZero()\": [\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"900000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should be exactly 900 ether when negative premiums are offset by token exposure\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_withPositions()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2722258935367507707706996859454145691648000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should match expected value with positions\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_multiplePoolsScenario()\": [\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1725000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should match expected multi-pool calculation\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"650000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"725000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_ethHandling()\": [\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include ETH balance correctly\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"326000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"251000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"201000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1326000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_tokenConversion()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should handle token conversion correctly\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_flippedTokens()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should handle flipped tokens correctly\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_negativePnL()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211456000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_emptyPools()\": [\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_zeroBalances()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_maxPriceDeviationBoundary()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_outOfRangeCall_short()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should be approximately the base balance for OTM short positions\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2722258935367507707706996859454145691648000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_outOfRangePut_short()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should be approximately the base balance for OTM short positions\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2722258935367507707706996859454145691648000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_inRangeCall_long()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2722258935367507707706996859454145691648000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should not be unreasonably high\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include intrinsic value from ITM long call\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_inRangePut_long()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2722258935367507707706996859454145691648000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should not be unreasonably high\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include intrinsic value from ITM long put\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_multiLegPosition()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include multi-leg position value correctly\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2722258935367507707706996859454145691648000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_staleOraclePrice_token0()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2827481816\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"151\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_staleOraclePrice_token1()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2827481816\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"151\",\n                        \"type\": \"int24\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_exactCalculation_noPositions()\": [\n                [\n                    {\n                        \"value\": \"NAV calculation should match expected value within tolerance\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_exactCalculation_withPremiums()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include premium calculations within tolerance\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"15000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_exactCalculation_singleLegPosition()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2722258935367507707706996859454145691648000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include position value correctly\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV calculation should be deterministic\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_priceConversion_exactRatio()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Different\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should be within expected conversion range\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"DIFF\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_negativeExposure_handledCorrectly()\": [\n                [\n                    {\n                        \"value\": \"680564733841876926926749214863536422912000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should handle negative exposure with Math.max(0, exposure)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"680564733841876926926749214863536422914000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_multiPool_exactAggregation()\": [\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1725000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"400000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"650000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"725000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Multi-pool NAV should aggregate correctly within tolerance\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_revert_invalidPoolsHash()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"wrong_hash\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2502171363\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_revert_stalePoolPrice()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2827481816\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"151\",\n                        \"type\": \"int24\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_revert_zeroPositionBalance()\": [\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1156377690\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_revert_incorrectLegsCount()\": [\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2722258935367507707706996859454145691648000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1156377690\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_maxPriceDeviationBoundary_exact()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Should succeed at exact price deviation boundary with correct value\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_zeroAmounts_edgeCase()\": [\n                [\n                    {\n                        \"value\": \"NAV should be exactly zero when all balances are zero\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"testFuzz_updatePoolsHash(address,bytes32)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"testFuzz_computeNAV_underlyingBalance(uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211455\",\n                        \"type\": \"uint128\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"testFuzz_computeNAV_priceDeviationBoundary(int24)\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"-50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should be positive within price deviation bounds and match expected value\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"testFuzz_computeNAV_tokenBalances(uint128,uint128,uint128)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551615\",\n                        \"type\": \"uint64\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include all token balances after conversion\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should include at least the underlying balance\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"80\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_straddlePosition_exactCalculation()\": [\n                [\n                    {\n                        \"value\": \"1207000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6805647338418769269267492148635364229120000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1701411834604692317316873037158841057288000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"35000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Straddle NAV calculation should match expected value within tolerance\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6805647338418769269267492148635364229135000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1701411834604692317316873037158841057280000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"15000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_ironCondor_fourLegPosition()\": [\n                [\n                    {\n                        \"value\": \"250000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"280000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Iron condor NAV should match expected calculation\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"23000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"320000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"820000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"843000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8507059173023461586584365185794205286400000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8507059173023461586584365185794205286420000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3402823669209384634633746074317682114572000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1500\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_multiplePositions_aggregation()\": [\n                [\n                    {\n                        \"value\": \"75\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"80000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"13611294676837538538534984297270728458240000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"40000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"640000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5104235503814076951950619111476523171860000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"35000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1440000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"800000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"13611294676837538538534984297270728458270000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5104235503814076951950619111476523171840000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Multi-position NAV should match expected calculation\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1475000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"15000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"560000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_largeNumbers_noOverflow()\": [\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"340282366920938463463374607431768211455\",\n                        \"type\": \"uint128\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"403\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Should handle large numbers with correct calculation\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Should not overflow uint128 max\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_precisionTest_smallAmounts()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Should handle small amounts with correct precision\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_twapCalculation_verification()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV calculation should succeed with custom TWAP and match expected value\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30\",\n                        \"type\": \"uint32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_priceDeviation_exactBoundary()\": [\n                [\n                    {\n                        \"value\": \"425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"75000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0123456789abcdef\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"5\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000000000000000000000000000000000000000000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \" should succeed with correct value\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"-50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1425000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Boundary test \",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"15000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"32\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_flippedOracles_conversion()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"350000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Flipped oracle conversion should work with expected range\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"FLIP\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Flipped\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"test_computeNAV_fullIntegration_realScenario()\": [\n                [\n                    {\n                        \"value\": \"100000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"48\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"16777215\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"80000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"17014118346046923173168730371588410572800000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4096\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"200000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1100500000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6805647338418769269267492148635364229120000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1680600000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"6805647338418769269267492148635364229270000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1100600000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"9\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1600600000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"36\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"25\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"17014118346046923173168730371588410573000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV calculation should be deterministic\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"128\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"500000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"NAV should match expected realistic scenario calculation\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"150000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"10\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"60\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"12\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"50\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000500000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"64\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"PoC\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"T1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Token1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"int24\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"UND\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Token0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1250999896338\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"305419896\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"20015998341411\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1193046\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"30\",\n                        \"type\": \"uint32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"T0\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"78187493521\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TEST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Underlying\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"CryticTester\": {\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551615\",\n                        \"type\": \"uint64\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hypoVault_fulfillDeposits\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"constructor()\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TEST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"CryticToFoundry\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551615\",\n                        \"type\": \"uint64\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hypoVault_fulfillDeposits\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TEST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"4660\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"100\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"300\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"22136\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"TargetFunctions\": {\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551615\",\n                        \"type\": \"uint64\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hypoVault_fulfillDeposits\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"HypoVaultTargets\": {\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"18446744073709551615\",\n                        \"type\": \"uint64\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hypoVault_fulfillDeposits\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"ManagersTargets\": {\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        }\n    },\n    \"constants_used_in_binary\": {\n        \"CollateralTracker\": {\n            \"multicall(bytes[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"initialize()\": {\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"6\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"name()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"232\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"81\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"8388608\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"symbol()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"decimals()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"transfer(address,uint256)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"unlockCallback(bytes)\": {\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"31\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"68\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"asset()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"convertToShares(uint256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"convertToAssets(uint256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"previewDeposit(uint256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"deposit(uint256,address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"maxMint(address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"maxWithdraw(address)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"withdraw(uint256,address,address)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"withdraw(uint256,address,address,uint256[],bool)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"maxRedeem(address)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"previewRedeem(uint256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"redeem(uint256,address,address)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"exerciseCost(int24,int24,uint256,uint128,int256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"delegate(address)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"revoke(address)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"settleLiquidation(address,address,int256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"refund(address,address,int256)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"takeCommissionAddData(address,int128,int128,int128,bool)\": {\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"exercise(address,int128,int128,int128,int128)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getAccountMarginDetails(address,int24,uint256[][],uint128,uint128)\": {\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"PanopticPool\": {\n            \"multicall(bytes[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"collateralToken0()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"collateralToken1()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"oracleContract()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"poolKey()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"92\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"initialize()\": {\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"assertMinCollateralValues(uint256,uint256)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"validateCollateralWithdrawable(address,uint256[],bool)\": {\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"232\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"208\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"184\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint8\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"72\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"7\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"232\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"208\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"pokeMedian()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"7\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint8\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\": {\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"232\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"208\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"184\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint8\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"92\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"72\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"7\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"burnOptions(uint256,uint256[],int24,int24,bool)\": {\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint8\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"92\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"232\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"208\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"184\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"7\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"72\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"burnOptions(uint256[],uint256[],int24,int24,bool)\": {\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint8\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"92\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"232\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"208\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"184\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"7\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"int256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"72\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getOracleTicks()\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"96\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"240\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint8\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"7\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"numberOfLegs(address)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"248\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"positionData(address,uint256)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"232\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"184\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"208\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"144\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"settleLongPremium(uint256[],address,uint256,bool)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int128\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"SemiFungiblePositionManager\": {\n            \"multicall(bytes[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"balanceOfBatch(address[],uint256[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"supportsInterface(bytes4)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"3652614694\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"33540519\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"initializeAMMPool((address,Currency,uint24,int24,address))\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"expandEnforcedTickRange((address,Currency,uint24,int24,address))\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"unlockCallback(bytes)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getAccountPremium(bytes32,address,uint256,int24,int24,int24,uint256)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"Multicall\": {\n            \"multicall(bytes[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"InteractionHelper\": {\n            \"computeName(address,address,bool,uint24,string)\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"8388608\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"PanopticMath\": {\n            \"getOracleTicks(address,uint256)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint8\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"7\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"computeInternalMedian(uint256,uint256,uint256,uint256,address)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"7\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint8\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"216\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"24\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"192\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"twapFilter(address,uint32)\": {\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"19\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"getLiquidationBonus(uint256,uint256,uint160,int256,uint256)\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"haircutPremia(address,uint256[],int256[][],int256,address,address,uint160,mapping(bytes32 => LeftRightUnsigned))\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"ERC1155\": {\n            \"safeTransferFrom(address,address,uint256,uint256,bytes)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"balanceOfBatch(address[],uint256[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"supportsInterface(bytes4)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"3652614694\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"33540519\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"PositionBalanceLibrary\": {\n            \"unpackAll(uint256)\": {\n                \"BinaryType.RIGHT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"232\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"184\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"208\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"144\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"160\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"ERC20\": {\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"MockERC20\": {\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"HypoVault\": {\n            \"multicall(bytes[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"requestDeposit(uint128)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"68\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"31\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"cancelDeposit(address)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"31\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"executeDeposit(address,uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"executeWithdrawal(address,uint256)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"31\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"10000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"transfer(address,uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"manage(address,bytes,uint256)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"manage(address[],bytes[],uint256[])\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"fulfillDeposits(uint256,bytes)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"fulfillWithdrawals(uint256,uint256,bytes)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"PanopticVaultAccountant\": {\n            \"computeNAV(address,address,bytes)\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"VaultAccountantMock\": {\n            \"computeNAV(address,address,bytes)\": {\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"HypoVaultTest\": {\n            \"setUp()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_deposit_full_single_user_epoch0()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_deposit_full_single_user_later_epoch()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_deposit_full_multiple_users_same_epoch()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_deposit_partial_single_user()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_deposit_partial_multiple_users()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_deposit_multiple_partial_fulfillments()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"400000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"350000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"300000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_withdrawal_with_multiple_users()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_withdrawal_with_profit_performance_fee()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_withdrawal_with_loss_no_performance_fee()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_withdrawal_partial()\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"30\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"60\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_cancel_unfulfilled_withdrawal()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_cancel_withdrawal_restores_basis()\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_withdrawal_not_fulfillable()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_total_supply_updates()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_sequential_deposit_withdrawal_cycles()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"250000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_reserved_withdrawal_assets_tracking()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_multiple_cancellations()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"150000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_large_numbers_precision()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_basis_calculation_precision()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.GREATER\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.CARET\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_partial_withdrawal_exact_numbers()\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"50\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"30\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_withdrawal_scenario_verification()\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_exact_withdrawal_calculation()\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"75\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"MockV3CompatibleOracle\": {\n            \"constructor()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"observe(uint32[])\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setTickCumulatives(int56[])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setObservation(uint256,int56,uint160)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"MockPanopticPool\": {\n            \"setMockPositionBalanceArray(uint256[][])\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"addPosition(address,uint256)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"removePosition(address,uint256)\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"PanopticVaultAccountantTest\": {\n            \"setUp()\": {\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_invalidPools()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_staleOraclePrice_pool()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_incorrectPositionList_zeroBalance()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_incorrectPositionList_wrongLegsCount()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_basicScenario()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_exactCalculation_sameTokenAsUnderlying()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_exactCalculation_onlyUnderlyingToken()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_exactCalculation_withExactPremiums()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_exactCalculation_negativeExposureToZero()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_withPositions()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_multiplePoolsScenario()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"400000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_ethHandling()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_tokenConversion()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_flippedTokens()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_negativePnL()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_zeroBalances()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_outOfRangeCall_short()\": {\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_outOfRangePut_short()\": {\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_inRangeCall_long()\": {\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_inRangePut_long()\": {\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_multiLegPosition()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_staleOraclePrice_token0()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_staleOraclePrice_token1()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_exactCalculation_noPositions()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_exactCalculation_withPremiums()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_exactCalculation_singleLegPosition()\": {\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_priceConversion_exactRatio()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_negativeExposure_handledCorrectly()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"2000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.OR\": [\n                    [\n                        {\n                            \"value\": \"2000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_multiPool_exactAggregation()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"400000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_revert_invalidPoolsHash()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_revert_stalePoolPrice()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_revert_zeroPositionBalance()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_revert_incorrectLegsCount()\": {\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_maxPriceDeviationBoundary_exact()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_zeroAmounts_edgeCase()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"testFuzz_computeNAV_priceDeviationBoundary(int24)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ]\n            },\n            \"testFuzz_computeNAV_tokenBalances(uint128,uint128,uint128)\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"80\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_straddlePosition_exactCalculation()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"5000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"20000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.OR\": [\n                    [\n                        {\n                            \"value\": \"15000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_ironCondor_fourLegPosition()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"150000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"40000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"30000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"23000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1500\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1500\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"25000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.OR\": [\n                    [\n                        {\n                            \"value\": \"12000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"20000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_multiplePositions_aggregation()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"800000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"80000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"60000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"300000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"35000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"15000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"40000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.OR\": [\n                    [\n                        {\n                            \"value\": \"30000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"20000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_largeNumbers_noOverflow()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"403\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_precisionTest_smallAmounts()\": {\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_twapCalculation_verification()\": {\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_priceDeviation_exactBoundary()\": {\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.POWER\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"32\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"75000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"16\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"3\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_flippedOracles_conversion()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"test_computeNAV_fullIntegration_realScenario()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"100000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"10\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"8\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"9\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"36\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"12\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"80000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"1000000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"64\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"100000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MODULO\": [\n                    [\n                        {\n                            \"value\": \"4\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"4096\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"2\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"int24\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"500\",\n                            \"type\": \"int24\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LEFT_SHIFT\": [\n                    [\n                        {\n                            \"value\": \"50000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"128\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"20000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"48\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.OR\": [\n                    [\n                        {\n                            \"value\": \"150000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ],\n                    [\n                        {\n                            \"value\": \"200000000000000000000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"PoC\": {\n            \"setUp()\": {\n                \"BinaryType.LESS\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.SUBTRACTION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"20\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CryticTester\": {\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"constructor()\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"300\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CryticToFoundry\": {\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"setUp()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"300\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.MULTIPLICATION\": [\n                    [\n                        {\n                            \"value\": \"1000\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"TargetFunctions\": {\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"HypoVaultTargets\": {\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"ManagersTargets\": {\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        }\n    },\n    \"functions_relations\": {\n        \"Asserts\": {},\n        \"BaseProperties\": {},\n        \"BaseSetup\": {},\n        \"BaseTargetFunctions\": {},\n        \"CryticAsserts\": {},\n        \"FoundryAsserts\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IHevm\": {\n            \"warp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"roll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"store(address,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopPrank()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"selectFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"activeFork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"etch(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"CommonBase\": {},\n        \"TestBase\": {},\n        \"ScriptBase\": {},\n        \"StdAssertions\": {\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"StdChains\": {},\n        \"StdCheatsSafe\": {},\n        \"StdCheats\": {},\n        \"StdConstants\": {},\n        \"stdError\": {},\n        \"StdInvariant\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"stdJson\": {},\n        \"stdMath\": {},\n        \"stdStorageSafe\": {},\n        \"stdStorage\": {},\n        \"StdStyle\": {},\n        \"stdToml\": {},\n        \"StdUtils\": {},\n        \"Test\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"VmSafe\": {\n            \"createWallet(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"publicKeyP256(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKey(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signP256(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envExists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isContext(uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setEnv(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accesses(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"eth_getLogs(uint256,uint256,address,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobBaseFee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingKeyAndParentOf(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingLength(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingSlotAt(address,bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce((address,uint256,uint256,uint256))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRecordedLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiffJson()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"lastCallGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"record()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"recordLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startStateDiffRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"closeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes,uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fsMetadata(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByDeployedCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcast(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployedCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployments(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"projectRoot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prompt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecret(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecretUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFileBinary(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLine(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLink(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryFfi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unixTime()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFileBinary(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeLine(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUintToHex(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExists(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"attachBlob(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"attachDelegation((uint8,bytes32,bytes32,uint64,address))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcastRawTransaction(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getWallets()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signAndAttachDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signAndAttachDelegation(address,uint256,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signDelegation(address,uint256,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"contains(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"indexOf(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"replace(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"split(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toLowercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toUppercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"trim(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"foundryVersionAtLeast(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"foundryVersionCmp(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getChain(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getChain(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getFoundryVersion()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrl(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrlStructs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sleep(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreateAddress(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyStorage(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ensNamehash(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLabel(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomAddress()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBool()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes4()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes8()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setArbitraryStorage(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setArbitraryStorage(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"shuffle(uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sort(uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Vm\": {\n            \"createWallet(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"publicKeyP256(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKey(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signP256(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envExists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isContext(uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setEnv(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accesses(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"eth_getLogs(uint256,uint256,address,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobBaseFee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingKeyAndParentOf(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingLength(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingSlotAt(address,bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce((address,uint256,uint256,uint256))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRecordedLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiffJson()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"lastCallGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"record()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"recordLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startStateDiffRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"closeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes,uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fsMetadata(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByDeployedCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcast(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployedCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployments(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"projectRoot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prompt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecret(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecretUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFileBinary(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLine(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLink(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryFfi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unixTime()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFileBinary(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeLine(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUintToHex(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExists(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"attachBlob(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"attachDelegation((uint8,bytes32,bytes32,uint64,address))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcastRawTransaction(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getWallets()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signAndAttachDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signAndAttachDelegation(address,uint256,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signDelegation(address,uint256,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"contains(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"indexOf(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"replace(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"split(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toLowercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toUppercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"trim(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"foundryVersionAtLeast(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"foundryVersionCmp(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getChain(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getChain(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getFoundryVersion()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrl(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrlStructs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sleep(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreateAddress(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyStorage(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ensNamehash(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLabel(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomAddress()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBool()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes4()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes8()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setArbitraryStorage(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setArbitraryStorage(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"shuffle(uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sort(uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accessList((address,bytes32[])[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"activeFork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowCheatcodes(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blobBaseFee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blobhashes(bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"chainId(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"clearMockedCalls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cloneAccount(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"coinbase(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cool(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"coolSlot(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteStateSnapshot(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteStateSnapshots()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"difficulty(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"dumpState(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"etch(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobhashes()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isPersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"loadAllocs(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,uint256,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,uint256,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,uint256,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,uint256,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCalls(address,bytes,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCalls(address,uint256,bytes,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockFunction(address,address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"noAccessList()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prevrandao(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prevrandao(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readCallers()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToState(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToStateAndDelete(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokePersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokePersistent(address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"roll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"selectFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setBlockhash(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setNonce(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setNonceUnsafe(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotGasLastCall(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotGasLastCall(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotState()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotValue(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotValue(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startSnapshotGas(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startSnapshotGas(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopPrank()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"store(address,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"txGasPrice(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"warmSlot(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"warp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteSnapshot(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteSnapshots()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToAndDelete(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertTo(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCallMinGas(address,uint256,uint64,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCallMinGas(address,uint256,uint64,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,uint64,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,uint64,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCreate(bytes,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCreate2(bytes,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(bool,bool,bool,bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(bool,bool,bool,bool,bool,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectPartialRevert(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectPartialRevert(bytes4,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectSafeMemory(uint64,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectSafeMemoryCall(uint64,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"skip(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"skip(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopExpectSafeMemory()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"interceptInitcode()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"console\": {},\n        \"IMulticall3\": {\n            \"aggregate((address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"aggregate3((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"aggregate3Value((address,bool,uint256,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blockAndAggregate((address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBasefee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockHash(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getChainId()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockCoinbase()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockDifficulty()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockGasLimit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getEthBalance(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLastBlockHash()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryAggregate(bool,(address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryBlockAndAggregate(bool,(address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"safeconsole\": {},\n        \"CollateralTracker\": {\n            \"multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\": {\n                \"impacts\": [\n                    \"unlockCallback(bytes)\",\n                    \"previewDeposit(uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"maxMint(address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"initialize()\": {\n                \"impacts\": [\n                    \"initialize()\",\n                    \"getPoolData()\",\n                    \"totalAssets()\",\n                    \"convertToShares(uint256)\",\n                    \"convertToAssets(uint256)\",\n                    \"previewDeposit(uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"maxMint(address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"previewWithdraw(uint256)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"previewRedeem(uint256)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\",\n                    \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n                    \"exercise(address,int128,int128,int128,int128)\"\n                ],\n                \"is_impacted_by\": [\n                    \"initialize()\"\n                ]\n            },\n            \"getPoolData()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"name()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"symbol()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"decimals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"unlockCallback(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\"\n                ]\n            },\n            \"asset()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"totalAssets()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"convertToShares(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"convertToAssets(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"maxDeposit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"previewDeposit(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\",\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"deposit(uint256,address)\": {\n                \"impacts\": [\n                    \"getPoolData()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"totalAssets()\",\n                    \"convertToShares(uint256)\",\n                    \"convertToAssets(uint256)\",\n                    \"previewDeposit(uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"maxMint(address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"previewWithdraw(uint256)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"previewRedeem(uint256)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\",\n                    \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n                    \"exercise(address,int128,int128,int128,int128)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\",\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"maxMint(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\",\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"previewMint(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mint(uint256,address)\": {\n                \"impacts\": [\n                    \"getPoolData()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"totalAssets()\",\n                    \"convertToShares(uint256)\",\n                    \"convertToAssets(uint256)\",\n                    \"previewDeposit(uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"maxMint(address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"previewWithdraw(uint256)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"previewRedeem(uint256)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\",\n                    \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n                    \"exercise(address,int128,int128,int128,int128)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\",\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"maxWithdraw(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"previewWithdraw(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"withdraw(uint256,address,address)\": {\n                \"impacts\": [\n                    \"getPoolData()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"totalAssets()\",\n                    \"convertToShares(uint256)\",\n                    \"convertToAssets(uint256)\",\n                    \"previewDeposit(uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"maxMint(address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"previewWithdraw(uint256)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"previewRedeem(uint256)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\",\n                    \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n                    \"exercise(address,int128,int128,int128,int128)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\",\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"withdraw(uint256,address,address,uint256[],bool)\": {\n                \"impacts\": [\n                    \"getPoolData()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"totalAssets()\",\n                    \"convertToShares(uint256)\",\n                    \"convertToAssets(uint256)\",\n                    \"previewDeposit(uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"maxMint(address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"previewWithdraw(uint256)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"previewRedeem(uint256)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\",\n                    \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n                    \"exercise(address,int128,int128,int128,int128)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\",\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"maxRedeem(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"previewRedeem(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"redeem(uint256,address,address)\": {\n                \"impacts\": [\n                    \"getPoolData()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"totalAssets()\",\n                    \"convertToShares(uint256)\",\n                    \"convertToAssets(uint256)\",\n                    \"previewDeposit(uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"maxMint(address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"previewWithdraw(uint256)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"previewRedeem(uint256)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\",\n                    \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n                    \"exercise(address,int128,int128,int128,int128)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,address)\",\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"exerciseCost(int24,int24,uint256,uint128,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"delegate(address)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"revoke(address)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"settleLiquidation(address,address,int256)\": {\n                \"impacts\": [\n                    \"getPoolData()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"totalAssets()\",\n                    \"convertToShares(uint256)\",\n                    \"convertToAssets(uint256)\",\n                    \"previewDeposit(uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"maxMint(address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"previewWithdraw(uint256)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"previewRedeem(uint256)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\",\n                    \"takeCommissionAddData(address,int128,int128,int128,bool)\",\n                    \"exercise(address,int128,int128,int128,int128)\"\n                ],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"refund(address,address,int256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"maxWithdraw(address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"maxRedeem(address)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"delegate(address)\",\n                    \"revoke(address)\",\n                    \"settleLiquidation(address,address,int256)\",\n                    \"refund(address,address,int256)\"\n                ]\n            },\n            \"takeCommissionAddData(address,int128,int128,int128,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"exercise(address,int128,int128,int128,int128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"deposit(uint256,address)\",\n                    \"mint(uint256,address)\",\n                    \"withdraw(uint256,address,address)\",\n                    \"withdraw(uint256,address,address,uint256[],bool)\",\n                    \"redeem(uint256,address,address)\",\n                    \"settleLiquidation(address,address,int256)\"\n                ]\n            },\n            \"getAccountMarginDetails(address,int24,uint256[][],uint128,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"PanopticPool\": {\n            \"multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"collateralToken0()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"collateralToken1()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"oracleContract()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"poolKey()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"constructor(address,address)\": {\n                \"impacts\": [\n                    \"initialize()\",\n                    \"validateCollateralWithdrawable(address,uint256[],bool)\",\n                    \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"liquidate(uint256[],address,uint256[])\",\n                    \"getOracleTicks()\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"initialize()\": {\n                \"impacts\": [\n                    \"initialize()\",\n                    \"validateCollateralWithdrawable(address,uint256[],bool)\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"liquidate(uint256[],address,uint256[])\",\n                    \"forceExercise(address,uint256,uint256[],uint256[],uint256)\",\n                    \"isSafeMode()\",\n                    \"getOracleTicks()\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\"\n                ]\n            },\n            \"onERC1155Received(address,address,uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertMinCollateralValues(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"validateCollateralWithdrawable(address,uint256[],bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ]\n            },\n            \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ]\n            },\n            \"pokeMedian()\": {\n                \"impacts\": [\n                    \"initialize()\",\n                    \"validateCollateralWithdrawable(address,uint256[],bool)\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"liquidate(uint256[],address,uint256[])\",\n                    \"forceExercise(address,uint256,uint256[],uint256[],uint256)\",\n                    \"isSafeMode()\",\n                    \"getOracleTicks()\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\"\n                ]\n            },\n            \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\": {\n                \"impacts\": [\n                    \"initialize()\",\n                    \"validateCollateralWithdrawable(address,uint256[],bool)\",\n                    \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"liquidate(uint256[],address,uint256[])\",\n                    \"forceExercise(address,uint256,uint256[],uint256[],uint256)\",\n                    \"isSafeMode()\",\n                    \"getOracleTicks()\",\n                    \"numberOfLegs(address)\",\n                    \"positionData(address,uint256)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ]\n            },\n            \"burnOptions(uint256,uint256[],int24,int24,bool)\": {\n                \"impacts\": [\n                    \"initialize()\",\n                    \"validateCollateralWithdrawable(address,uint256[],bool)\",\n                    \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"liquidate(uint256[],address,uint256[])\",\n                    \"forceExercise(address,uint256,uint256[],uint256[],uint256)\",\n                    \"isSafeMode()\",\n                    \"getOracleTicks()\",\n                    \"numberOfLegs(address)\",\n                    \"positionData(address,uint256)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ]\n            },\n            \"burnOptions(uint256[],uint256[],int24,int24,bool)\": {\n                \"impacts\": [\n                    \"initialize()\",\n                    \"validateCollateralWithdrawable(address,uint256[],bool)\",\n                    \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"liquidate(uint256[],address,uint256[])\",\n                    \"forceExercise(address,uint256,uint256[],uint256[],uint256)\",\n                    \"isSafeMode()\",\n                    \"getOracleTicks()\",\n                    \"numberOfLegs(address)\",\n                    \"positionData(address,uint256)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ]\n            },\n            \"liquidate(uint256[],address,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\"\n                ]\n            },\n            \"forceExercise(address,uint256,uint256[],uint256[],uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\"\n                ]\n            },\n            \"isSafeMode()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\"\n                ]\n            },\n            \"getOracleTicks()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\"\n                ]\n            },\n            \"numberOfLegs(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\"\n                ]\n            },\n            \"positionData(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\"\n                ]\n            },\n            \"settleLongPremium(uint256[],address,uint256,bool)\": {\n                \"impacts\": [\n                    \"validateCollateralWithdrawable(address,uint256[],bool)\",\n                    \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address)\",\n                    \"initialize()\",\n                    \"pokeMedian()\",\n                    \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n                    \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n                    \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n                    \"settleLongPremium(uint256[],address,uint256,bool)\"\n                ]\n            }\n        },\n        \"SemiFungiblePositionManager\": {\n            \"multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setApprovalForAll(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOfBatch(address[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n                    \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\"\n                ]\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"constructor(address,uint256,uint256,uint256)\": {\n                \"impacts\": [\n                    \"initializeAMMPool((address,Currency,uint24,int24,address))\",\n                    \"unlockCallback(bytes)\",\n                    \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n                    \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n                    \"getAccountPremium(bytes32,address,uint256,int24,int24,int24,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"initializeAMMPool((address,Currency,uint24,int24,address))\": {\n                \"impacts\": [\n                    \"initializeAMMPool((address,Currency,uint24,int24,address))\",\n                    \"getUniswapV4PoolKeyFromId(uint64)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,uint256,uint256,uint256)\",\n                    \"initializeAMMPool((address,Currency,uint24,int24,address))\"\n                ]\n            },\n            \"expandEnforcedTickRange((address,Currency,uint24,int24,address))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unlockCallback(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,uint256,uint256,uint256)\"\n                ]\n            },\n            \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\": {\n                \"impacts\": [\n                    \"balanceOfBatch(address[],uint256[])\",\n                    \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n                    \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,uint256,uint256,uint256)\",\n                    \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n                    \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\"\n                ]\n            },\n            \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\": {\n                \"impacts\": [\n                    \"balanceOfBatch(address[],uint256[])\",\n                    \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n                    \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,uint256,uint256,uint256)\",\n                    \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n                    \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\"\n                ]\n            },\n            \"safeTransferFrom(address,address,uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getAccountLiquidity(bytes32,address,uint256,int24,int24)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getAccountPremium(bytes32,address,uint256,int24,int24,int24,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,uint256,uint256,uint256)\"\n                ]\n            },\n            \"getUniswapV4PoolKeyFromId(uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"initializeAMMPool((address,Currency,uint24,int24,address))\"\n                ]\n            },\n            \"getEnforcedTickLimits(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getPoolId(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getPoolId((address,Currency,uint24,int24,address))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Multicall\": {\n            \"multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IV3CompatibleOracle\": {\n            \"slot0()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"observations(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"observe(uint32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"increaseObservationCardinalityNext(uint16)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Constants\": {},\n        \"Errors\": {},\n        \"InteractionHelper\": {\n            \"computeName(address,address,bool,uint24,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeSymbol(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeDecimals(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Math\": {},\n        \"PanopticMath\": {\n            \"numberOfLeadingHexZeros(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"safeERC20Symbol(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getOracleTicks(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeInternalMedian(uint256,uint256,uint256,uint256,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"twapFilter(address,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLiquidationBonus(uint256,uint256,uint160,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"haircutPremia(address,uint256[],int256[][],int256,address,address,uint160,mapping(bytes32 => LeftRightUnsigned))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRefundAmounts(address,int256,int24,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"SafeTransferLib\": {},\n        \"V4StateReader\": {},\n        \"ERC1155\": {\n            \"setApprovalForAll(address,bool)\": {\n                \"impacts\": [\n                    \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n                    \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"safeTransferFrom(address,address,uint256,uint256,bytes)\": {\n                \"impacts\": [\n                    \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n                    \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\",\n                    \"balanceOfBatch(address[],uint256[])\"\n                ],\n                \"is_impacted_by\": [\n                    \"setApprovalForAll(address,bool)\",\n                    \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n                    \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"\n                ]\n            },\n            \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\": {\n                \"impacts\": [\n                    \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n                    \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\",\n                    \"balanceOfBatch(address[],uint256[])\"\n                ],\n                \"is_impacted_by\": [\n                    \"setApprovalForAll(address,bool)\",\n                    \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n                    \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"\n                ]\n            },\n            \"balanceOfBatch(address[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n                    \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"\n                ]\n            },\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"ERC20Minimal\": {\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            }\n        },\n        \"IERC20Partial\": {\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"LeftRightLibrary\": {},\n        \"LiquidityChunkLibrary\": {},\n        \"PositionBalanceLibrary\": {\n            \"unpackAll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"TokenIdLibrary\": {},\n        \"Clone\": {},\n        \"Ownable\": {\n            \"owner()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"renounceOwnership()\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"transferOwnership(address)\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            }\n        },\n        \"IERC20\": {\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Address\": {},\n        \"Context\": {},\n        \"Strings\": {},\n        \"FixedPointMathLib\": {},\n        \"TransientReentrancyGuard\": {},\n        \"IERC1155Receiver\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"onERC1155Received(address,address,uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"ERC1155Holder\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"onERC1155Received(address,address,uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC20Metadata\": {\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"name()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"symbol()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"decimals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"ERC165\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC165\": {\n            \"supportsInterface(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"SignedMath\": {},\n        \"IExtsload\": {\n            \"extsload(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"extsload(bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"extsload(bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IExttload\": {\n            \"exttload(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exttload(bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IHooks\": {\n            \"beforeInitialize(address,(address,Currency,uint24,int24,address),uint160)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"afterInitialize(address,(address,Currency,uint24,int24,address),uint160,int24)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"beforeAddLiquidity(address,(address,Currency,uint24,int24,address),(int24,int24,int256,bytes32),bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"afterAddLiquidity(address,(address,Currency,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"beforeRemoveLiquidity(address,(address,Currency,uint24,int24,address),(int24,int24,int256,bytes32),bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"afterRemoveLiquidity(address,(address,Currency,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"beforeSwap(address,(address,Currency,uint24,int24,address),(bool,int256,uint160),bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"afterSwap(address,(address,Currency,uint24,int24,address),(bool,int256,uint160),int256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"beforeDonate(address,(address,Currency,uint24,int24,address),uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"afterDonate(address,(address,Currency,uint24,int24,address),uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IPoolManager\": {\n            \"exttload(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exttload(bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"extsload(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"extsload(bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"extsload(bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"balanceOf(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isOperator(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setOperator(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"protocolFeesAccrued(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setProtocolFee((address,Currency,uint24,int24,address),uint24)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setProtocolFeeController(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"collectProtocolFees(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"protocolFeeController()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unlock(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"initialize((address,Currency,uint24,int24,address),uint160)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"modifyLiquidity((address,Currency,uint24,int24,address),(int24,int24,int256,bytes32),bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"swap((address,Currency,uint24,int24,address),(bool,int256,uint160),bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"donate((address,Currency,uint24,int24,address),uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sync(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"take(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"settle()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"settleFor(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"clear(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mint(address,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"burn(address,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"updateDynamicLPFee((address,Currency,uint24,int24,address),uint24)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IProtocolFees\": {\n            \"protocolFeesAccrued(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setProtocolFee((address,Currency,uint24,int24,address),uint24)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setProtocolFeeController(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"collectProtocolFees(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"protocolFeeController()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC20Minimal\": {\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IERC6909Claims\": {\n            \"balanceOf(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowance(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isOperator(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transferFrom(address,address,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setOperator(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"CustomRevert\": {},\n        \"FixedPoint128\": {},\n        \"FullMath\": {},\n        \"LiquidityMath\": {},\n        \"Position\": {},\n        \"SafeCast\": {},\n        \"StateLibrary\": {},\n        \"BalanceDeltaLibrary\": {},\n        \"BeforeSwapDeltaLibrary\": {},\n        \"CurrencyLibrary\": {},\n        \"PoolIdLibrary\": {},\n        \"ERC20S\": {\n            \"constructor(string,string,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"editSupply(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mint(address,uint256)\": {\n                \"impacts\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\",\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            }\n        },\n        \"ActorManager\": {},\n        \"AssetManager\": {},\n        \"EnumerableSet\": {},\n        \"ERC20\": {\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ]\n            },\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ],\n                \"is_impacted_by\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ]\n            },\n            \"DOMAIN_SEPARATOR()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"MockERC20\": {\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ],\n                \"is_impacted_by\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"DOMAIN_SEPARATOR()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"constructor(string,string,uint8)\": {\n                \"impacts\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"DOMAIN_SEPARATOR()\",\n                    \"constructor(string,string,uint8)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"mint(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"burn(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            }\n        },\n        \"Panic\": {},\n        \"Utils\": {},\n        \"HypoVault\": {\n            \"owner()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"renounceOwnership()\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"setManager(address)\",\n                    \"setAccountant(address)\",\n                    \"setFeeWallet(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"transferOwnership(address)\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"setManager(address)\",\n                    \"setAccountant(address)\",\n                    \"setFeeWallet(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"constructor(address,address,address,uint256)\": {\n                \"impacts\": [\n                    \"requestDeposit(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"manage(address,bytes,uint256)\",\n                    \"manage(address[],bytes[],uint256[])\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"setManager(address)\": {\n                \"impacts\": [\n                    \"cancelDeposit(address)\",\n                    \"cancelWithdrawal(address)\",\n                    \"manage(address,bytes,uint256)\",\n                    \"manage(address[],bytes[],uint256[])\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"setAccountant(address)\": {\n                \"impacts\": [\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"setFeeWallet(address)\": {\n                \"impacts\": [\n                    \"executeWithdrawal(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"requestDeposit(uint128)\": {\n                \"impacts\": [\n                    \"requestDeposit(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\",\n                    \"getDepositEpochState(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256)\",\n                    \"requestDeposit(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\"\n                ]\n            },\n            \"requestWithdrawal(uint128)\": {\n                \"impacts\": [\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ]\n            },\n            \"cancelDeposit(address)\": {\n                \"impacts\": [\n                    \"requestDeposit(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\",\n                    \"getDepositEpochState(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256)\",\n                    \"setManager(address)\",\n                    \"requestDeposit(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\"\n                ]\n            },\n            \"cancelWithdrawal(address)\": {\n                \"impacts\": [\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256)\",\n                    \"setManager(address)\",\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ]\n            },\n            \"executeDeposit(address,uint256)\": {\n                \"impacts\": [\n                    \"requestDeposit(uint128)\",\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"requestDeposit(uint128)\",\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\"\n                ]\n            },\n            \"executeWithdrawal(address,uint256)\": {\n                \"impacts\": [\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256)\",\n                    \"setFeeWallet(address)\",\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ]\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"manage(address,bytes,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256)\",\n                    \"setManager(address)\"\n                ]\n            },\n            \"manage(address[],bytes[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256)\",\n                    \"setManager(address)\"\n                ]\n            },\n            \"fulfillDeposits(uint256,bytes)\": {\n                \"impacts\": [\n                    \"requestDeposit(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"executeDeposit(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\",\n                    \"getDepositEpochState(uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256)\",\n                    \"setManager(address)\",\n                    \"setAccountant(address)\",\n                    \"requestDeposit(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ]\n            },\n            \"fulfillWithdrawals(uint256,uint256,bytes)\": {\n                \"impacts\": [\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address,uint256)\",\n                    \"setManager(address)\",\n                    \"setAccountant(address)\",\n                    \"requestDeposit(uint128)\",\n                    \"requestWithdrawal(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"cancelWithdrawal(address)\",\n                    \"executeWithdrawal(address,uint256)\",\n                    \"fulfillDeposits(uint256,bytes)\",\n                    \"fulfillWithdrawals(uint256,uint256,bytes)\"\n                ]\n            },\n            \"getDepositEpochState(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"requestDeposit(uint128)\",\n                    \"cancelDeposit(address)\",\n                    \"fulfillDeposits(uint256,bytes)\"\n                ]\n            }\n        },\n        \"Token\": {\n            \"editSupply(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mint(address,uint256)\": {\n                \"impacts\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"mint(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\",\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"constructor(string,string,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"PanopticVaultAccountant\": {\n            \"owner()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"renounceOwnership()\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"updatePoolsHash(address,bytes32)\",\n                    \"lockVault(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"transferOwnership(address)\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"updatePoolsHash(address,bytes32)\",\n                    \"lockVault(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"updatePoolsHash(address,bytes32)\": {\n                \"impacts\": [\n                    \"computeNAV(address,address,bytes)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"lockVault(address)\"\n                ]\n            },\n            \"lockVault(address)\": {\n                \"impacts\": [\n                    \"updatePoolsHash(address,bytes32)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"computeNAV(address,address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"updatePoolsHash(address,bytes32)\"\n                ]\n            }\n        },\n        \"IVaultAccountant\": {\n            \"computeNAV(address,address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"AccountingMath\": {},\n        \"VaultAccountantMock\": {\n            \"setNav(uint256)\": {\n                \"impacts\": [\n                    \"computeNAV(address,address,bytes)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"setExpectedVault(address)\": {\n                \"impacts\": [\n                    \"computeNAV(address,address,bytes)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"setExpectedManagerInput(bytes)\": {\n                \"impacts\": [\n                    \"computeNAV(address,address,bytes)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"computeNAV(address,address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setNav(uint256)\",\n                    \"setExpectedVault(address)\",\n                    \"setExpectedManagerInput(bytes)\"\n                ]\n            }\n        },\n        \"HypoVaultTest\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"setUp()\",\n                    \"test_vaultParameters()\",\n                    \"test_deposit_full_single_user_epoch0()\",\n                    \"test_deposit_full_single_user_later_epoch()\",\n                    \"test_deposit_full_multiple_users_same_epoch()\",\n                    \"test_deposit_partial_single_user()\",\n                    \"test_deposit_partial_multiple_users()\",\n                    \"test_deposit_multiple_partial_fulfillments()\",\n                    \"test_withdrawal_with_multiple_users()\",\n                    \"test_withdrawal_with_profit_performance_fee()\",\n                    \"test_withdrawal_with_loss_no_performance_fee()\",\n                    \"test_withdrawal_partial()\",\n                    \"test_cancel_unfulfilled_deposit()\",\n                    \"test_cancel_unfulfilled_withdrawal()\",\n                    \"test_cancel_withdrawal_restores_basis()\",\n                    \"test_onlyManager_functions()\",\n                    \"test_onlyOwner_functions()\",\n                    \"test_epoch_transitions_deposits()\",\n                    \"test_epoch_transitions_withdrawals()\",\n                    \"test_execute_from_wrong_epoch()\",\n                    \"test_zero_amount_deposit()\",\n                    \"test_withdrawal_not_fulfillable()\",\n                    \"test_total_supply_updates()\",\n                    \"test_complex_multi_epoch_scenario()\",\n                    \"test_mixed_partial_fulfillments_across_epochs()\",\n                    \"test_sequential_deposit_withdrawal_cycles()\",\n                    \"test_reserved_withdrawal_assets_tracking()\",\n                    \"test_manager_input_validation()\",\n                    \"test_multiple_cancellations()\",\n                    \"test_large_numbers_precision()\",\n                    \"test_basis_calculation_precision()\",\n                    \"test_partial_deposit_exact_numbers()\",\n                    \"test_partial_withdrawal_exact_numbers()\",\n                    \"test_multiple_users_partial_deposit_exact_numbers()\",\n                    \"test_partial_deposit_share_calculation()\",\n                    \"test_withdrawal_scenario_verification()\",\n                    \"test_exact_withdrawal_calculation()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_vaultParameters()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_deposit_full_single_user_epoch0()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_deposit_full_single_user_later_epoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_deposit_full_multiple_users_same_epoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_deposit_partial_single_user()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_deposit_partial_multiple_users()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_deposit_multiple_partial_fulfillments()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_withdrawal_with_multiple_users()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_withdrawal_with_profit_performance_fee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_withdrawal_with_loss_no_performance_fee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_withdrawal_partial()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_cancel_unfulfilled_deposit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_cancel_unfulfilled_withdrawal()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_cancel_withdrawal_restores_basis()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_onlyManager_functions()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_onlyOwner_functions()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_epoch_transitions_deposits()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_epoch_transitions_withdrawals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_execute_from_wrong_epoch()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_zero_amount_deposit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_withdrawal_not_fulfillable()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_total_supply_updates()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_complex_multi_epoch_scenario()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_mixed_partial_fulfillments_across_epochs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_sequential_deposit_withdrawal_cycles()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_reserved_withdrawal_assets_tracking()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_manager_input_validation()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_multiple_cancellations()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_large_numbers_precision()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_basis_calculation_precision()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_partial_deposit_exact_numbers()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_partial_withdrawal_exact_numbers()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_multiple_users_partial_deposit_exact_numbers()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_partial_deposit_share_calculation()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_withdrawal_scenario_verification()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_exact_withdrawal_calculation()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            }\n        },\n        \"MockERC20Partial\": {\n            \"constructor(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mint(address,uint256)\": {\n                \"impacts\": [\n                    \"mint(address,uint256)\",\n                    \"balanceOf(address)\",\n                    \"totalSupply()\"\n                ],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\",\n                    \"setBalance(address,uint256)\"\n                ]\n            },\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\",\n                    \"setBalance(address,uint256)\"\n                ]\n            },\n            \"setBalance(address,uint256)\": {\n                \"impacts\": [\n                    \"mint(address,uint256)\",\n                    \"balanceOf(address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"totalSupply()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"mint(address,uint256)\"\n                ]\n            }\n        },\n        \"MockV3CompatibleOracle\": {\n            \"constructor()\": {\n                \"impacts\": [\n                    \"constructor()\",\n                    \"observe(uint32[])\",\n                    \"slot0()\",\n                    \"setTickCumulatives(int56[])\",\n                    \"setObservation(uint256,int56,uint160)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"setTickCumulatives(int56[])\",\n                    \"setObservation(uint256,int56,uint160)\"\n                ]\n            },\n            \"observe(uint32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"setTickCumulatives(int56[])\",\n                    \"setObservation(uint256,int56,uint160)\"\n                ]\n            },\n            \"slot0()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"setCurrentState(int24,uint160,uint16)\"\n                ]\n            },\n            \"observations(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"increaseObservationCardinalityNext(uint16)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setTickCumulatives(int56[])\": {\n                \"impacts\": [\n                    \"constructor()\",\n                    \"observe(uint32[])\",\n                    \"setTickCumulatives(int56[])\",\n                    \"setObservation(uint256,int56,uint160)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"setTickCumulatives(int56[])\",\n                    \"setObservation(uint256,int56,uint160)\"\n                ]\n            },\n            \"setObservation(uint256,int56,uint160)\": {\n                \"impacts\": [\n                    \"constructor()\",\n                    \"observe(uint32[])\",\n                    \"setTickCumulatives(int56[])\",\n                    \"setObservation(uint256,int56,uint160)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\",\n                    \"setTickCumulatives(int56[])\",\n                    \"setObservation(uint256,int56,uint160)\"\n                ]\n            },\n            \"setCurrentState(int24,uint160,uint16)\": {\n                \"impacts\": [\n                    \"slot0()\"\n                ],\n                \"is_impacted_by\": []\n            }\n        },\n        \"MockCollateralToken\": {\n            \"balanceOf(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setBalance(address,uint256)\"\n                ]\n            },\n            \"setBalance(address,uint256)\": {\n                \"impacts\": [\n                    \"balanceOf(address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"previewRedeem(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setPreviewRedeemReturn(uint256)\"\n                ]\n            },\n            \"setPreviewRedeemReturn(uint256)\": {\n                \"impacts\": [\n                    \"previewRedeem(uint256)\"\n                ],\n                \"is_impacted_by\": []\n            }\n        },\n        \"MockPanopticPool\": {\n            \"constructor()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"numberOfLegs(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setNumberOfLegs(address,uint256)\"\n                ]\n            },\n            \"setNumberOfLegs(address,uint256)\": {\n                \"impacts\": [\n                    \"numberOfLegs(address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setMockPremiums(uint256,uint256)\",\n                    \"setMockPositionBalanceArray(uint256[][])\"\n                ]\n            },\n            \"setMockPremiums(uint256,uint256)\": {\n                \"impacts\": [\n                    \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"setMockPositionBalanceArray(uint256[][])\": {\n                \"impacts\": [\n                    \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n                    \"setMockPositionBalanceArray(uint256[][])\"\n                ],\n                \"is_impacted_by\": [\n                    \"setMockPositionBalanceArray(uint256[][])\"\n                ]\n            },\n            \"addPosition(address,uint256)\": {\n                \"impacts\": [\n                    \"addPosition(address,uint256)\",\n                    \"removePosition(address,uint256)\",\n                    \"hasPosition(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"addPosition(address,uint256)\",\n                    \"removePosition(address,uint256)\"\n                ]\n            },\n            \"removePosition(address,uint256)\": {\n                \"impacts\": [\n                    \"addPosition(address,uint256)\",\n                    \"removePosition(address,uint256)\",\n                    \"hasPosition(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"addPosition(address,uint256)\",\n                    \"removePosition(address,uint256)\"\n                ]\n            },\n            \"hasPosition(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"addPosition(address,uint256)\",\n                    \"removePosition(address,uint256)\"\n                ]\n            }\n        },\n        \"PanopticVaultAccountantTest\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"setUp()\",\n                    \"test_updatePoolsHash_success()\",\n                    \"test_updatePoolsHash_onlyOwner()\",\n                    \"test_updatePoolsHash_vaultLocked()\",\n                    \"test_lockVault_success()\",\n                    \"test_lockVault_onlyOwner()\",\n                    \"test_lockVault_permanent()\",\n                    \"test_computeNAV_invalidPools()\",\n                    \"test_computeNAV_staleOraclePrice_pool()\",\n                    \"test_computeNAV_incorrectPositionList_zeroBalance()\",\n                    \"test_computeNAV_incorrectPositionList_wrongLegsCount()\",\n                    \"test_computeNAV_basicScenario()\",\n                    \"test_computeNAV_exactCalculation_sameTokenAsUnderlying()\",\n                    \"test_computeNAV_exactCalculation_onlyUnderlyingToken()\",\n                    \"test_computeNAV_exactCalculation_withExactPremiums()\",\n                    \"test_computeNAV_exactCalculation_negativeExposureToZero()\",\n                    \"test_computeNAV_withPositions()\",\n                    \"test_computeNAV_multiplePoolsScenario()\",\n                    \"test_computeNAV_ethHandling()\",\n                    \"test_computeNAV_tokenConversion()\",\n                    \"test_computeNAV_flippedTokens()\",\n                    \"test_computeNAV_negativePnL()\",\n                    \"test_computeNAV_emptyPools()\",\n                    \"test_computeNAV_zeroBalances()\",\n                    \"test_computeNAV_maxPriceDeviationBoundary()\",\n                    \"test_computeNAV_outOfRangeCall_short()\",\n                    \"test_computeNAV_outOfRangePut_short()\",\n                    \"test_computeNAV_inRangeCall_long()\",\n                    \"test_computeNAV_inRangePut_long()\",\n                    \"test_computeNAV_multiLegPosition()\",\n                    \"test_computeNAV_staleOraclePrice_token0()\",\n                    \"test_computeNAV_staleOraclePrice_token1()\",\n                    \"test_computeNAV_exactCalculation_noPositions()\",\n                    \"test_computeNAV_exactCalculation_withPremiums()\",\n                    \"test_computeNAV_exactCalculation_singleLegPosition()\",\n                    \"test_computeNAV_priceConversion_exactRatio()\",\n                    \"test_computeNAV_negativeExposure_handledCorrectly()\",\n                    \"test_computeNAV_multiPool_exactAggregation()\",\n                    \"test_computeNAV_revert_invalidPoolsHash()\",\n                    \"test_computeNAV_revert_stalePoolPrice()\",\n                    \"test_computeNAV_revert_zeroPositionBalance()\",\n                    \"test_computeNAV_revert_incorrectLegsCount()\",\n                    \"test_computeNAV_maxPriceDeviationBoundary_exact()\",\n                    \"test_computeNAV_zeroAmounts_edgeCase()\",\n                    \"testFuzz_updatePoolsHash(address,bytes32)\",\n                    \"testFuzz_computeNAV_underlyingBalance(uint256)\",\n                    \"testFuzz_computeNAV_priceDeviationBoundary(int24)\",\n                    \"testFuzz_computeNAV_tokenBalances(uint128,uint128,uint128)\",\n                    \"test_computeNAV_straddlePosition_exactCalculation()\",\n                    \"test_computeNAV_ironCondor_fourLegPosition()\",\n                    \"test_computeNAV_multiplePositions_aggregation()\",\n                    \"test_computeNAV_largeNumbers_noOverflow()\",\n                    \"test_computeNAV_precisionTest_smallAmounts()\",\n                    \"test_computeNAV_twapCalculation_verification()\",\n                    \"test_computeNAV_priceDeviation_exactBoundary()\",\n                    \"test_computeNAV_flippedOracles_conversion()\",\n                    \"test_computeNAV_fullIntegration_realScenario()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_updatePoolsHash_success()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_updatePoolsHash_onlyOwner()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_updatePoolsHash_vaultLocked()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_lockVault_success()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_lockVault_onlyOwner()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_lockVault_permanent()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_invalidPools()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_staleOraclePrice_pool()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_incorrectPositionList_zeroBalance()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_incorrectPositionList_wrongLegsCount()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_basicScenario()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_exactCalculation_sameTokenAsUnderlying()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_exactCalculation_onlyUnderlyingToken()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_exactCalculation_withExactPremiums()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_exactCalculation_negativeExposureToZero()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_withPositions()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_multiplePoolsScenario()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_ethHandling()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_tokenConversion()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_flippedTokens()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_negativePnL()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_emptyPools()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_zeroBalances()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_maxPriceDeviationBoundary()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_outOfRangeCall_short()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_outOfRangePut_short()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_inRangeCall_long()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_inRangePut_long()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_multiLegPosition()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_staleOraclePrice_token0()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_staleOraclePrice_token1()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_exactCalculation_noPositions()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_exactCalculation_withPremiums()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_exactCalculation_singleLegPosition()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_priceConversion_exactRatio()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_negativeExposure_handledCorrectly()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_multiPool_exactAggregation()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_revert_invalidPoolsHash()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_revert_stalePoolPrice()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_revert_zeroPositionBalance()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_revert_incorrectLegsCount()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_maxPriceDeviationBoundary_exact()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_zeroAmounts_edgeCase()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"testFuzz_updatePoolsHash(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"testFuzz_computeNAV_underlyingBalance(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"testFuzz_computeNAV_priceDeviationBoundary(int24)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"testFuzz_computeNAV_tokenBalances(uint128,uint128,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_straddlePosition_exactCalculation()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_ironCondor_fourLegPosition()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_multiplePositions_aggregation()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_largeNumbers_noOverflow()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_precisionTest_smallAmounts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_twapCalculation_verification()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_priceDeviation_exactBoundary()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_flippedOracles_conversion()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_computeNAV_fullIntegration_realScenario()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            }\n        },\n        \"PoC\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"setUp()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_submissionValidity()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"BeforeAfter\": {},\n        \"CryticTester\": {\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"hypoVault_approve(address,uint256)\",\n                    \"hypoVault_cancelDeposit(address)\",\n                    \"hypoVault_cancelWithdrawal(address)\",\n                    \"hypoVault_executeDeposit(address,uint256)\",\n                    \"hypoVault_executeWithdrawal(address,uint256)\",\n                    \"hypoVault_fulfillDeposits(uint256,bytes)\",\n                    \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n                    \"hypoVault_manage(address[],bytes[],uint256[])\",\n                    \"hypoVault_manage(address,bytes,uint256)\",\n                    \"hypoVault_multicall(bytes[])\",\n                    \"hypoVault_renounceOwnership()\",\n                    \"hypoVault_requestDeposit(uint128)\",\n                    \"hypoVault_requestWithdrawal(uint128)\",\n                    \"hypoVault_setAccountant(address)\",\n                    \"hypoVault_setFeeWallet(address)\",\n                    \"hypoVault_setManager(address)\",\n                    \"hypoVault_transfer(address,uint256)\",\n                    \"hypoVault_transferFrom(address,address,uint256)\",\n                    \"hypoVault_transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"hypoVault_approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_cancelDeposit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_cancelWithdrawal(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_executeDeposit(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_executeWithdrawal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_manage(address[],bytes[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_manage(address,bytes,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_renounceOwnership()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_requestDeposit(uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_requestWithdrawal(uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_setAccountant(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_setFeeWallet(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_setManager(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"hypoVault_transferOwnership(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"constructor()\": {\n                \"impacts\": [\n                    \"hypoVault_approve(address,uint256)\",\n                    \"hypoVault_cancelDeposit(address)\",\n                    \"hypoVault_cancelWithdrawal(address)\",\n                    \"hypoVault_executeDeposit(address,uint256)\",\n                    \"hypoVault_executeWithdrawal(address,uint256)\",\n                    \"hypoVault_fulfillDeposits(uint256,bytes)\",\n                    \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n                    \"hypoVault_manage(address[],bytes[],uint256[])\",\n                    \"hypoVault_manage(address,bytes,uint256)\",\n                    \"hypoVault_multicall(bytes[])\",\n                    \"hypoVault_renounceOwnership()\",\n                    \"hypoVault_requestDeposit(uint128)\",\n                    \"hypoVault_requestWithdrawal(uint128)\",\n                    \"hypoVault_setAccountant(address)\",\n                    \"hypoVault_setFeeWallet(address)\",\n                    \"hypoVault_setManager(address)\",\n                    \"hypoVault_transfer(address,uint256)\",\n                    \"hypoVault_transferFrom(address,address,uint256)\",\n                    \"hypoVault_transferOwnership(address)\",\n                    \"constructor()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor()\"\n                ]\n            }\n        },\n        \"CryticToFoundry\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"hypoVault_approve(address,uint256)\",\n                    \"hypoVault_cancelDeposit(address)\",\n                    \"hypoVault_cancelWithdrawal(address)\",\n                    \"hypoVault_executeDeposit(address,uint256)\",\n                    \"hypoVault_executeWithdrawal(address,uint256)\",\n                    \"hypoVault_fulfillDeposits(uint256,bytes)\",\n                    \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n                    \"hypoVault_manage(address[],bytes[],uint256[])\",\n                    \"hypoVault_manage(address,bytes,uint256)\",\n                    \"hypoVault_multicall(bytes[])\",\n                    \"hypoVault_renounceOwnership()\",\n                    \"hypoVault_requestDeposit(uint128)\",\n                    \"hypoVault_requestWithdrawal(uint128)\",\n                    \"hypoVault_setAccountant(address)\",\n                    \"hypoVault_setFeeWallet(address)\",\n                    \"hypoVault_setManager(address)\",\n                    \"hypoVault_transfer(address,uint256)\",\n                    \"hypoVault_transferFrom(address,address,uint256)\",\n                    \"hypoVault_transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"hypoVault_approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_cancelDeposit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_cancelWithdrawal(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_executeDeposit(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_executeWithdrawal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_manage(address[],bytes[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_manage(address,bytes,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_renounceOwnership()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_requestDeposit(uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_requestWithdrawal(uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_setAccountant(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_setFeeWallet(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_setManager(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"hypoVault_transferOwnership(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"hypoVault_approve(address,uint256)\",\n                    \"hypoVault_cancelDeposit(address)\",\n                    \"hypoVault_cancelWithdrawal(address)\",\n                    \"hypoVault_executeDeposit(address,uint256)\",\n                    \"hypoVault_executeWithdrawal(address,uint256)\",\n                    \"hypoVault_fulfillDeposits(uint256,bytes)\",\n                    \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n                    \"hypoVault_manage(address[],bytes[],uint256[])\",\n                    \"hypoVault_manage(address,bytes,uint256)\",\n                    \"hypoVault_multicall(bytes[])\",\n                    \"hypoVault_renounceOwnership()\",\n                    \"hypoVault_requestDeposit(uint128)\",\n                    \"hypoVault_requestWithdrawal(uint128)\",\n                    \"hypoVault_setAccountant(address)\",\n                    \"hypoVault_setFeeWallet(address)\",\n                    \"hypoVault_setManager(address)\",\n                    \"hypoVault_transfer(address,uint256)\",\n                    \"hypoVault_transferFrom(address,address,uint256)\",\n                    \"hypoVault_transferOwnership(address)\",\n                    \"setUp()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_crytic()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Properties\": {},\n        \"Setup\": {},\n        \"TargetFunctions\": {\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"hypoVault_approve(address,uint256)\",\n                    \"hypoVault_cancelDeposit(address)\",\n                    \"hypoVault_cancelWithdrawal(address)\",\n                    \"hypoVault_executeDeposit(address,uint256)\",\n                    \"hypoVault_executeWithdrawal(address,uint256)\",\n                    \"hypoVault_fulfillDeposits(uint256,bytes)\",\n                    \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n                    \"hypoVault_manage(address[],bytes[],uint256[])\",\n                    \"hypoVault_manage(address,bytes,uint256)\",\n                    \"hypoVault_multicall(bytes[])\",\n                    \"hypoVault_renounceOwnership()\",\n                    \"hypoVault_requestDeposit(uint128)\",\n                    \"hypoVault_requestWithdrawal(uint128)\",\n                    \"hypoVault_setAccountant(address)\",\n                    \"hypoVault_setFeeWallet(address)\",\n                    \"hypoVault_setManager(address)\",\n                    \"hypoVault_transfer(address,uint256)\",\n                    \"hypoVault_transferFrom(address,address,uint256)\",\n                    \"hypoVault_transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"hypoVault_approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_cancelDeposit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_cancelWithdrawal(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_executeDeposit(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_executeWithdrawal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_manage(address[],bytes[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_manage(address,bytes,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_renounceOwnership()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_requestDeposit(uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_requestWithdrawal(uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_setAccountant(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_setFeeWallet(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_setManager(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"hypoVault_transferOwnership(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            }\n        },\n        \"AdminTargets\": {},\n        \"DoomsdayTargets\": {},\n        \"HypoVaultTargets\": {\n            \"hypoVault_approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_cancelDeposit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_cancelWithdrawal(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_executeDeposit(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_executeWithdrawal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_fulfillDeposits(uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_manage(address[],bytes[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_manage(address,bytes,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_multicall(bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_renounceOwnership()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_requestDeposit(uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_requestWithdrawal(uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_setAccountant(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_setFeeWallet(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_setManager(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"hypoVault_transferOwnership(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"ManagersTargets\": {\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            }\n        },\n        \"TokenTargets\": {\n            \"token_approve(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"token_editSupply(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"token_mint(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"token_transfer(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"token_transferFrom(address,address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"VaultAccountantMockTargets\": {\n            \"vaultAccountantMock_setExpectedManagerInput(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"vaultAccountantMock_setExpectedVault(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"vaultAccountantMock_setNav(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        }\n    },\n    \"constructors\": {\n        \"CollateralTracker\": \"constructor(uint256,uint256,uint256,int256,uint256,uint256,uint256,IPoolManager)\",\n        \"PanopticPool\": \"constructor(SemiFungiblePositionManager,IPoolManager)\",\n        \"SemiFungiblePositionManager\": \"constructor(IPoolManager,uint256,uint256,uint256)\",\n        \"Ownable\": \"constructor()\",\n        \"ERC20S\": \"constructor(string,string,uint8)\",\n        \"ActorManager\": \"constructor()\",\n        \"ERC20\": \"constructor(string,string,uint8)\",\n        \"MockERC20\": \"constructor(string,string,uint8)\",\n        \"HypoVault\": \"constructor(address,address,IVaultAccountant,uint256)\",\n        \"Token\": \"constructor(string,string,uint8)\",\n        \"PanopticVaultAccountant\": \"constructor()\",\n        \"MockERC20Partial\": \"constructor(string,string)\",\n        \"MockV3CompatibleOracle\": \"constructor()\",\n        \"MockPanopticPool\": \"constructor()\",\n        \"BeforeAfter\": \"constructor()\",\n        \"CryticTester\": \"constructor()\",\n        \"CryticToFoundry\": \"constructor()\",\n        \"Properties\": \"constructor()\",\n        \"Setup\": \"constructor()\",\n        \"TargetFunctions\": \"constructor()\",\n        \"AdminTargets\": \"constructor()\",\n        \"DoomsdayTargets\": \"constructor()\",\n        \"HypoVaultTargets\": \"constructor()\",\n        \"ManagersTargets\": \"constructor()\",\n        \"TokenTargets\": \"constructor()\",\n        \"VaultAccountantMockTargets\": \"constructor()\"\n    },\n    \"have_external_calls\": {\n        \"FoundryAsserts\": [\n            \"failed()\"\n        ],\n        \"StdAssertions\": [\n            \"failed()\"\n        ],\n        \"Test\": [\n            \"failed()\"\n        ],\n        \"CollateralTracker\": [\n            \"transferFrom(address,address,uint256)\",\n            \"withdraw(uint256,address,address,uint256[],bool)\",\n            \"name()\",\n            \"unlockCallback(bytes)\",\n            \"maxWithdraw(address)\",\n            \"refund(address,address,int256)\",\n            \"withdraw(uint256,address,address)\",\n            \"multicall(bytes[])\",\n            \"transfer(address,uint256)\",\n            \"convertToAssets(uint256)\",\n            \"maxRedeem(address)\",\n            \"decimals()\",\n            \"previewDeposit(uint256)\",\n            \"symbol()\",\n            \"maxMint(address)\",\n            \"previewRedeem(uint256)\",\n            \"mint(uint256,address)\",\n            \"convertToShares(uint256)\",\n            \"redeem(uint256,address,address)\",\n            \"deposit(uint256,address)\"\n        ],\n        \"PanopticPool\": [\n            \"assertMinCollateralValues(uint256,uint256)\",\n            \"validateCollateralWithdrawable(address,uint256[],bool)\",\n            \"initialize()\",\n            \"mintOptions(uint256[],uint128,uint64,int24,int24,bool)\",\n            \"burnOptions(uint256,uint256[],int24,int24,bool)\",\n            \"burnOptions(uint256[],uint256[],int24,int24,bool)\",\n            \"getAccumulatedFeesAndPositionsData(address,bool,uint256[])\",\n            \"getOracleTicks()\",\n            \"multicall(bytes[])\",\n            \"positionData(address,uint256)\",\n            \"pokeMedian()\"\n        ],\n        \"SemiFungiblePositionManager\": [\n            \"multicall(bytes[])\",\n            \"burnTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n            \"mintTokenizedPosition((address,Currency,uint24,int24,address),uint256,uint128,int24,int24)\",\n            \"getPoolId((address,Currency,uint24,int24,address))\"\n        ],\n        \"Multicall\": [\n            \"multicall(bytes[])\"\n        ],\n        \"InteractionHelper\": [\n            \"computeDecimals(address)\",\n            \"computeSymbol(address,string)\",\n            \"computeName(address,address,bool,uint24,string)\"\n        ],\n        \"PanopticMath\": [\n            \"computeInternalMedian(uint256,uint256,uint256,uint256,address)\",\n            \"safeERC20Symbol(address)\",\n            \"getOracleTicks(address,uint256)\"\n        ],\n        \"ERC1155\": [\n            \"safeTransferFrom(address,address,uint256,uint256,bytes)\",\n            \"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\"\n        ],\n        \"PositionBalanceLibrary\": [\n            \"unpackAll(uint256)\"\n        ],\n        \"HypoVault\": [\n            \"manage(address[],bytes[],uint256[])\",\n            \"manage(address,bytes,uint256)\",\n            \"executeWithdrawal(address,uint256)\",\n            \"fulfillDeposits(uint256,bytes)\",\n            \"requestDeposit(uint128)\",\n            \"cancelDeposit(address)\",\n            \"executeDeposit(address,uint256)\",\n            \"multicall(bytes[])\",\n            \"fulfillWithdrawals(uint256,uint256,bytes)\"\n        ],\n        \"HypoVaultTest\": [\n            \"test_partial_deposit_share_calculation()\",\n            \"test_onlyOwner_functions()\",\n            \"test_execute_from_wrong_epoch()\",\n            \"test_vaultParameters()\",\n            \"test_withdrawal_with_profit_performance_fee()\",\n            \"test_withdrawal_with_loss_no_performance_fee()\",\n            \"test_epoch_transitions_deposits()\",\n            \"test_sequential_deposit_withdrawal_cycles()\",\n            \"test_partial_withdrawal_exact_numbers()\",\n            \"test_reserved_withdrawal_assets_tracking()\",\n            \"test_cancel_unfulfilled_deposit()\",\n            \"test_deposit_multiple_partial_fulfillments()\",\n            \"test_complex_multi_epoch_scenario()\",\n            \"test_withdrawal_partial()\",\n            \"test_manager_input_validation()\",\n            \"test_cancel_unfulfilled_withdrawal()\",\n            \"test_deposit_full_multiple_users_same_epoch()\",\n            \"test_deposit_full_single_user_epoch0()\",\n            \"setUp()\",\n            \"test_withdrawal_with_multiple_users()\",\n            \"test_large_numbers_precision()\",\n            \"test_exact_withdrawal_calculation()\",\n            \"test_basis_calculation_precision()\",\n            \"test_deposit_full_single_user_later_epoch()\",\n            \"test_epoch_transitions_withdrawals()\",\n            \"test_deposit_partial_multiple_users()\",\n            \"test_withdrawal_scenario_verification()\",\n            \"test_onlyManager_functions()\",\n            \"test_deposit_partial_single_user()\",\n            \"test_multiple_users_partial_deposit_exact_numbers()\",\n            \"test_multiple_cancellations()\",\n            \"test_total_supply_updates()\",\n            \"test_withdrawal_not_fulfillable()\",\n            \"test_mixed_partial_fulfillments_across_epochs()\",\n            \"test_zero_amount_deposit()\",\n            \"test_partial_deposit_exact_numbers()\",\n            \"failed()\",\n            \"test_cancel_withdrawal_restores_basis()\"\n        ],\n        \"PanopticVaultAccountantTest\": [\n            \"test_computeNAV_revert_incorrectLegsCount()\",\n            \"test_computeNAV_revert_zeroPositionBalance()\",\n            \"test_computeNAV_twapCalculation_verification()\",\n            \"test_computeNAV_revert_stalePoolPrice()\",\n            \"test_lockVault_permanent()\",\n            \"test_computeNAV_incorrectPositionList_wrongLegsCount()\",\n            \"test_computeNAV_exactCalculation_sameTokenAsUnderlying()\",\n            \"test_computeNAV_exactCalculation_onlyUnderlyingToken()\",\n            \"test_computeNAV_fullIntegration_realScenario()\",\n            \"test_computeNAV_staleOraclePrice_token1()\",\n            \"test_lockVault_success()\",\n            \"test_computeNAV_priceConversion_exactRatio()\",\n            \"testFuzz_computeNAV_tokenBalances(uint128,uint128,uint128)\",\n            \"test_computeNAV_multiPool_exactAggregation()\",\n            \"setUp()\",\n            \"test_computeNAV_maxPriceDeviationBoundary_exact()\",\n            \"test_computeNAV_basicScenario()\",\n            \"test_computeNAV_staleOraclePrice_token0()\",\n            \"test_computeNAV_tokenConversion()\",\n            \"test_computeNAV_outOfRangeCall_short()\",\n            \"test_computeNAV_outOfRangePut_short()\",\n            \"test_computeNAV_negativeExposure_handledCorrectly()\",\n            \"test_computeNAV_exactCalculation_noPositions()\",\n            \"test_computeNAV_exactCalculation_withPremiums()\",\n            \"test_computeNAV_invalidPools()\",\n            \"test_updatePoolsHash_success()\",\n            \"test_computeNAV_inRangeCall_long()\",\n            \"test_computeNAV_emptyPools()\",\n            \"test_computeNAV_largeNumbers_noOverflow()\",\n            \"test_lockVault_onlyOwner()\",\n            \"test_computeNAV_flippedOracles_conversion()\",\n            \"test_updatePoolsHash_vaultLocked()\",\n            \"test_computeNAV_zeroBalances()\",\n            \"test_updatePoolsHash_onlyOwner()\",\n            \"test_computeNAV_negativePnL()\",\n            \"test_computeNAV_exactCalculation_negativeExposureToZero()\",\n            \"testFuzz_updatePoolsHash(address,bytes32)\",\n            \"test_computeNAV_exactCalculation_withExactPremiums()\",\n            \"test_computeNAV_ironCondor_fourLegPosition()\",\n            \"test_computeNAV_exactCalculation_singleLegPosition()\",\n            \"testFuzz_computeNAV_priceDeviationBoundary(int24)\",\n            \"test_computeNAV_ethHandling()\",\n            \"test_computeNAV_precisionTest_smallAmounts()\",\n            \"test_computeNAV_zeroAmounts_edgeCase()\",\n            \"test_computeNAV_multiLegPosition()\",\n            \"test_computeNAV_incorrectPositionList_zeroBalance()\",\n            \"test_computeNAV_revert_invalidPoolsHash()\",\n            \"testFuzz_computeNAV_underlyingBalance(uint256)\",\n            \"test_computeNAV_straddlePosition_exactCalculation()\",\n            \"test_computeNAV_withPositions()\",\n            \"test_computeNAV_inRangePut_long()\",\n            \"test_computeNAV_multiplePositions_aggregation()\",\n            \"test_computeNAV_staleOraclePrice_pool()\",\n            \"test_computeNAV_flippedTokens()\",\n            \"test_computeNAV_multiplePoolsScenario()\",\n            \"test_computeNAV_priceDeviation_exactBoundary()\",\n            \"failed()\",\n            \"test_computeNAV_maxPriceDeviationBoundary()\"\n        ],\n        \"PoC\": [\n            \"failed()\",\n            \"setUp()\"\n        ],\n        \"CryticTester\": [\n            \"hypoVault_transferFrom(address,address,uint256)\",\n            \"hypoVault_multicall(bytes[])\",\n            \"switch_asset(uint256)\",\n            \"hypoVault_manage(address,bytes,uint256)\",\n            \"hypoVault_setAccountant(address)\",\n            \"switchActor(uint256)\",\n            \"hypoVault_manage(address[],bytes[],uint256[])\",\n            \"hypoVault_requestWithdrawal(uint128)\",\n            \"asset_mint(address,uint128)\",\n            \"asset_approve(address,uint128)\",\n            \"hypoVault_setFeeWallet(address)\",\n            \"add_new_asset(uint8)\",\n            \"hypoVault_requestDeposit(uint128)\",\n            \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n            \"constructor()\",\n            \"hypoVault_fulfillDeposits(uint256,bytes)\",\n            \"hypoVault_approve(address,uint256)\",\n            \"hypoVault_executeDeposit(address,uint256)\",\n            \"hypoVault_setManager(address)\",\n            \"hypoVault_cancelWithdrawal(address)\",\n            \"hypoVault_transferOwnership(address)\",\n            \"hypoVault_renounceOwnership()\",\n            \"hypoVault_transfer(address,uint256)\",\n            \"hypoVault_cancelDeposit(address)\",\n            \"hypoVault_executeWithdrawal(address,uint256)\"\n        ],\n        \"CryticToFoundry\": [\n            \"hypoVault_transferFrom(address,address,uint256)\",\n            \"hypoVault_multicall(bytes[])\",\n            \"switch_asset(uint256)\",\n            \"hypoVault_manage(address,bytes,uint256)\",\n            \"hypoVault_setAccountant(address)\",\n            \"switchActor(uint256)\",\n            \"hypoVault_manage(address[],bytes[],uint256[])\",\n            \"setUp()\",\n            \"hypoVault_requestWithdrawal(uint128)\",\n            \"asset_mint(address,uint128)\",\n            \"asset_approve(address,uint128)\",\n            \"hypoVault_setFeeWallet(address)\",\n            \"add_new_asset(uint8)\",\n            \"hypoVault_requestDeposit(uint128)\",\n            \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n            \"hypoVault_fulfillDeposits(uint256,bytes)\",\n            \"hypoVault_approve(address,uint256)\",\n            \"hypoVault_executeDeposit(address,uint256)\",\n            \"hypoVault_setManager(address)\",\n            \"failed()\",\n            \"hypoVault_cancelWithdrawal(address)\",\n            \"hypoVault_transferOwnership(address)\",\n            \"hypoVault_renounceOwnership()\",\n            \"hypoVault_transfer(address,uint256)\",\n            \"hypoVault_cancelDeposit(address)\",\n            \"hypoVault_executeWithdrawal(address,uint256)\"\n        ],\n        \"TargetFunctions\": [\n            \"hypoVault_transferFrom(address,address,uint256)\",\n            \"hypoVault_multicall(bytes[])\",\n            \"switch_asset(uint256)\",\n            \"hypoVault_manage(address,bytes,uint256)\",\n            \"hypoVault_setAccountant(address)\",\n            \"switchActor(uint256)\",\n            \"hypoVault_manage(address[],bytes[],uint256[])\",\n            \"hypoVault_requestWithdrawal(uint128)\",\n            \"asset_mint(address,uint128)\",\n            \"asset_approve(address,uint128)\",\n            \"hypoVault_setFeeWallet(address)\",\n            \"add_new_asset(uint8)\",\n            \"hypoVault_requestDeposit(uint128)\",\n            \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n            \"hypoVault_fulfillDeposits(uint256,bytes)\",\n            \"hypoVault_approve(address,uint256)\",\n            \"hypoVault_executeDeposit(address,uint256)\",\n            \"hypoVault_setManager(address)\",\n            \"hypoVault_cancelWithdrawal(address)\",\n            \"hypoVault_transferOwnership(address)\",\n            \"hypoVault_renounceOwnership()\",\n            \"hypoVault_transfer(address,uint256)\",\n            \"hypoVault_cancelDeposit(address)\",\n            \"hypoVault_executeWithdrawal(address,uint256)\"\n        ],\n        \"HypoVaultTargets\": [\n            \"hypoVault_transferFrom(address,address,uint256)\",\n            \"hypoVault_multicall(bytes[])\",\n            \"hypoVault_manage(address,bytes,uint256)\",\n            \"hypoVault_setAccountant(address)\",\n            \"hypoVault_manage(address[],bytes[],uint256[])\",\n            \"hypoVault_requestWithdrawal(uint128)\",\n            \"hypoVault_setFeeWallet(address)\",\n            \"hypoVault_requestDeposit(uint128)\",\n            \"hypoVault_fulfillWithdrawals(uint256,uint256,bytes)\",\n            \"hypoVault_fulfillDeposits(uint256,bytes)\",\n            \"hypoVault_approve(address,uint256)\",\n            \"hypoVault_executeDeposit(address,uint256)\",\n            \"hypoVault_setManager(address)\",\n            \"hypoVault_cancelWithdrawal(address)\",\n            \"hypoVault_transferOwnership(address)\",\n            \"hypoVault_renounceOwnership()\",\n            \"hypoVault_transfer(address,uint256)\",\n            \"hypoVault_cancelDeposit(address)\",\n            \"hypoVault_executeWithdrawal(address,uint256)\"\n        ],\n        \"ManagersTargets\": [\n            \"add_new_asset(uint8)\",\n            \"asset_mint(address,uint128)\",\n            \"switch_asset(uint256)\",\n            \"switchActor(uint256)\",\n            \"asset_approve(address,uint128)\"\n        ],\n        \"TokenTargets\": [\n            \"token_transferFrom(address,address,uint256)\",\n            \"token_mint(address,uint256)\",\n            \"token_editSupply(uint256)\",\n            \"token_transfer(address,uint256)\",\n            \"token_approve(address,uint256)\"\n        ],\n        \"VaultAccountantMockTargets\": [\n            \"vaultAccountantMock_setNav(uint256)\",\n            \"vaultAccountantMock_setExpectedManagerInput(bytes)\",\n            \"vaultAccountantMock_setExpectedVault(address)\"\n        ]\n    },\n    \"use_balance\": {\n        \"HypoVault\": [\n            \"manage(address[],bytes[],uint256[])\",\n            \"manage(address,bytes,uint256)\"\n        ]\n    },\n    \"solc_versions\": [\n        \"0.8.29\"\n    ],\n    \"with_fallback\": [],\n    \"with_receive\": []\n}", "first_markdown_element": "", "id": "1f65e3e4b3b0e270cd7e2c345c9247738b992eb7b22ce95eaef168e75428342e", "printer": "echidna"}]}}
